<!--[if IE]><![endif]--><!DOCTYPE html><!--[if IE 8]><html class="no-js ie8 oldie" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/docker-deep-dive/9781800565135/chap13.xhtml"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="2396337"
  data-user-uuid="8778dade-aeed-4320-893c-d28b645a62b7"
  data-username="brentwest"
  data-account-type="Paid"
  
  data-activated-trial-date="12/29/2017"


  data-archive="9781800565135"
  data-publishers="Packt Publishing"



  data-htmlfile-name="chap13.xhtml"
  data-epub-title="Docker Deep Dive" data-debug=0 data-testing=0><![endif]--><!--[if gt IE 8]><!--><html class="no-js" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/docker-deep-dive/9781800565135/chap13.xhtml"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="2396337"
  data-user-uuid="8778dade-aeed-4320-893c-d28b645a62b7"
  data-username="brentwest"
  data-account-type="Paid"
  
  data-activated-trial-date="12/29/2017"


  data-archive="9781800565135"
  data-publishers="Packt Publishing"



  data-htmlfile-name="chap13.xhtml"
  data-epub-title="Docker Deep Dive" data-debug=0 data-testing=0><!--<![endif]--><head><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /><meta name="author" content="O'Reilly Media" /><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"/><meta name="HandheldFriendly" content="True"/><meta name="MobileOptimized" content="320"/><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9781800565135"/><link rel="shortcut icon" href="https://www.oreilly.com/favicon.ico" /><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"/><meta property="twitter:account_id" content="4503599627559754" /><link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"><link href='//fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600,700,900,200italic,300italic,400italic,600italic,700italic,900italic' rel='stylesheet' type='text/css'><title>11: Docker Networking - Docker Deep Dive</title><link rel="stylesheet" href="/static/CACHE/css/output.731fc84c4f9a.css" type="text/css" /><link rel="stylesheet" type="text/css" href="/static/css/annotator.e3b0c44298fc.css"/><link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css"><style type="text/css" title="ibis-book">
    #sbo-rt-content div{widows:2;orphans:2;-webkit-hyphens:none !important;adobe-hyphenate:none;-moz-hyphens:none;hyphens:none}#sbo-rt-content #cover-image{width:100%}@media (max-width:480px){#sbo-rt-content table{width:90% !important}}#sbo-rt-content div#text-cover h2{page-break-before:avoid}#sbo-rt-content h2#toc{margin-top:1em;font-variant:normal;font-family:sans-serif}#sbo-rt-content nav#guide{display:none}#sbo-rt-content ol.toc,#sbo-rt-content ol.toc ol{padding:0;margin:0}#sbo-rt-content .toc.no-parts>li{margin-bottom:.5em;margin-top:.5em;font-size:122%}#sbo-rt-content .toc.no-parts>li>ol>li{font-size:83%}#sbo-rt-content .toc.no-parts>li>ol>li>ol{font-size:80%}#sbo-rt-content .toc.has-parts>li{margin-bottom:1em;margin-top:1em;font-size:120%}#sbo-rt-content .toc.has-parts>li>ol>li{font-size:83%}#sbo-rt-content .toc.has-parts>li>ol>li>ol{font-size:80%}#sbo-rt-content .toc li{list-style:none;padding-left:0;margin-left:1em}#sbo-rt-content .section-number{font-weight:bold}#sbo-rt-content section.dedication-centered{text-align:center}#sbo-rt-content section.dedication{font-style:italic;margin-top:10em}#sbo-rt-content h1#toc{text-align:left}#sbo-rt-content h1,#sbo-rt-content h2,#sbo-rt-content h3,#sbo-rt-content h4,#sbo-rt-content h5,#sbo-rt-content h6{font-family:sans-serif}#sbo-rt-content h1,#sbo-rt-content h2,#sbo-rt-content h3,#sbo-rt-content h4,#sbo-rt-content h5,#sbo-rt-content h6{page-break-after:avoid}#sbo-rt-content body.kramdown h1,#sbo-rt-content body.markua h1.part{font-size:2em;line-height:.8em;font-variant:small-caps;margin-top:20%;text-align:center;padding:0;font-weight:normal}#sbo-rt-content h1#toc,#sbo-rt-content body.kramdown h2,#sbo-rt-content body.markua h1.chapter{font-size:1.5em;margin-top:10%;margin-bottom:1em}#sbo-rt-content body.kramdown h3,#sbo-rt-content body.markua h2.section{font-size:1.17em;margin-top:1em;margin-bottom:.25em}#sbo-rt-content body.kramdown h4,#sbo-rt-content body.markua h3.subsection{margin-top:1em;font-size:1.12em;margin-bottom:.25em}#sbo-rt-content body.kramdown h5,#sbo-rt-content body.markua h4.subsubsection{margin-top:1em;font-size:.83em;margin-bottom:.25em}#sbo-rt-content body.kramdown h6,#sbo-rt-content body.markua h5.subsubsubsection{font-size:.75em;margin:0}#sbo-rt-content hr.scene-break{width:80%;margin-left:10%;margin-right:10%;margin-top:1em;margin-bottom:1em}#sbo-rt-content .scene-break.space{margin-top:1em}#sbo-rt-content .scene-break.stars{margin-top:1em;margin-bottom:1em;width:100%;text-align:center}#sbo-rt-content table{margin:10px auto 20px auto;border-collapse:collapse;page-break-inside:avoid}#sbo-rt-content table.markua-grid-table,#sbo-rt-content table.markua-grid-table td,#sbo-rt-content table.markua-grid-table th{border:thin solid}#sbo-rt-content thead{border-bottom:thin solid}#sbo-rt-content table.markua-grid-table thead{border-bottom:medium solid}#sbo-rt-content tdiv{padding-bottom:40px}#sbo-rt-content tfoot{border-top:medium solid}#sbo-rt-content tr{page-break-inside:avoid}#sbo-rt-content td,#sbo-rt-content th{padding-right:10px}#sbo-rt-content th{text-align:left}#sbo-rt-content ol.quiz-questions>li{margin-top:1em}#sbo-rt-content ol.quiz-questions ol.quiz-choices{padding-left:1em}#sbo-rt-content ol.quiz-questions li p{text-indent:0}#sbo-rt-content p+figure.inline{page-break-before:avoid}#sbo-rt-content p{text-indent:0;margin-top:.5em}#sbo-rt-content span.underline{text-decoration:underline}#sbo-rt-content span.strikethrough{text-decoration:line-through}#sbo-rt-content blockquote{margin:1.5em 0 1.5em 2em}#sbo-rt-content code.lineno,#sbo-rt-content span.lineno{color:gray;font-size:80%}#sbo-rt-content figure.code{margin-top:1em;margin-bottom:1.5em;margin-left:0;font-size:90%}#sbo-rt-content figure.code figcaption+.highlight{border-top:thin solid #c2c2c2;border-bottom:thin solid #c2c2c2}#sbo-rt-content code{-webkit-hyphens:none}#sbo-rt-content figure.code div.highlight{-webkit-hyphens:none}#sbo-rt-content figure.code figcaption,#sbo-rt-content table caption{page-break-after:avoid;margin-bottom:0}#sbo-rt-content table caption{text-align:center}#sbo-rt-content figure.code figcaption{margin-top:-10px;padding-top:-10px;text-indent:0}#sbo-rt-content table.with-caption{margin-top:0;padding-top:0;page-break-before:avoid}#sbo-rt-content .centered p{text-align:center;text-indent:0}#sbo-rt-content div.page-break{page-break-after:always}#sbo-rt-content aside{font-size:.9em;border-style:solid;background-color:rgb(255,255,255);border-color:rgb(200,200,200);border-width:thin;margin:1em;padding:1em 1.5em}#sbo-rt-content aside h1,#sbo-rt-content aside h2,#sbo-rt-content aside h3,#sbo-rt-content aside h4{margin-bottom:.5em;margin-top:0;text-align:left}#sbo-rt-content aside.blurb{background-color:white;margin:1em 1em 1em 0;border-style:none;width:calc(100% - 60px);display:inline-block;padding-left:60px;background-repeat:no-repeat;background-position:0% 1em;background-size:40px 40px}#sbo-rt-content aside.blurb{background-image:url(images/leanpub_warning.png)}#sbo-rt-content div.footnotes h1,#sbo-rt-content div.footnotes h2{text-align:left}#sbo-rt-content div.footnotes h1{font-size:1.5em}#sbo-rt-content div.footnotes h2{font-size:1.17em}#sbo-rt-content div.footnotes .endnote-number{padding-right:.5em;font-weight:bold;font-size:1.2em}#sbo-rt-content pre{margin-top:.5em;margin-bottom:.5em;font-family:monospace}#sbo-rt-content div.poem pre{font-family:serif}#sbo-rt-content img.inline-equation{height:1em;vertical-align:baseline}#sbo-rt-content img.block-equation{margin-top:.5em;margin-right:auto;margin-bottom:.5em;margin-left:auto;text-align:center;display:block}#sbo-rt-content ul,#sbo-rt-content ol{margin-top:1em}#sbo-rt-content ul ul,#sbo-rt-content ul ol,#sbo-rt-content ol ul,#sbo-rt-content ol ol{margin-top:.1em}#sbo-rt-content ol.arabic{list-style-type:decimal}#sbo-rt-content ol.lower-roman{list-style-type:lower-roman}#sbo-rt-content ol.lower-alpha{list-style-type:lower-alpha}#sbo-rt-content ol.upper-alpha{list-style-type:upper-alpha}#sbo-rt-content p.caption,#sbo-rt-content table caption,#sbo-rt-content figure.image figcaption{font-size:.7em;font-weight:bold}#sbo-rt-content figure.image{width:90%;max-width:90%;margin-inline-start:0;margin-inline-end:0;text-align:center}#sbo-rt-content figure.image img{display:inline-block}#sbo-rt-content figure figcaption{text-align:center;margin:0 !important;padding:0 !important;text-indent:0 !important;page-break-before:avoid}#sbo-rt-content .figure-wrapper.center{text-align:center}#sbo-rt-content .figure-wrapper.floatleft figure{float:left;clear:left;margin-right:1em;margin-left:0}#sbo-rt-content .figure-wrapper.floatright figure{float:right;clear:right;margin-left:1em;margin-right:0}#sbo-rt-content .figure-wrapper.floatleft figure,#sbo-rt-content .figure-wrapper.floatright figure{width:50%}#sbo-rt-content .figure-wrapper.floatleft figure img,#sbo-rt-content .figure-wrapper.floatright figure img{width:100% !important;vertical-align:text-top;margin:.5em !important}#sbo-rt-content .figure-wrapper.floatleft figure figcaption,#sbo-rt-content .figure-wrapper.floatright figure figcaption{width:100%}#sbo-rt-content .figure-wrapper.alignright{text-align:right}#sbo-rt-content .figure-wrapper.alignleft{text-align:left}#sbo-rt-content .figure-wrapper.alignleft figure{margin-left:0}#sbo-rt-content .figure-wrapper.alignright figure{margin-right:0}#sbo-rt-content .figure-wrapper.alignright figure,#sbo-rt-content .figure-wrapper.alignleft figure{text-align:center}#sbo-rt-content figure.alignright figcaption,#sbo-rt-content figure.alignleft figcaption{text-align:center}#sbo-rt-content .udl{text-decoration:line-through}#sbo-rt-content .uil{font-weight:900}#sbo-rt-content figure.image,#sbo-rt-content image,#sbo-rt-content figure.audio,#sbo-rt-content audio{display:inline-block}#sbo-rt-content .hll{background-color:#ffc}#sbo-rt-content .c{color:#408080;font-style:italic}#sbo-rt-content .err{color:#F00}#sbo-rt-content .k{color:#008000;font-weight:600}#sbo-rt-content .o{color:#666}#sbo-rt-content .cm{color:#408080;font-style:italic}#sbo-rt-content .cp{color:#BC7A00}#sbo-rt-content .c1{color:#408080;font-style:italic}#sbo-rt-content .cs{color:#408080;font-style:italic}#sbo-rt-content .gd{color:#A00000}#sbo-rt-content .ge{font-style:italic}#sbo-rt-content .gr{color:#F00}#sbo-rt-content .gh{color:#000080;font-weight:600}#sbo-rt-content .gi{color:#00A000}#sbo-rt-content .go{color:#888}#sbo-rt-content .gp{color:#000080;font-weight:600}#sbo-rt-content .gs{font-weight:600}#sbo-rt-content .gu{color:#800080;font-weight:600}#sbo-rt-content .gt{color:#04D}#sbo-rt-content .kc{color:#008000;font-weight:600}#sbo-rt-content .kd{color:#008000;font-weight:600}#sbo-rt-content .kn{color:#008000;font-weight:600}#sbo-rt-content .kp{color:#008000}#sbo-rt-content .kr{color:#008000;font-weight:600}#sbo-rt-content .kt{color:#B00040}#sbo-rt-content .m{color:#666}#sbo-rt-content .s{color:#BA2121}#sbo-rt-content .na{color:#7D9029}#sbo-rt-content .nb{color:#008000}#sbo-rt-content .nc{color:#00F;font-weight:600}#sbo-rt-content .no{color:#800}#sbo-rt-content .nd{color:#A2F}#sbo-rt-content .ni{color:#999;font-weight:600}#sbo-rt-content .ne{color:#D2413A;font-weight:600}#sbo-rt-content .nf{color:#00F}#sbo-rt-content .nl{color:#A0A000}#sbo-rt-content .nn{color:#00F;font-weight:600}#sbo-rt-content .nt{color:#008000;font-weight:600}#sbo-rt-content .nv{color:#19177C}#sbo-rt-content .ow{color:#A2F;font-weight:600}#sbo-rt-content .w{color:#bbb}#sbo-rt-content .mf{color:#666}#sbo-rt-content .mh{color:#666}#sbo-rt-content .mi{color:#666}#sbo-rt-content .mo{color:#666}#sbo-rt-content .sb{color:#BA2121}#sbo-rt-content .sc{color:#BA2121}#sbo-rt-content .sd{color:#BA2121;font-style:italic}#sbo-rt-content .s2{color:#BA2121}#sbo-rt-content .se{color:#B62;font-weight:600}#sbo-rt-content .sh{color:#BA2121}#sbo-rt-content .si{color:#B68;font-weight:600}#sbo-rt-content .sx{color:#008000}#sbo-rt-content .sr{color:#B68}#sbo-rt-content .s1{color:#BA2121}#sbo-rt-content .ss{color:#19177C}#sbo-rt-content .bp{color:#008000}#sbo-rt-content .vc{color:#19177C}#sbo-rt-content .vg{color:#19177C}#sbo-rt-content .vi{color:#19177C}#sbo-rt-content .il{color:#666}
    </style><script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9781800565135/chapter/chap13.xhtml",
          "book_id": "9781800565135",
          "chapter_uri": "chap13.xhtml",
          "position": 0,
          "user_uuid": "8778dade-aeed-4320-893c-d28b645a62b7",
          "next_chapter_uri": "/library/view/docker-deep-dive/9781800565135/chap14.xhtml"
        
      },
      title: "Docker Deep Dive",
      author_list: "Nigel Poulton",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false
    };
    // ]]></script><script src="/static/js/src/modernizr.8e35451ddb64.js"></script><script>
    
      

      
        
          window.PUBLIC_ANNOTATIONS = true;
        
      

      window.MOBILE_PUBLIC_ANNOTATIONS = false;

    

    
      window.PRIVACY_CONTROL_OVERRIDE = false;
    

      window.PRIVACY_CONTROL_SWITCH = true;

      window.PUBLISHER_PAGES = true;

      window.SBO = {
        "constants": {
          "SITB_ENDPOINT": "/api/v2/sitb/",
          "SEARCH_SELECT_ENDPOINT": "https://learning.oreilly.com/api/v2/search/select/",
          "ENABLE_ONLINE_TRAINING": true
        }
      };
  </script><link rel="canonical" href="https://learning.oreilly.com/library/view/docker-deep-dive/9781800565135/chap13.xhtml"/><meta name="description" content=" 11: Docker Networking It’s always the network! Any time there’s a an infrastructure problem, we always blame the network. Part of the reason is that networks are at the center ... "><meta property="og:title" content="11: Docker Networking" /><meta itemprop="isPartOf" content="/library/view/docker-deep-dive/9781800565135/" /><meta itemprop="name" content="11: Docker Networking" /><meta property="og:url" itemprop="url" content="https://learning.oreilly.com/library/view/docker-deep-dive/9781800565135/chap13.xhtml" /><meta property="og:site_name" content="Safari" /><meta property="og:image" itemprop="thumbnailUrl" content="https://learning.oreilly.com/library/cover/9781800565135/" /><meta property="og:description" itemprop="description" content=" 11: Docker Networking It’s always the network! Any time there’s a an infrastructure problem, we always blame the network. Part of the reason is that networks are at the center ... "><meta itemprop="inLanguage" content="en" /><meta itemprop="publisher" content="Packt Publishing" /><meta property="og:type" content="book" /><meta property="og:book:isbn" itemprop="isbn" content="9781800565135" /><meta property="og:book:author" itemprop="author" content="Nigel Poulton" /><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@OReillyMedia"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: <%= font_size %> !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: <%= font_family %> !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: <%= column_width %>% !important; margin: 0 auto !important; }"></style><noscript><meta http-equiv="refresh" content="0; url=/library/no-js/" /></noscript><script>
    var dataLayer = window.dataLayer || [];

    
      window.medalliaVsgUserIdentifier = '8778dade-aeed-4320-893c-d28b645a62b7';
      dataLayer.push({userIdentifier: '8778dade-aeed-4320-893c-d28b645a62b7'});
      dataLayer.push({loggedIn: 'yes'});

      
        window.medalliaVsgAccountIdentifier = 'dc635f87-41b9-4c9e-80f5-2296e3b5b566';
        

        window.medalliaVsgIsIndividual = true;
        
          
          dataLayer.push({learningAccountType: 'individual'});
          
        

        
          dataLayer.push({learningPaidAccount: 'yes'});
        
      
    

    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-5P4V6Z');
    (function () {
      var VERSION = 'V1.1';
      var AUTHOR = 'Awwad';
      if (!window.GtmHelper)
        window.GtmHelper = function () {
          var instance = this;
          var loc = document.location;
          this.version = VERSION;
          this.author = AUTHOR;
          this.readCookie = function (name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
              var c = ca[i];
              while (c.charAt(0) == ' ') c = c.substring(1, c.length);
              if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
          };
          this.createCookie = function (name, value, days, cookieDomain) {
            var domain = "";
            var expires = "";

            if (days) {
              var date = new Date();
              date.setTime(date.getTime() + Math.ceil(days * 24 * 60 * 60 * 1000));
              var expires = " expires=" + date.toGMTString() + ";";
            }

            if (typeof (cookieDomain) != 'undefined')
              domain = " domain=" + cookieDomain + "; ";

            document.cookie = name + "=" + value + ";" + expires + domain + "path=/";
          };

          this.isDuplicated = function (currentTransactionId) {
            // the previous transaction id:
            var previousTransIdValue = this.readCookie("previousTransId");

            if (currentTransactionId === previousTransIdValue) {
              return true; // Duplication
            } else {
              return false;
            }
          };
        }
    })()
  </script><script defer src="/static/js/build/vendor.3eecedff6f59.js"></script><script defer src="/static/js/build/reader.04601a48277a.js"></script></head>


<body class="reading sidenav nav-collapsed  scalefonts">

    
  <noscript> 
    <iframe src="//www.googletagmanager.com/ns.html?id=GTM-5P4V6Z"
            height="0" width="0"
            style="display:none;visibility:hidden">
    </iframe>
  </noscript>



    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        

  


<a href="#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li><a href="/home/" class="l0 nav-icn"><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M11.738 14H9.254v-3.676a.617.617 0 0 0-.621-.613H7.39a.617.617 0 0 0-.62.613V14H4.284a.617.617 0 0 1-.622-.613V10.22c0-.327.132-.64.367-.87l3.547-3.493a.627.627 0 0 1 .875 0l3.54 3.499c.234.229.366.54.367.864v3.167a.617.617 0 0 1-.62.613zM7.57 2.181a.625.625 0 0 1 .882 0l5.77 5.692-.93.92-5.28-5.209-5.28 5.208-.932-.919 5.77-5.692z" /></svg><span>Home</span></a></li><li class="search"><a href="#" class="t-search-nav trigger nav-icn l0" data-dropdown-selector=".searchbox"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>search icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M31.3 0C20.9 0 12.5 8.4 12.5 18.8 12.5 22.5 13.6 25.9 15.4 28.8L1.2 42.9C-0.4 44.5-0.4 47.2 1.2 48.8 2 49.6 3.1 50 4.2 50 5.2 50 6.3 49.6 7.1 48.8L21.2 34.6C24.1 36.5 27.5 37.5 31.3 37.5 41.6 37.5 50 29.1 50 18.8 50 8.4 41.6 0 31.3 0ZM31.3 31.3C24.4 31.3 18.8 25.6 18.8 18.8 18.8 11.9 24.4 6.3 31.3 6.3 38.1 6.3 43.8 11.9 43.8 18.8 43.8 25.6 38.1 31.3 31.3 31.3Z"/></g></svg><span>Search</span></a></li><li class="usermenu dropdown"><a href="#" class="trigger l0 nav-icn nav-dropdown"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>navigation arrow</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M0.1 12.5L9.7 3.1C9.8 3 9.9 3 10 3 10.1 3 10.2 3 10.3 3.1L19.9 12.5C20 12.5 20 12.6 20 12.8 20 12.9 20 13 19.9 13L17 15.9C16.9 16 16.8 16 16.7 16 16.5 16 16.4 16 16.4 15.9L10 9.7 3.6 15.9C3.6 16 3.5 16 3.3 16 3.2 16 3.1 16 3 15.9L0.1 13C0 12.9 0 12.8 0 12.7 0 12.7 0 12.6 0.1 12.5Z"/></g></svg><span>Expand Nav</span></a><div class="drop-content"><ul><li class="flyout-parent"><a
                href="#"
                class="l1 nav-icn "
                
              ><?xml version="1.0" encoding="UTF-8"?><svg width="16px" height="16px" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M8,8 C6.34321755,8 5.00013,6.65691245 5.00013,5.00013 C5.00013,3.34334755 6.34321755,2.00026001 8,2.00026001 C9.65678245,2.00026001 10.99987,3.34334755 10.99987,5.00013 C10.99987,6.65691245 9.65678245,8 8,8 Z M2.33024571,11.3523547 L2.33774538,11.3523547 C3.7622187,9.70968996 5.82947484,8.76608166 8.00374984,8.76608166 C10.1780248,8.76608166 12.245281,9.70968996 13.6697543,11.3523547 C13.8892083,11.6177474 14.0062813,11.9530021 13.99974,12.2973138 L13.99974,13.99974 L2.00026001,13.99974 L2.00026001,12.2973138 C1.99371867,11.9530021 2.11079172,11.6177474 2.33024571,11.3523547 Z" id="path-1"></path></svg><span>Your O&#39;Reilly</span></a><ul class="flyout"><li><a
                    href="/profile/"
                    class="l2 nav-icn"
                    
                  ><span>Profile</span></a></li><li><a
                    href="/history/"
                    class="l2 nav-icn"
                    
                  ><span>History</span></a></li><li><a
                    href="/playlists/"
                    class="l2 nav-icn"
                    
                  ><span>Playlists</span></a></li><li><a
                    href="/u/8778dade-aeed-4320-893c-d28b645a62b7/"
                    class="l2 nav-icn"
                    
                  ><span>Highlights</span></a></li></ul></li><li class="flyout-parent"><a
                href="#"
                class="l1 nav-icn "
                
              ><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M11.564 2.263l2.172 2.174c.17.168.264.397.264.636V11a.6.6 0 0 1-.6.6h-.6V6.2h-6V2.6a.6.6 0 0 1 .6-.6h3.527c.239 0 .468.095.637.263zM2.6 14a.6.6 0 0 1-.6-.6V6.8a.6.6 0 0 1 .6-.6h1.903a1.2 1.2 0 0 1 .849.352L6.2 7.4H11a.6.6 0 0 1 .6.6v5.4a.6.6 0 0 1-.6.6H2.6zM11 5h1.8L11 3.2V5z" /></svg><span>Featured</span></a><ul class="flyout"><li><a
                    href="/featured/navigating-21st-century/"
                    class="l2 nav-icn"
                    
                  ><span>Navigating Change</span></a></li><li><a
                    href="/recommendations/"
                    class="l2 nav-icn"
                    
                  ><span>Recommended</span></a></li></ul></li><li class="flyout-parent"><a
                href="#"
                class="l1 nav-icn "
                
              ><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>queue icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 29.2C25.4 29.2 25.8 29.1 26.1 28.9L48.7 16.8C49.5 16.4 50 15.5 50 14.6 50 13.7 49.5 12.8 48.7 12.4L26.1 0.3C25.4-0.1 24.6-0.1 23.9 0.3L1.3 12.4C0.5 12.8 0 13.7 0 14.6 0 15.5 0.5 16.4 1.3 16.8L23.9 28.9C24.2 29.1 24.6 29.2 25 29.2ZM7.3 14.6L25 5.2 42.7 14.6 25 24 7.3 14.6ZM48.7 22.4L47.7 21.9 25 34.2 2.3 21.9 1.3 22.4C0.5 22.9 0 23.7 0 24.7 0 25.6 0.5 26.5 1.3 26.9L23.9 39.3C24.2 39.5 24.6 39.6 25 39.6 25.4 39.6 25.8 39.5 26.1 39.3L48.7 26.9C49.5 26.5 50 25.6 50 24.7 50 23.7 49.5 22.9 48.7 22.4ZM48.7 32.8L47.7 32.3 25 44.6 2.3 32.3 1.3 32.8C0.5 33.3 0 34.1 0 35.1 0 36 0.5 36.9 1.3 37.3L23.9 49.7C24.2 49.9 24.6 50 25 50 25.4 50 25.8 49.9 26.1 49.7L48.7 37.3C49.5 36.9 50 36 50 35.1 50 34.1 49.5 33.3 48.7 32.8Z"/></g></svg><span>Explore</span></a><ul class="flyout"><li><a
                    href="/topics/"
                    class="l2 nav-icn"
                    
                  ><span>All Topics</span></a></li><li><a
                    href="/search/?query=&amp;extended_publisher_data=true&amp;highlight=true&amp;include_assessments=false&amp;include_case_studies=true&amp;include_courses=true&amp;include_orioles=true&amp;include_playlists=true&amp;include_collections=true&amp;include_notebooks=true&amp;is_academic_institution_account=false&amp;source=user&amp;formats=book&amp;sort=publication_date&amp;facet_json=true&amp;page=0"
                    class="l2 nav-icn"
                    
                  ><span>Early Releases</span></a></li><li><a
                    href="/playlists/discover/"
                    class="l2 nav-icn"
                    
                  ><span>Shared Playlists</span></a></li><li><a
                    href="/search/?query=&amp;extended_publisher_data=true&amp;highlight=true&amp;include_assessments=false&amp;include_case_studies=true&amp;include_courses=true&amp;include_orioles=true&amp;include_playlists=true&amp;include_collections=true&amp;include_notebooks=true&amp;is_academic_institution_account=false&amp;source=user&amp;formats=book&amp;formats=case%20study&amp;formats=learning%20path&amp;formats=live%20online%20training&amp;formats=notebook&amp;formats=oriole&amp;formats=video&amp;sort=popularity&amp;facet_json=true&amp;page=0&amp;collection_type=expert"
                    class="l2 nav-icn"
                    
                  ><span>Most Popular Titles</span></a></li><li><a
                    href="/resource-centers/"
                    class="l2 nav-icn"
                    
                  ><span>Resource Centers</span></a></li></ul></li><li class="flyout-parent"><a
                href="#"
                class="l1 nav-icn "
                
              ><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M12.8 3.2A1.2 1.2 0 0 1 14 4.4v8.4a1.2 1.2 0 0 1-1.2 1.2H3.2A1.2 1.2 0 0 1 2 12.8V4.4a1.2 1.2 0 0 1 1.2-1.2h1.2V2h1.2v1.2h4.8V2h1.2v1.2h1.2zm-9.6 9.6h9.6V6.2H3.2v6.6zM8 9.5a1.35 1.35 0 1 1 0-2.7 1.35 1.35 0 0 1 0 2.7zm2.7 2.148v.552H5.3v-.552c0-.321.124-.634.355-.858a3.358 3.358 0 0 1 4.69 0c.23.224.355.537.355.858z" /></svg><span>Attend</span></a><ul class="flyout"><li><a
                    href="/live-training/"
                    class="l2 nav-icn"
                    
                  ><span>Live Trainings</span></a></li><li><a
                    href="/featured/architectural-katas"
                    class="l2 nav-icn"
                    
                  ><span>Architectural Katas</span></a></li><li><a
                    href="/featured/strata/"
                    class="l2 nav-icn"
                    
                  ><span>Strata</span></a></li><li><a
                    href="/featured/oscon/"
                    class="l2 nav-icn"
                    
                  ><span>Open Source</span></a></li><li><a
                    href="/featured/infrastructure-ops/"
                    class="l2 nav-icn"
                    
                  ><span>Infra &amp; Ops</span></a></li><li><a
                    href="/featured/software-architecture/"
                    class="l2 nav-icn"
                    
                  ><span>Software Arch</span></a></li></ul></li><li class="flyout-parent"><a
                href="#"
                class="l1 nav-icn "
                
              ><svg width="16px" height="16px" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M11.6467109,4.35328907 L14.7964612,7.51003884 C15.0678463,7.78304342 15.0678463,8.22395603 14.7964612,8.49696061 L11.6467109,11.6467109 L10.6597892,10.6597892 L13.3055794,8 L10.6597892,5.34021084 L11.6467109,4.35328907 Z M4.35328907,11.6467109 L1.20353875,8.48996116 C0.932153749,8.21695658 0.932153749,7.77604397 1.20353875,7.50303939 L4.35328907,4.35328907 L5.34021084,5.34021084 L2.69442057,8 L5.34021084,10.6597892 L4.35328907,11.6467109 Z M5.84417089,11.4997226 L8.67194674,4.50027742 L10.1838269,4.50027742 L7.35605105,11.4997226 L5.84417089,11.4997226 Z" id="Mask"></path></svg><span>Interact</span></a><ul class="flyout"><li><a
                    href="/scenarios/?classification=content-scenario"
                    class="l2 nav-icn"
                    
                  ><span>Scenarios</span></a></li><li><a
                    href="/scenarios/?classification=sandbox-scenario"
                    class="l2 nav-icn"
                    
                  ><span>Sandboxes</span></a></li><li><a
                    href="/interactive/?classification=jupyter-notebook"
                    class="l2 nav-icn"
                    
                  ><span>Jupyter Notebooks</span></a></li></ul></li><li ><a
                href="/answers/"
                class="l1 nav-icn "
                
              ><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path d="M2.31032699,3.75609006 C4.65421571,1.41371359 8.45302454,1.41472092 10.7955702,3.75860838 C13.1381158,6.10249583 13.1369405,9.90130261 10.7930518,12.243847 C8.44916311,14.5863913 4.65018639,14.5852161 2.30780867,12.2413286 C-0.0346204845,9.89749489 -0.0334929936,6.09853298 2.31032699,3.75609006 Z M8.8198605,4.98016308 C7.34193969,3.86924672 5.23410194,3.98609692 3.88914868,5.33104946 C3.12814393,6.09032122 2.72818176,7.13880077 2.79015179,8.21201133 C2.79115912,8.23064692 2.79233434,8.24928252 2.79350956,8.26791811 L2.79350956,8.26791811 C2.83179539,8.8307976 2.9944077,9.37404287 3.26947292,9.86201677 L3.26947292,9.86201677 L2.77621706,11.7027432 C2.7699968,11.7259241 2.77662063,11.7506624 2.79359185,11.7676337 C2.8105631,11.7846049 2.83530144,11.7912287 2.85848233,11.7850085 L2.85848233,11.7850085 L4.69400524,11.2922565 C5.26306363,11.6167344 5.90703177,11.786885 6.56209849,11.7858479 C8.64827865,11.7858479 10.3395879,10.094542 10.3395879,8.00836292 C10.3405204,6.84135608 9.80105674,5.73967784 8.87862141,5.02482134 L8.87862141,5.02482134 L8.82825492,4.98654283 Z M13.7933062,2 C14.7073496,2.00009863 15.4482759,2.74110484 15.4482759,3.65514822 C15.4482759,4.32460943 15.0449926,4.92814782 14.4264842,5.18432286 C13.8079757,5.44049789 13.096053,5.29885769 12.6226979,4.82545158 C12.1493429,4.35204547 12.0077795,3.64010743 12.2640213,3.02162665 C12.5202631,2.40314587 13.123845,1.99992776 13.7933062,2 Z"/></svg><span>Answers</span></a></li><li ><a
                href="/certifications/"
                class="l1 nav-icn "
                
              ><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path d="M12.912 9.18L14 8.014l-1.088-1.18a.304.304 0 01-.075-.268L13.195 5l-1.535-.463a.313.313 0 01-.194-.194l-.462-1.537-1.565.358c-.09.03-.194 0-.269-.074L8.007 2 6.845 3.09a.303.303 0 01-.269.074l-1.565-.358-.462 1.537a.313.313 0 01-.194.194L2.82 5l.358 1.567a.26.26 0 01-.075.269L2 8.015l1.088 1.164c.075.075.09.18.075.269l-.358 1.567 1.535.463c.09.03.164.104.194.194l.462 1.537 1.565-.358c.015 0 .045-.015.075-.015.075 0 .15.03.209.074L8.007 14l1.163-1.09a.303.303 0 01.269-.074l1.565.358.462-1.537a.313.313 0 01.194-.194L13.195 11l-.358-1.567a.338.338 0 01.075-.254zm-6.046 1.37L4.41 8.26l1.16-1.244 1.767 1.649L10.4 5.6l1.202 1.202-4.242 4.243-.495-.495z"/></svg><span>Certifications</span></a></li><li ><a
                href="/preferences/"
                class="l1 nav-icn "
                
              ><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"/></g></svg><span>Settings</span></a></li><li ><a
                href="/public/support/"
                class="l1 nav-icn "
                
              ><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M7.363 6.656a2.692 2.692 0 0 1-2.681-2.703c0-1.493 1.2-2.703 2.681-2.703a2.692 2.692 0 0 1 2.682 2.703c0 1.493-1.2 2.703-2.682 2.703zm4.023 2.027c-1.852 0-3.352 1.513-3.352 3.379H2v-1.534c-.006-.31.099-.612.295-.852a6.666 6.666 0 0 1 9.09-.993zm-.543.676h1.12v.304c.003.284.16.543.408.676a.766.766 0 0 0 .77 0l.303-.176.556.966-.302.176a.772.772 0 0 0-.362.676v.08a.772.772 0 0 0 .362.677l.302.21-.556.965-.302-.175a.766.766 0 0 0-.771 0 .778.778 0 0 0-.409.675v.352h-1.106v-.372a.778.778 0 0 0-.409-.676.766.766 0 0 0-.77 0l-.303.176-.556-.912.302-.176a.772.772 0 0 0 .362-.676v-.04-.04a.772.772 0 0 0-.362-.676l-.302-.176.556-.966.289.155a.766.766 0 0 0 .77 0 .778.778 0 0 0 .41-.676V9.36zm1.562 2.703c0-.271-.108-.531-.3-.722a1.001 1.001 0 0 0-.72-.292 1.01 1.01 0 0 0-.992 1.023 1.01 1.01 0 0 0 1.01 1.004 1.01 1.01 0 0 0 1.002-1.013z" /></svg><span>Support</span></a></li><li ><a
                href="https://get.oreilly.com/email-signup.html"
                class="l1 nav-icn "
                target=&quot;_blank&quot;
              ><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M11.564 2.263l2.172 2.174c.17.168.264.397.264.636V11a.6.6 0 0 1-.6.6h-.6V6.2h-6V2.6a.6.6 0 0 1 .6-.6h3.527c.239 0 .468.095.637.263zM2.6 14a.6.6 0 0 1-.6-.6V6.8a.6.6 0 0 1 .6-.6h1.903a1.2 1.2 0 0 1 .849.352L6.2 7.4H11a.6.6 0 0 1 .6.6v5.4a.6.6 0 0 1-.6.6H2.6zM11 5h1.8L11 3.2V5z" /></svg><span>Newsletters</span></a></li><li ><a
                href="/accounts/logout/"
                class="l1 nav-icn "
                
              ><svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M2.613 12.63A.607.607 0 0 1 2 12.03V3.602C2 3.269 2.274 3 2.613 3h5.515v1.204H3.226v7.223h4.902v1.203H2.613zM5.677 9.02V6.611h4.903V4.926a.301.301 0 0 1 .19-.274.31.31 0 0 1 .33.063l2.722 2.673a.594.594 0 0 1 0 .849L11.1 10.909a.31.31 0 0 1-.331.063.301.301 0 0 1-.19-.274V9.02H5.677z" /></svg><span>Sign Out</span></a></li></ul></div></li></ul></nav></header>



      </div>
      <div id="container" class="application">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      Docker Deep Dive
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="#" title="Search in archive" class="js-search-controls search-controls" onclick="window.Appcues.track('SearchBook_HeronBook')"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input type="search" name="query" placeholder="Search inside this book..." autocomplete="off"></form><div class="search-archive-results"><div class="js-sitb-results-region"></div></div></li><li class="queue-control"><div class="js-content-uri" data-content-uri="/api/v1/book/9781800565135/chapter/chap13.xhtml"><div class="js-collections-dropdown collections-dropdown menu-bit-cards" onclick="window.Appcues.track('AddPlaylist_HeronBook')"></div></div></li><li class="js-font-control-panel font-control-activator"><a href="#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size" onclick="window.Appcues.track('ChangeFont_HeronBook')"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="#" class="trigger" data-push-state="false" title="Share" aria-label="Share" onclick="window.Appcues.track('Share_HeronBook')"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a
        class="twitter share-button t-twitter"
        target="_blank"
        aria-label="Share this section on Twitter"
        title="Share this section on Twitter"
      
        href="https://twitter.com/share?url=https://learning.oreilly.com/library/view/docker-deep-dive/9781800565135/chap13.xhtml&text=Docker%20Deep%20Dive&via=OReillyMedia"
      ><span>Twitter</span></a></li><li><a
        class="facebook share-button t-facebook"
        target="_blank"
        aria-label="Share this section on Facebook"
        title="Share this section on Facebook"
        href="https://www.facebook.com/sharer/sharer.php?u=https://learning.oreilly.com/library/view/docker-deep-dive/9781800565135/chap13.xhtml"
      ><span>Facebook</span></a></li><li><a
        class="googleplus share-button t-googleplus"
        target="_blank"
        aria-label="Share this secton on Google Plus"
        title="Share this secton on Google Plus"
        href="https://plus.google.com/share?url=https://learning.oreilly.com/library/view/docker-deep-dive/9781800565135/chap13.xhtml"
      ><span>Google Plus</span></a></li><li><a
        class="email share-button t-email"
        aria-label="Share this section via email"
        title="Share this section via email"
      
        href="mailto:?subject=Safari: 11%3A%20Docker%20Networking&body=https://learning.oreilly.com/library/view/docker-deep-dive/9781800565135/chap13.xhtml%0D%0Afrom Docker%20Deep%20Dive%0D%0A"
      ><span>Email</span></a></li></ul></li><!-- endif request.user.is_authenticated -->
      </ul>
    </div>

      
          
      

    <section role="document">
        
        




  <script defer src="/static/js/build/djangoMessagesPage.70cc9b5f53ab.js"></script>


        <script src="//fast.appcues.com/48743.js"></script>
<script>
  var userId = "8778dade-aeed-4320-893c-d28b645a62b7";

  var userObject = {
    firstName: "Brent",
    segment: "Paid",
    admin: "False",
    profileCreatedOn: "2017-12-29",
    academic: ""
  };
  window.Appcues.identify(userId, userObject);
  window.Appcues.page();

  setTimeout(function () {
    window.Appcues.track('ViewingBook_HeronBook')
  }, 20000);
</script>


	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="/library/view/docker-deep-dive/9781800565135/chap12.xhtml" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">10: Docker Swarm</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="/library/view/docker-deep-dive/9781800565135/chap14.xhtml" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">12: Docker overlay networking</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content" class="kramdown"><div>
<h2 id="leanpub-auto-docker-networking">11: Docker Networking</h2>

<p>It’s always the network!</p>

<p>Any time there’s a an infrastructure problem, we always blame the network. Part of the reason is that networks are at the center of everything — <strong>no network, no app!</strong></p>

<p>In the early days of Docker, networking was hard — really hard. These days, it’s <em>almost</em> a pleasure ;-)</p>

<p>In this chapter, we’ll look at the fundamentals of Docker networking. Things like the Container Network Model (CNM) and <code>libnetwork</code>. We’ll also get our hands dirty building some networks.</p>

<p>As usual, we’ll split the chapter into three parts:</p>

<ul>
  <li>The TLDR</li>
  <li>The deep dive</li>
  <li>The commands</li>
</ul>

<h3 id="leanpub-auto-docker-networking---the-tldr">Docker Networking - The TLDR</h3>

<p>Docker runs applications inside of containers, and applications need to communicate over lots of different networks. This means Docker needs strong networking capabilities.</p>

<p>Fortunately, Docker has solutions for container-to-container networks, as well as connecting to existing networks and VLANs. The latter is important for containerized apps that interact with functions and services on external systems such as VM’s and physical servers.</p>

<p>Docker networking is based on an open-source pluggable architecture called the Container Network Model (CNM). <code>libnetwork</code> is Docker’s real-world implementation of the CNM, and it provides all of Docker’s core networking capabilities. Drivers plug in to <code>libnetwork</code> to provide specific network topologies.</p>

<p>To create a smooth out-of-the-box experience, Docker ships with a set of native drivers that deal with the most common networking requirements. These include single-host bridge networks, multi-host overlays, and options for plugging into existing VLANs. Ecosystem partners can extend things further by providing their own drivers.</p>

<p>Last but not least, <code>libnetwork</code> provides a native service discovery and basic container load balancing solution.</p>

<p>That’s this big picture. Let’s get into the detail.</p>

<h3 id="leanpub-auto-docker-networking---the-deep-dive">Docker Networking - The Deep Dive</h3>

<p>We’ll organize this section of the chapter as follows:</p>

<ul>
  <li>The theory</li>
  <li>Single-host bridge networks</li>
  <li>Multi-host overlay networks</li>
  <li>Connecting to existing networks</li>
  <li>Service Discovery</li>
  <li>Ingress networking</li>
</ul>

<h4 id="leanpub-auto-the-theory">The theory</h4>

<p>At the highest level, Docker networking comprises three major components:</p>

<ul>
  <li>The Container Network Model (CNM)</li>
  <li><code>libnetwork</code></li>
  <li>Drivers</li>
</ul>

<p>The CNM is the design specification. It outlines the fundamental building blocks of a Docker network.</p>

<p><code>libnetwork</code> is a real-world implementation of the CNM, and is used by Docker. It’s written in Go, and implements the core components outlined in the CNM.</p>

<p>Drivers extend the model by implementing specific network topologies such as VXLAN overlay networks.</p>

<p>Figure 11.1 shows how they fit together at a very high level.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-1.png" alt="Figure 11.1" style="width: 100%" width="2860" height="999">
    <figcaption>Figure 11.1</figcaption>
  </figure>
</div>


<p>Let’s look a bit closer at each.</p>

<h5 id="leanpub-auto-the-container-network-model-cnm">The Container Network Model (CNM)</h5>

<p>Everything starts with a design.</p>

<p>The design guide for Docker networking is the CNM. It outlines the fundamental building blocks of a Docker network, and you can read the full spec here: https://github.com/docker/libnetwork/blob/master/docs/design.md</p>

<p>I recommend reading the entire spec, but at a high level, it defines three major building blocks:</p>

<ul>
  <li>Sandboxes</li>
  <li>Endpoints</li>
  <li>Networks</li>
</ul>

<p>A <em><strong>sandbox</strong></em> is an isolated network stack. It includes; Ethernet interfaces, ports, routing tables, and DNS config.</p>

<p><em><strong>Endpoints</strong></em> are virtual network interfaces (E.g. <code>veth</code>). Like normal network interfaces, they’re responsible for making connections. In the case of the CNM, it’s the job of the <em>endpoint</em> to connect a <em>sandbox</em> to a <em>network</em>.</p>

<p><em><strong>Networks</strong></em> are a software implementation of an switch (802.1d bridge). As such, they group together and isolate a collection of endpoints that need to communicate.</p>

<p>Figure 11.2 shows the three components and how they connect.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-2.png" alt="Figure 11.2 The Container Network Model (CNM)" style="width: 100%" width="1898" height="527">
    <figcaption>Figure 11.2 The Container Network Model (CNM)</figcaption>
  </figure>
</div>


<p>The atomic unit of scheduling in a Docker environment is the container, and as the name suggests, the <span class="underline">Container</span> Network Model is all about providing networking to containers. Figure 11.3 shows how CNM components relate to containers — sandboxes are placed inside of containers to provide network connectivity.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-3.png" alt="Figure 11.3" style="width: 100%" width="2207" height="758">
    <figcaption>Figure 11.3</figcaption>
  </figure>
</div>


<p>Container A has a single interface (endpoint) and is connected to Network A. Container B has two interfaces (endpoints) and is connected to Network A <strong>and</strong> Network B. The two containers will be able to communicate because they are both connected to Network A. However, the two <em>endpoints</em> in Container B cannot communicate with each other without the assistance of a layer 3 router.</p>

<p>It’s also important to understand that <em>endpoints</em> behave like regular network adapters, meaning they can only be connected to a single network. Therefore, if a container needs connecting to multiple networks, it will need multiple endpoints.</p>

<p>Figure 11.4 extends the diagram again, this time adding a Docker host. Although Container A and Container B are running on the same host, their network stacks are completely isolated at the OS-level via the sandboxes.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-4.png" alt="Figure 11.4" style="width: 100%" width="1976" height="716">
    <figcaption>Figure 11.4</figcaption>
  </figure>
</div>


<h5 id="leanpub-auto-libnetwork">Libnetwork</h5>

<p>The CNM is the design doc, and <code>libnetwork</code> is the canonical implementation. It’s open-source, written in Go, cross-platform (Linux and Windows), and used by Docker.</p>

<p>In the early days of Docker, all the networking code existed inside the daemon. This was a nightmare — the daemon became bloated, and it didn’t follow the Unix principle of building modular tools that can work on their own, but also be easily composed into other projects. As a result, it all got ripped out and refactored into an external library called <code>libnetwork</code> based on the principles of the CNM. Nowadays, all of the core Docker networking code lives in <code>libnetwork</code>.</p>

<p>As you’d expect, it implements all three of the components defined in the CNM. It also implements native <em>service discovery</em>, <em>ingress-based container load balancing</em>, and the network control plane and management plane functionality.</p>

<h5 id="leanpub-auto-drivers">Drivers</h5>

<p>If <code>libnetwork</code> implements the control plane and management plane functions, then drivers implement the data plane. For example, connectivity and isolation is all handled by drivers. So is the actual creation of networks. The relationship is shown in Figure 11.5.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-5.png" alt="Figure 11.5" style="width: 100%" width="2257" height="972">
    <figcaption>Figure 11.5</figcaption>
  </figure>
</div>


<p>Docker ships with several built-in drivers, known as native drivers or <em>local drivers</em>. On Linux they include; <code>bridge</code>, <code>overlay</code>, and <code>macvlan</code>. On Windows they include; <code>nat</code>, <code>overlay</code>, <code>transparent</code>, and <code>l2bridge</code>. We’ll see how to use some of them later in the chapter.</p>

<p>3rd-parties can also write Docker network drivers known as <em>remote drivers</em> or plugins. Weave Net is a popular example and can be downloaded from Docker Hub.</p>

<p>Each driver is in charge of the actual creation and management of all resources on the networks it is responsible for. For example, an overlay network called “prod-fe-cuda” will be owned and managed by the <code>overlay</code> driver. This means the <code>overlay</code> driver will be invoked for the creation, management, and deletion of all resources on that network.</p>

<p>In order to meet the demands of complex highly-fluid environments, <code>libnetwork</code> allows multiple network drivers to be active at the same time. This means your Docker environment can sport a wide range of heterogeneous networks.</p>

<h4 id="leanpub-auto-single-host-bridge-networks">Single-host bridge networks</h4>

<p>The simplest type of Docker network is the single-host bridge network.</p>

<p>The name tells us two things:</p>

<ul>
  <li>
<strong>Single-host</strong> tells us it only exists on a single Docker host and can only connect containers that are on the same host.</li>
  <li>
<strong>Bridge</strong> tells us that it’s an implementation of an 802.1d bridge (layer 2 switch).</li>
</ul>

<p>Docker on Linux creates single-host bridge networks with the built-in <code>bridge</code> driver, whereas Docker on Windows creates them using the built-in <code>nat</code> driver. For all intents and purposes, they work the same.</p>

<p>Figure 11.6 shows two Docker hosts with identical local bridge networks called “mynet”. Even though the networks are identical, they are independent isolated networks. This means the containers in the picture cannot communicate directly because they are on different networks.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-6.png" alt="Figure 11.6" style="width: 100%" width="2593" height="847">
    <figcaption>Figure 11.6</figcaption>
  </figure>
</div>


<p>Every Docker host gets a default single-host bridge network. On Linux it’s called “bridge”, and on Windows it’s called “nat” (yes, those are the same names as the drivers used to create them). By default, this is the network that all new containers will be connected to unless you override it on the command line with the <code>--network</code> flag.</p>

<p>The following listing shows the output of a <code>docker network ls</code> command on newly installed Linux and Windows Docker hosts. The output is trimmed so that it only shows the default network on each host. Notice how the name of the network is the same as the driver that was used to create it — this is a coincidence and not a requirement.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>//Linux
$ docker network ls
NETWORK ID        NAME        DRIVER        SCOPE
333e184cd343      bridge      bridge        local

//Windows
&gt; docker network ls
NETWORK ID        NAME        DRIVER        SCOPE
095d4090fa32      nat         nat           local
</pre></div>

</figure>

<p>The <code>docker network inspect</code> command is a treasure trove of great information. I highly recommended reading through its output if you’re interested in low-level detail.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>docker network inspect bridge
[
    {
        "Name": "bridge",     &lt;&lt; Will be nat on Windows
        "Id": "333e184...d9e55",
        "Created": "2018-01-15T20:43:02.566345779Z",
        "Scope": "local",
        "Driver": "bridge",   &lt;&lt; Will be nat on Windows
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        &lt;Snip&gt;
    }
]
</pre></div>

</figure>

<p>Docker networks built with the <code>bridge</code> driver on Linux hosts are based on the battle-hardened <em>linux bridge</em> technology that has existed in the Linux kernel for nearly 20 years. This means they’re high performance and extremely stable. It also means you can inspect them using standard Linux utilities. For example.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ ip link show docker0
3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc...
    link/ether 02:42:af:f9:eb:4f brd ff:ff:ff:ff:ff:ff
</pre></div>

</figure>

<p>The default “bridge” network, on all Linux-based Docker hosts, maps to an underlying <em>Linux bridge</em> in the kernel called “<strong>docker0</strong>”. We can see this from the output of <code>docker network inspect</code>.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ docker network inspect bridge | grep bridge.name
"com.docker.network.bridge.name": "docker0",
</pre></div>

</figure>

<p>The relationship between Docker’s default “bridge” network and the “docker0” bridge in the Linux kernel is shown in Figure 11.7.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-7.png" alt="Figure 11.7" style="width: 100%" width="2258" height="458">
    <figcaption>Figure 11.7</figcaption>
  </figure>
</div>


<p>Figure 11.8 extends the diagram by adding containers at the top that plug into the “bridge” network. The “bridge” network maps to the “docker0” Linux bridge in the host’s kernel, which can be mapped back to an Ethernet interface on the host via port mappings.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-8.png" alt="Figure 11.8" style="width: 100%" width="2192" height="1030">
    <figcaption>Figure 11.8</figcaption>
  </figure>
</div>


<p>Let’s use the <code>docker network create</code> command to create a new single-host bridge network called “localnet”.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>//Linux
$ docker network create -d bridge localnet

//Windows
&gt; docker network create -d nat localnet
</pre></div>

</figure>

<p>The new network is created and will appear in the output of any future <code>docker network ls</code> commands. If you are using Linux, you will also have a new <em>Linux bridge</em> created in the kernel.</p>

<p>Let’s use the Linux <code>brctl</code> tool to look at the Linux bridges currently on the system. You may have to manually install the <code>brctl</code> binary using <code>apt-get install bridge-utils</code>, or the equivalent for your Linux distro.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ brctl show
bridge name       bridge id             STP enabled    interfaces
docker0           8000.0242aff9eb4f     no
br-20c2e8ae4bbb   8000.02429636237c     no
</pre></div>

</figure>

<p>The output shows two bridges. The first line is the “docker0” bridge that we already know about. This relates to the default “bridge” network in Docker. The second bridge (br-20c2e8ae4bbb) relates to the new <code>localnet</code> Docker bridge network. Neither of them have spanning tree enabled, and neither have any devices connected (<code>interfaces</code> column).</p>

<p>At this point, the bridge configuration on the host looks like Figure 11.9.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-9.png" alt="Figure 11.9" style="width: 100%" width="2258" height="458">
    <figcaption>Figure 11.9</figcaption>
  </figure>
</div>


<p>Let’s create a new container and attach it to the new <code>localnet</code> bridge network. If you’re following along on Windows, you should substitute “<code>alpine sleep 1d</code>” with “<code>mcr.microsoft.com/powershell:nanoserver pwsh.exe -Command Start-Sleep 86400</code>”.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ docker container run -d --name c1 \
  --network localnet \
  alpine sleep 1d
</pre></div>

</figure>

<p>This container will now be on the <code>localnet</code> network. You can confirm this with a <code>docker network inspect</code>.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ docker network inspect localnet --format '{{json .Containers}}'
{
  "4edcbd...842c3aa": {
    "Name": "c1",
    "EndpointID": "43a13b...3219b8c13",
    "MacAddress": "02:42:ac:14:00:02",
    "IPv4Address": "172.20.0.2/16",
    "IPv6Address": ""
    }
},
</pre></div>

</figure>

<p>The output shows that the new “c1” container is on the <code>localnet</code> bridge/nat network.</p>

<p>It you run the Linux <code>brctl show</code> command again, you’ll see c1’s interface attached to the <code>br-20c2e8ae4bbb</code> bridge.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ brctl show
bridge name       bridge id           STP enabled     interfaces
br-20c2e8ae4bbb   8000.02429636237c   no              vethe792ac0
docker0           8000.0242aff9eb4f   no
</pre></div>

</figure>

<p>This is shown in Figure 11.10.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-10.png" alt="Figure 11.10" style="width: 100%" width="2451" height="709">
    <figcaption>Figure 11.10</figcaption>
  </figure>
</div>


<p>If we add another new container to the same network, it should be able to ping the “c1” container by name. This is because all new containers are automatically registered with the embedded Docker DNS service, enabling them to resolve the names of all other containers on the same network.</p>

<blockquote>
  <p><strong>Beware:</strong> The default <code>bridge</code> network on Linux does not support name resolution via the Docker DNS service. All other <em>user-defined</em> bridge networks do. The following demo will work because the container is on the user-defined <code>localnet</code> network.</p>
</blockquote>

<p>Let’s test it.</p>

<ol class="numeric">
  <li>Create a new interactive container called “c2” and put it on the same <code>localnet</code> network as “c1”.
    <figure class="code" dir="ltr">
<div class="highlight"><pre><code></code> //Linux
 $ docker container run -it --name c2 \
   --network localnet \
   alpine sh

 //Windows
 &gt; docker container run -it --name c2 `
   --network localnet `
   mcr.microsoft.com/powershell:nanoserver
</pre></div>

    </figure>

    <p>Your terminal will switch into the “c2” container.</p>
  </li>
  <li>From within the “c2” container, ping the “c1” container by name.
    <figure class="code" dir="ltr">
<div class="highlight"><pre><code></code> &gt; ping c1
 Pinging c1 [172.26.137.130] with 32 bytes of data:
 Reply from 172.26.137.130: bytes=32 time=1ms TTL=128
 Reply from 172.26.137.130: bytes=32 time=1ms TTL=128
 Control-C
</pre></div>

    </figure>

    <p>It works! This is because the c2 container is running a local DNS resolver that forwards requests to an internal Docker DNS server. This DNS server maintains mappings for all containers started with the <code>--name</code> or <code>--net-alias</code> flag.</p>
  </li>
</ol>

<p>Try running some network-related commands while you’re still logged on to the container. It’s a great way of learning more about how Docker container networking works. The following snippet shows the <code>ipconfig</code> command ran from inside the “c2” Windows container previously created. You can <code>Ctrl+P+Q</code> out of the container and run another <code>docker network inspect localnet</code> command to match the IP addresses.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>PS C:\&gt; ipconfig
Windows IP Configuration
Ethernet adapter Ethernet:
   Connection-specific DNS Suffix  . :
   Link-local IPv6 Address . . . . . : fe80::14d1:10c8:f3dc:2eb3%4
   IPv4 Address. . . . . . . . . . . : 172.26.135.0
   Subnet Mask . . . . . . . . . . . : 255.255.240.0
   Default Gateway . . . . . . . . . : 172.26.128.1
</pre></div>

</figure>

<p>So far, we’ve said that containers on bridge networks can only communicate with other containers on the same network. However, you can get around this using <em>port mappings</em>.</p>

<p>Port mappings let you map a container to a port on the Docker host. Any traffic hitting the Docker host on the configured port will be directed to the container. The high-level flow is shown in Figure 11.11</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-11.png" alt="Figure 11.11" style="width: 100%" width="1834" height="1011">
    <figcaption>Figure 11.11</figcaption>
  </figure>
</div>


<p>In the diagram, the application running in the container is operating on port <code>80</code>. This is mapped to port <code>5000</code> on the host’s <code>10.0.0.15</code> interface. The end result is all traffic hitting the host on <code>10.0.0.15:5000</code> being redirected to the container on port 80.</p>

<p>Let’s walk through an example of mapping port 80 on a container running a web server, to port 5000 on the Docker host. The example will use NGINX on Linux. If you’re following along on Windows, you’ll need to substitute <code>nginx</code> with a Windows-based web server image such as <code>mcr.microsoft.com/windows/servercore/iis:nanoserver</code>.</p>

<ol class="numeric">
  <li>Run a new web server container and map port 80 on the container to port 5000 on the Docker host.
    <figure class="code" dir="ltr">
<div class="highlight"><pre><code></code> $ docker container run -d --name web \
   --network localnet \
   --publish 5000:80 \
   nginx
</pre></div>

    </figure>
  </li>
  <li>Verify the port mapping.
    <figure class="code" dir="ltr">
<div class="highlight"><pre><code></code> $ docker port web
 80/tcp -&gt; 0.0.0.0:5000
</pre></div>

    </figure>

    <p>This shows that port 80 in the container is mapped to port 5000 on all interfaces on the Docker host.</p>
  </li>
  <li>Test the configuration by pointing a web browser to port 5000 on the Docker host. To complete this step, you’ll need to know the IP or DNS name of your Docker host. If you’re using Docker Desktop on Mac or Windows, you’ll be able to use <code>localhost:5000</code> or <code>127.0.0.1:5000</code>.

<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-12.png" alt="Figure 11.12" style="width: 100%" width="3549" height="1464">
    <figcaption>Figure 11.12</figcaption>
  </figure>
</div>


    <p>Any external system can now access the NGINX container running on the <code>localnet</code> bridge network via a port mapping to TCP port 5000 on the Docker host.</p>
  </li>
</ol>

<p>Mapping ports like this works, but it’s clunky and doesn’t scale. For example, only a single container can bind to any port on the host. This means no other containers on that host will be able to bind to port <code>5000</code>. This is one of the reason’s that single-host bridge networks are only useful for local development and very small applications.</p>

<h4 id="leanpub-auto-multi-host-overlay-networks">Multi-host overlay networks</h4>

<p>We’ve got an entire chapter dedicated to multi-host overlay networks. So we’ll keep this section short.</p>

<p>Overlay networks are multi-host. They allow a single network to span multiple hosts so that containers on different hosts can communicate directly. They’re ideal for container-to-container communication, including container-only applications, and they scale well.</p>

<p>Docker provides a native driver for overlay networks. This makes creating them as simple as adding the <code>--d overlay</code> flag to the <code>docker network create</code> command.</p>

<h4 id="leanpub-auto-connecting-to-existing-networks">Connecting to existing networks</h4>

<p>The ability to connect containerized apps to external systems and physical networks is vital. A common example is a partially containerized app — the containerized parts need a way to communicate with the non-containerized parts still running on existing physical networks and VLANs.</p>

<p>The built-in <code>MACVLAN</code> driver (<code>transparent</code> on Windows) was created with this in mind. It makes containers first-class citizens on the existing physical networks by giving each one its own MAC address and IP addresses. We show this in Figure 11.13.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-13.png" alt="Figure 11.13" style="width: 100%" width="2710" height="684">
    <figcaption>Figure 11.13</figcaption>
  </figure>
</div>


<p>On the positive side, MACVLAN performance is good as it doesn’t require port mappings or additional bridges — you connect the container interface through to the hosts interface (or a sub-interface). However, on the negative side, it requires the host NIC to be in <strong>promiscuous mode</strong>, which isn’t always allowed on corporate networks and public cloud platforms. So MACVLAN is great for your corporate data center networks (assuming your network team can accommodate promiscuous mode), but it might not work in the public cloud.</p>

<p>Let’s dig a bit deeper with the help of some pictures and a hypothetical example.</p>

<p>Assume we have an existing physical network with two VLANS:</p>

<ul>
  <li>VLAN 100: 10.0.0.0/24</li>
  <li>VLAN 200: 192.168.3.0/24</li>
</ul>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-14.png" alt="Figure 11.14" style="width: 100%" width="2254" height="308">
    <figcaption>Figure 11.14</figcaption>
  </figure>
</div>


<p>Next, we add a Docker host and connect it to the network.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-15.png" alt="Figure 11.15" style="width: 100%" width="2254" height="846">
    <figcaption>Figure 11.15</figcaption>
  </figure>
</div>


<p>We then have a requirement for a container running on that host to be plumbed into VLAN 100. To do this, we create a new Docker network with the <code>macvlan</code> driver. However, the <code>macvlan</code> driver needs us to tell it a few things about the network we’re going to associate it with. Things like:</p>

<ul>
  <li>Subnet info</li>
  <li>Gateway</li>
  <li>Range of IP’s it can assign to containers</li>
  <li>Which interface or sub-interface on the host to use</li>
</ul>

<p>The following command will create a new MACVLAN network called “macvlan100” that will connect containers to VLAN 100.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ docker network create -d macvlan \
  --subnet=10.0.0.0/24 \
  --ip-range=10.0.0.0/25 \
  --gateway=10.0.0.1 \
  -o parent=eth0.100 \
  macvlan100
</pre></div>

</figure>

<p>This will create the “macvlan100” network and the eth0.100 sub-interface. The config now looks like this.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-16.png" alt="Figure 11.16" style="width: 100%" width="2254" height="1331">
    <figcaption>Figure 11.16</figcaption>
  </figure>
</div>


<p>MACVLAN uses standard Linux sub-interfaces, and you have to tag them with the ID of the VLAN they will connect to. In this example we’re connecting to VLAN 100, so we tag the sub-interface with <code>.100</code> (<code>etho.100</code>).</p>

<p>We also used the <code>--ip-range</code> flag to tell the MACVLAN network which sub-set of IP addresses it can assign to containers. It’s vital that this range of addresses be reserved for Docker and not in use by other nodes or DHCP servers, as there is no management plane feature to check for overlapping IP ranges.</p>

<p>The <code>macvlan100</code> network is ready for containers, so let’s deploy one with the following command.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ docker container run -d --name mactainer1 \
  --network macvlan100 \
  alpine sleep 1d
</pre></div>

</figure>

<p>The config now looks like Figure 11.17. But remember, the underlying network (VLAN 100) does not see any of the MACVLAN magic, it only sees the container with its MAC and IP addresses. And with that in mind, the “mactainer1” container will be able to ping and communicate with any other systems on VLAN 100. Pretty sweet!</p>

<blockquote>
  <p><strong>Note:</strong> If you can’t get this to work, it might be because the host NIC is not in promiscuous mode. Remember that public cloud platforms don’t usually allow promiscuous mode.</p>
</blockquote>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-17.png" alt="Figure 11.17" style="width: 100%" width="2254" height="1331">
    <figcaption>Figure 11.17</figcaption>
  </figure>
</div>


<p>At this point, we’ve got a MACVLAN network and used it to connect a new container to an existing VLAN. However, it doesn’t stop there. The Docker MACVLAN driver is built on top of the tried-and-tested Linux kernel driver with the same name. As such, it supports VLAN trunking. This means we can create multiple MACVLAN networks and connect containers on the same Docker host to them as shown in Figure 11.18.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-18.png" alt="Figure 11.18" style="width: 100%" width="2254" height="1331">
    <figcaption>Figure 11.18</figcaption>
  </figure>
</div>


<p>That pretty much covers MACVLAN. Windows offers a similar solution with the <code>transparent</code> driver.</p>

<h5 id="leanpub-auto-container-and-service-logs-for-troubleshooting">Container and Service logs for troubleshooting</h5>

<p>A quick note on troubleshooting connectivity issues before moving on to Service Discovery.</p>

<p>If you think you’re experiencing connectivity issues between containers, it’s worth checking the Docker daemon logs as well as container logs.</p>

<p>On Windows systems, the daemon logs are stored under <code>~AppData\Local\Docker</code>, and you can view them in the Windows Event Viewer. On Linux, it depends what <code>init</code> system you’re using. If you’re running a <code>systemd</code>, the logs will go to <code>journald</code> and you can view them with the <code>journalctl -u docker.service</code> command. If you’re not running <code>systemd</code> you should look under the following locations:</p>

<ul>
  <li>Ubuntu systems running <code>upstart</code>: <code>/var/log/upstart/docker.log</code>
</li>
  <li>RHEL-based systems: <code>/var/log/messages</code>
</li>
  <li>Debian: <code>/var/log/daemon.log</code>
</li>
</ul>

<p>You can also tell Docker how verbose you want daemon logging to be. To do this, edit the daemon config file (<code>daemon.json</code>) so that “<code>debug</code>” is set to “<code>true</code>” and “<code>log-level</code>” is set to one of the following:</p>

<ul>
  <li>
<code>debug</code> The most verbose option</li>
  <li>
<code>info</code> The default value and second-most verbose option</li>
  <li>
<code>warn</code> Third most verbose option</li>
  <li>
<code>error</code> Fourth most verbose option</li>
  <li>
<code>fatal</code> Least verbose option</li>
</ul>

<p>The following snippet from a <code>daemon.json</code> enables debugging and sets the level to <code>debug</code>. It will work on all Docker platforms.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>{
  &lt;Snip&gt;
  "debug":true,
  "log-level":"debug",
  &lt;Snip&gt;
}
</pre></div>

</figure>

<p>Be sure to restart Docker after making changes to the file.</p>

<p>That was the daemon logs. What about container logs?</p>

<p>Logs from standalone containers can be viewed with the <code>docker container logs</code> command, and Swarm service logs can be viewed with the <code>docker service logs</code> command. However, Docker supports lots of logging drivers, and they don’t all work with the <code>docker logs</code> command.</p>

<p>As well as a driver and configuration for daemon logs, every Docker host has a default logging driver and configuration for containers. Some of the drivers include:</p>

<ul>
  <li>
<code>json-file</code> (default)</li>
  <li>
<code>journald</code> (only works on Linux hosts running <code>systemd</code>)</li>
  <li><code>syslog</code></li>
  <li><code>splunk</code></li>
  <li><code>gelf</code></li>
</ul>

<p><code>json-file</code> and <code>journald</code> are probably the easiest to configure, and they both work with the <code>docker logs</code> and <code>docker service logs</code> commands. The format of the commands is <code>docker logs &lt;container-name&gt;</code> and <code>docker service logs &lt;service-name&gt;</code>.</p>

<p>If you’re using other logging drivers you can view logs using the 3-rd party platform’s native tools.</p>

<p>The following snippet from a <code>daemon.json</code> shows a Docker host configured to use <code>syslog</code>.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>{
  "log-driver": "syslog"
}
</pre></div>

</figure>

<p>You can configure an individual container, or service, to start with a particular logging driver with the <code>--log-driver</code> and <code>--log-opts</code> flags. These will override anything set in <code>daemon.json</code>.</p>

<p>Container logs work on the premise that your application is running as PID 1 inside the container and sending logs to <code>STDOUT</code>, and errors to <code>STDERR</code>. The logging driver then forwards these “logs” to the locations configured via the logging driver.</p>

<p>If your application logs to a file, it’s possible to use a symlink to redirect log-file writes to STDOUT and STDERR.</p>

<p>The following is an example of running the <code>docker logs</code> command against a container called “vantage-db” configured to use the <code>json-file</code> logging driver.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ docker logs vantage-db
1:C 2 Feb 09:53:22.903 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
1:C 2 Feb 09:53:22.904 # Redis version=4.0.6, bits=64, commit=00000000, modified=0, pid=1
1:C 2 Feb 09:53:22.904 # Warning: no config file specified, using the default config.
1:M 2 Feb 09:53:22.906 * Running mode=standalone, port=6379.
1:M 2 Feb 09:53:22.906 # WARNING: The TCP backlog setting of 511 cannot be enforced because...
1:M 2 Feb 09:53:22.906 # Server initialized
1:M 2 Feb 09:53:22.906 # WARNING overcommit_memory is set to 0!
</pre></div>

</figure>

<p>There’s a good chance you’ll find network connectivity errors reported in the daemon logs or container logs.</p>

<h4 id="leanpub-auto-service-discovery">Service discovery</h4>

<p>As well as core networking, <code>libnetwork</code> also provides some important network services.</p>

<p><em>Service discovery</em> allows all containers and Swarm services to locate each other by name. The only requirement is that they be on the same network.</p>

<p>Under the hood, this leverages Docker’s embedded DNS server and the DNS resolver in each container. Figure 11.19 shows container “c1” pinging container “c2” by name. The same principle applies to Swarm Services.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-19.png" alt="Figure 11.19" style="width: 100%" width="2633" height="663">
    <figcaption>Figure 11.19</figcaption>
  </figure>
</div>


<p>Let’s step through the process.</p>

<ul>
  <li>
<strong>Step 1:</strong> The <code>ping c2</code> command invokes the local DNS resolver to resolve the name “c2” to an IP address. All Docker containers have a local DNS resolver.</li>
  <li>
<strong>Step 2:</strong> If the local resolver doesn’t have an IP address for “c2” in its local cache, it initiates a recursive query to the Docker DNS server. The local resolver is pre-configured to know how to reach the Docker DNS server.</li>
  <li>
<strong>Step 3:</strong> The Docker DNS server holds name-to-IP mappings for all containers created with the <code>--name</code> or <code>--net-alias</code> flags. This means it knows the IP address of container “c2”.</li>
  <li>
<strong>Step 4:</strong> The DNS server returns the IP address of “c2” to the local resolver in “c1”. It does this because the two containers are on the same network — if they were on different networks this would not work.</li>
  <li>
<strong>Step 5:</strong> The <code>ping</code> command issues the ICMP echo request packets to the IP address of “c2”.</li>
</ul>

<p>Every Swarm service and standalone container started with the <code>--name</code> flag will register its name and IP with the Docker DNS service. This means all containers and service replicas can use the Docker DNS service to find each other.</p>

<p>However, service discovery is <em>network-scoped</em>. This means that name resolution only works for containers and Services on the same network. If two containers are on different networks, they will not be able to resolve each other.</p>

<p>One last point on service discovery and name resolution…</p>

<p>It’s possible to configure Swarm services and standalone containers with customized DNS options. For example, the <code>--dns</code> flag lets you specify a list of custom DNS servers to use in case the embedded Docker DNS server cannot resolve a query. This is common when querying names of services outside of Docker. You can also use the <code>--dns-search</code> flag to add custom search domains for queries against unqualified names (i.e. when the query is not a fully qualified domain name).</p>

<p>On Linux, these all work by adding entries to the <code>/etc/resolv.conf</code> file inside every container.</p>

<p>The following example will start a new standalone container and add the infamous <code>8.8.8.8</code> Google DNS server, as well as <code>nigelpoulton.com</code> as search domain to append to unqualified queries.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ docker container run -it --name c1 \
  --dns=8.8.8.8 \
  --dns-search=nigelpoulton.com \
  alpine sh
</pre></div>

</figure>

<h4 id="leanpub-auto-ingress-load-balancing">Ingress load balancing</h4>

<p>Swarm supports two publishing modes that make services accessible outside of the cluster:</p>

<ul>
  <li>Ingress mode (default)</li>
  <li>Host mode</li>
</ul>

<p>Services published via <em>ingress mode</em> can be accessed from any node in the Swarm — even nodes <strong>not</strong> running a service replica. Services published via <em>host mode</em> can only be accessed by hitting nodes running service replicas. Figure 11.20 shows the difference between the two modes.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-20.png" alt="Figure 11.20" style="width: 100%" width="2026" height="1272">
    <figcaption>Figure 11.20</figcaption>
  </figure>
</div>


<p>Ingress mode is the default. This means any time you publish a service with <code>-p</code> or <code>--publish</code> it will default to <em>ingress mode</em>. To publish a service in <em>host mode</em> you need to use the long format of the <code>--publish</code> flag <strong>and</strong> add <code>mode=host</code>. Let’s see an example using <em>host mode</em>.</p>

<figure class="code" dir="ltr">
<div class="highlight"><pre><code></code>$ docker service create -d --name svc1 \
  --publish published=5000,target=80,mode=host \
  nginx
</pre></div>

</figure>

<p>A few notes about the command. <code>docker service create</code> lets you publish a service using either a <em>long form syntax</em> or <em>short form syntax</em>. The short form looks like this: <code>-p 5000:80</code> and we’ve seen it a few times already. However, you cannot publish a service in <em>host mode</em> using short form.</p>

<p>The long form looks like this: <code>--publish published=5000,target=80,mode=host</code>. It’s a comma-separate list with no whitespace after each comma. The options work as follows:</p>

<ul>
  <li>
<code>published=5000</code> makes the service available externally via port 5000</li>
  <li>
<code>target=80</code> makes sure that external requests to the <code>published</code> port get mapped back to port 80 on the service replicas</li>
  <li>
<code>mode=host</code> makes sure that external requests will only reach the service if they come in via nodes running a service replica.</li>
</ul>

<p>Ingress mode is what you’ll normally use.</p>

<p>Behind the scenes, <em>ingress mode</em> uses a layer 4 routing mesh called the <strong>Service Mesh</strong> or the <strong>Swarm Mode Service Mesh</strong>. Figure 11.21 shows the basic traffic flow of an external request to a service exposed in ingress mode.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-21.png" alt="Figure 11.21" style="width: 100%" width="2772" height="1233">
    <figcaption>Figure 11.21</figcaption>
  </figure>
</div>


<p>Let’s quickly walk through the diagram.</p>

<ol class="numeric">
  <li>The command at the top deploys a new Swarm service called “svc1”. It’s attaching the service to the <code>overnet</code> network and publishing it on port 5000.</li>
  <li>Publishing a Swarm service like this (<code>--publish published=5000,target=80</code>) will publish it on port 5000 on the ingress network. As all nodes in a Swarm are attached to the ingress network, this means the port is published <em>swarm-wide</em>.</li>
  <li>Logic is implemented on the cluster ensuring that any traffic hitting the ingress network, via <strong>any node</strong>, on port 5000 will be routed to the “svc1” service on port 80.</li>
  <li>At this point, a single replica for the “svc1” service is deployed, and the cluster has a mapping rule that says “<em>all traffic hitting the ingress network on port 5000 needs routing to a node running a replica for the “svc1” service</em>”.</li>
  <li>The red line shows traffic hitting <code>node1</code> on port 5000 and being routed to the service replica running on node2 via the ingress network.</li>
</ol>

<p>It’s vital to know that the incoming traffic could have hit any of the four Swarm nodes on port 5000 and we would get the same result. This is because the service is published <em>swarm-wide</em> via the ingress network.</p>

<p>It’s also vital to know that if there were multiple replicas running, as shown in Figure 11.22, the traffic would be balanced across all replicas.</p>


<div class="figure-wrapper center">
  <figure class="image" style="width: 396px">
    <img src="/library/view/docker-deep-dive/9781800565135/images/figure11-22.png" alt="Figure 11.22" style="width: 100%" width="2772" height="1116">
    <figcaption>Figure 11.22</figcaption>
  </figure>
</div>


<h3 id="leanpub-auto-docker-networking---the-commands">Docker Networking - The Commands</h3>

<p>Docker networking has its own <code>docker network</code> sub-command. The main commands include:</p>

<ul>
  <li>
<code>docker network ls</code>: Lists all networks on the local Docker host.</li>
  <li>
<code>docker network create</code>: Creates new Docker networks. By default, it creates them with the <code>nat</code> driver on Windows and the <code>bridge</code> driver on Linux. You can specify the driver (type of network) with the <code>-d</code> flag. <code>docker network create -d overlay overnet</code> will create a new overlay network called overnet with the native Docker <code>overlay</code> driver.</li>
  <li>
<code>docker network inspect</code>: Provides detailed configuration information about a Docker network.</li>
  <li>
<code>docker network prune</code>: Deletes all unused networks on a Docker host.</li>
  <li>
<code>docker network rm</code>: Deletes specific networks on a Docker host.</li>
</ul>

<h3 id="leanpub-auto-chapter-summary-10">Chapter Summary</h3>

<p>The Container Network Model (CNM) is the master design document for Docker networking and defines the three major constructs that are used to build Docker networks — <em>sandboxes</em>, <em>endpoints</em>, and <em>networks</em>.</p>

<p><code>libnetwork</code> is the open-source library, written in Go, that implements the CNM. It’s used by Docker and is where all of the core Docker networking code lives. It also provides Docker’s network control plane and management plane.</p>

<p>Drivers extend the Docker network stack (<code>libnetwork</code>) by adding code to implement specific network types, such as bridge networks and overlay networks. Docker ships with several built-in drivers, but you can also use 3rd-party drivers.</p>

<p>Single-host bridge networks are the most basic type of Docker network and are suitable for local development and very small applications. They do not scale, and they require port mappings if you want to publish your services outside of the network. Docker on Linux implements bridge networks using the built-in <code>bridge</code> driver, whereas Docker on Windows implements them using the built-in <code>nat</code> driver.</p>

<p>Overlay networks are all the rage and are excellent container-only multi-host networks. We’ll talk about them in-depth in the next chapter.</p>

<p>The <code>macvlan</code> driver (<code>transparent</code> on Windows) allows you to connect containers to existing physical networks and VLANs. They make containers first-class citizens by giving them their own MAC and IP addresses. Unfortunately, they require promiscuous mode on the host NIC, meaning they won’t work in the public cloud.</p>

<p>Docker also uses <code>libnetwork</code> to implement basic service discovery, as well as a service mesh for container-based load balancing of ingress traffic.</p>



</div>
</div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="/library/view/docker-deep-dive/9781800565135/chap12.xhtml" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">10: Docker Swarm</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="/library/view/docker-deep-dive/9781800565135/chap14.xhtml" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">12: Docker overlay networking</div>
        </a>
    
  
  </div>


        
    </section>
  </div>
<section class="sbo-saved-archives"></section>



          
          
  




    
    



        
      </div>
      
        

<footer class="pagefoot t-pagefoot">
  <a href="#" class="icon-up" onclick="window.Appcues.track('JumpTop_HeronBook')"><div class="visuallyhidden">Back to top</div></a>
  <ul class='js-footer-nav'>
  
    
    <li><a href="/public/support/">Support</a></li>
    
    <li><a href="/accounts/logout/">Sign Out</a></li>
    
  
  
  </ul>
  <span class="copyright">&#169; 2020 <a href="/" target="_blank">O'Reilly Media, Inc</a>.</span>
  
    
    <a href="https://www.oreilly.com/terms/">Terms of Service</a> 
     / 
    
    <a href="/privacy">Privacy Policy</a> 
    
    
  
</footer>

      
    
    <script src="/jsi18n/web/" charset="utf-8"></script>
    <script src="/library/jsi18n/appcache/" charset="utf-8"></script>
  </body>
</html>
