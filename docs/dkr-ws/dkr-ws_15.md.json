["```\npackage docker.authz \nallow {\n    input.Method = \"GET\"\n}\n```", "```\nmkdir -p /etc/docker/policies\ntouch /etc/docker/policies/authz.rego\nls /etc/docker/policies\n```", "```\nauthz.rego\n```", "```\npackage docker.authz \nallow {\n    input.Method = \"GET\"\n}\n```", "```\ncat > /etc/docker/policies/authz.rego << EOF\npackage docker.authz \nallow {\n    input.Method = \"GET\"\n}\nEOF\ncat /etc/docker/policies/authz.rego\n```", "```\ndocker plugin install --alias opa-docker-authz:readonly \\\nopenpolicyagent/opa-docker-authz-v2:0.5 \\\nopa-args=\"-policy-file /opa/policies/authz.rego\"\n```", "```\ndocker plugin ls\n```", "```\n{\n    \"authorization-plugins\": [\"opa-docker-authz:readonly\"]\n}\n```", "```\nsudo kill -HUP $(pidof dockerd)\n```", "```\ndocker ps\n```", "```\nCONTAINER ID  IMAGE  COMMAND  CREATED  STATUS  PORTS  NAMES\n```", "```\ndocker run ubuntu\n```", "```\nError response from daemon: authorization denied by plugin \nopa-docker-authz:readonly: request rejected by administrative policy.\nSee 'docker run –-help'.\n```", "```\njournalctl -u docker | grep plugin | grep \"OPA policy decision\"\n```", "```\ncat > /etc/docker/daemon.json << EOF\n{}\nEOF\ncat /etc/docker/daemon.json\nsudo kill -HUP $(pidof dockerd)\n```", "```\ndocker plugin disable opa-docker-authz:readonly \ndocker plugin rm opa-docker-authz:readonly  \n```", "```\ndocker network create --driver my-new-network-technology mynet\n```", "```\n// Driver represent the interface a driver must fulfill.\ntype Driver interface {\n     GetCapabilities() (*CapabilitiesResponse, error)\n     CreateNetwork(*CreateNetworkRequest) error\n     AllocateNetwork(*AllocateNetworkRequest)        (*AllocateNetworkResponse, error)\n     DeleteNetwork(*DeleteNetworkRequest) error\n     FreeNetwork(*FreeNetworkRequest) error\n     CreateEndpoint(*CreateEndpointRequest)        (*CreateEndpointResponse, error)\n     DeleteEndpoint(*DeleteEndpointRequest) error\n     EndpointInfo(*InfoRequest) (*InfoResponse, error)\n     Join(*JoinRequest) (*JoinResponse, error)\n     Leave(*LeaveRequest) error\n     DiscoverNew(*DiscoveryNotification) error\n     DiscoverDelete(*DiscoveryNotification) error\n     ProgramExternalConnectivity(*ProgramExternalConnectivityRequest)        error\n     RevokeExternalConnectivity(*RevokeExternalConnectivityRequest)        error\n}\n```", "```\ndocker swarm init\n```", "```\ndocker plugin install --grant-all-permissions \\\nstore/weaveworks/net-plugin:2.5.2\n```", "```\ndocker network create  \\\n--driver=store/weaveworks/net-plugin:2.5.2  \\\nweave-custom-net\n```", "```\ndocker service create --network=weave-custom-net \\\n--replicas=3 \\\n--name=workshop \\\n-p 80:80 \\\nonuryilmaz/hello-plain-text\n```", "```\nFIRST_CONTAINER=$(docker ps --format \"{{.Names}}\" |grep \"workshop.1\")\necho $FIRST_CONTAINER\nSECOND_CONTAINER=$(docker ps --format \"{{.Names}}\" |grep \"workshop.2\")\necho $SECOND_CONTAINER\nTHIRD_CONTAINER=$(docker ps --format \"{{.Names}}\" |grep \"workshop.3\")\necho $THIRD_CONTAINER\n```", "```\ndocker exec -it $FIRST_CONTAINER sh -c \"curl $SECOND_CONTAINER\" \n```", "```\ndocker exec -it $FIRST_CONTAINER sh -c \"curl $THIRD_CONTAINER\" \n```", "```\ndocker service rm workshop\ndocker network rm weave-custom-net\n```", "```\n// Driver represent the interface a driver must fulfill.\ntype Driver interface {\n     Create(*CreateRequest) error\n     List() (*ListResponse, error)\n     Get(*GetRequest) (*GetResponse, error)\n     Remove(*RemoveRequest) error\n     Path(*PathRequest) (*PathResponse, error)\n     Mount(*MountRequest) (*MountResponse, error)\n     Unmount(*UnmountRequest) error\n     Capabilities() *CapabilitiesResponse\n}\n```", "```\ndocker plugin install --grant-all-permissions vieux/sshfs\n```", "```\ndocker run -d -p 2222:22 \\\n--name volume_provider \\\nrastasheep/ubuntu-sshd:14.04\n```", "```\n87eecaca6a1ea41e682e300d077548a4f902fdda21acc218a51253a883f725d\n```", "```\ndocker volume create -d vieux/sshfs \\\n--name volume-over-ssh \\\n-o sshcmd=root@localhost:/tmp \\\n-o password=root \\\n-o port=2222\n```", "```\nvolume-over-ssh\n```", "```\ndocker run --rm -v volume-over-ssh:/data busybox \\\nsh -c \"touch /data/test.txt && echo 'Hello from Docker Workshop' >> /data/test.txt\"\n```", "```\ndocker run --rm -v volume-over-ssh:/data busybox \\\ncat /data/test.txt\n```", "```\nHello from Docker Workshop\n```", "```\ndocker volume rm volume-over-ssh\n```"]