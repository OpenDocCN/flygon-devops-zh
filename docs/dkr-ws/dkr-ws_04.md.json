["```\n# Start from latest golang parent image\nFROM golang:latest\n# Set the working directory\nWORKDIR /myapp\n# Copy source file from current directory to container\nCOPY helloworld.go .\n# Build the application\nRUN go build -o helloworld .\n# Run the application\nENTRYPOINT [\"./helloworld\"]\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello World\")\n}\n```", "```\n$ docker image build -t helloworld:v1 .\n```", "```\nREPOSITORY   TAG   IMAGE ID       CREATED          SIZE\nhelloworld   v1    23874f841e3e   10 seconds ago   805MB\n```", "```\n$ mkdir normal-build\n```", "```\n$ cd normal-build\n```", "```\n$ touch welcome.go\n```", "```\n$ vim welcome.go\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Welcome to multi-stage Docker builds\")\n}\n```", "```\n$ touch Dockerfile\n```", "```\n$ vim Dockerfile \n```", "```\nFROM golang:latest\nWORKDIR /myapp\nCOPY welcome.go .\nRUN go build -o welcome .\nENTRYPOINT [\"./welcome\"]\n```", "```\n$ docker build -t welcome:v1 .\n```", "```\n$ docker image ls\n```", "```\n# Start from latest golang parent image\nFROM golang:latest\n# Set the working directory\nWORKDIR /myapp\n# Copy source file from current directory to container\nCOPY helloworld.go .\n# Build the application\nRUN go build -o helloworld .\n# Run the application\nENTRYPOINT [\"./helloworld\"]\n```", "```\n# Start from latest alpine parent image\nFROM alpine:latest\n# Set the working directory\nWORKDIR /myapp\n# Copy helloworld app from current directory to container\nCOPY helloworld .\n# Run the application\nENTRYPOINT [\"./helloworld\"]\n```", "```\n#!/bin/sh\n# Build the builder Docker image \ndocker image build -t helloworld-build -f Dockerfile.build .\n# Create container from the build Docker image\ndocker container create --name helloworld-build-container   helloworld-build\n# Copy build artifacts from build container to the local filesystem\ndocker container cp helloworld-build-container:/myapp/helloworld .\n# Build the runtime Docker image\ndocker image build -t helloworld .\n# Remove the build Docker container\ndocker container rm -f helloworld-build-container\n# Remove the copied artifact\nrm helloworld\n```", "```\nREPOSITORY         TAG      IMAGE ID       CREATED       SIZE\nhelloworld         latest   faff247e2b35   3 hours ago   7.6MB\nhelloworld-build   latest   f8c10c5bd28d   3 hours ago   805MB\n```", "```\n$ mkdir builder-pattern\n```", "```\n$ cd builder-pattern\n```", "```\n$ touch welcome.go\n```", "```\n$ vim welcome.go\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Welcome to multi-stage Docker builds\")\n}\n```", "```\n$ touch Dockerfile.build\n```", "```\n$ vim Dockerfile.build\n```", "```\nFROM golang:latest\nWORKDIR /myapp\nCOPY welcome.go .\nRUN go build -o welcome .\nENTRYPOINT [\"./welcome\"]\n```", "```\n$ touch Dockerfile\n```", "```\n$ vim Dockerfile\n```", "```\nFROM scratch\nWORKDIR /myapp\nCOPY welcome .\nENTRYPOINT [\"./welcome\"]\n```", "```\n$ touch build.sh\n```", "```\n$ vim build.sh\n```", "```\n#!/bin/sh\necho \"Creating welcome builder image\"\ndocker image build -t welcome-builder:v1 -f Dockerfile.build .\ndocker container create --name welcome-builder-container   welcome-builder:v1\ndocker container cp welcome-builder-container:/myapp/welcome .\ndocker container rm -f welcome-builder-container\necho \"Creating welcome runtime image\"\ndocker image build -t welcome-runtime:v1 .\nrm welcome\n```", "```\n$ chmod +x build.sh\n```", "```\n$ ./build.sh\n```", "```\ndocker image ls\n```", "```\n# Start from latest golang parent image\nFROM golang:latest\n# Set the working directory\nWORKDIR /myapp\n# Copy source file from current directory to container\nCOPY helloworld.go .\n# Build the application\nRUN go build -o helloworld .\n# Start from latest alpine parent image\nFROM alpine:latest\n# Set the working directory\nWORKDIR /myapp\n# Copy helloworld app from current directory to container\nCOPY --from=0 /myapp/helloworld .\n# Run the application\nENTRYPOINT [\"./helloworld\"]\n```", "```\ndocker image build -t multi-stage:v1 .\n```", "```\nREPOSITORY    TAG      IMAGE ID       CREATED         SIZE\nmulti-stage   latest   75e1f4bcabd0   7 seconds ago   7.6MB\n```", "```\n# Start from latest golang parent image\nFROM golang:latest AS builder \n# Set the working directory\nWORKDIR /myapp\n# Copy source file from current directory to container\nCOPY helloworld.go .\n# Build the application\nRUN go build -o helloworld .\n# Start from latest alpine parent image\nFROM alpine:latest AS runtime\n# Set the working directory\nWORKDIR /myapp\n# Copy helloworld app from current directory to container\nCOPY --from=builder /myapp/helloworld .\n# Run the application\nENTRYPOINT [\"./helloworld\"]\n```", "```\nFROM golang:latest AS builder\nFROM alpine:latest AS runtime\n```", "```\nCOPY --from=builder /myapp/helloworld .\n```", "```\ndocker image build --target builder -t multi-stage-dev:v1 .\n```", "```\nmkdir multi-stage\n```", "```\ncd multi-stage\n```", "```\n$ touch welcome.go\n```", "```\n$ vim welcome.go\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Welcome to multi-stage Docker builds\")\n}\n```", "```\ntouch Dockerfile\n```", "```\nvim Dockerfile\n```", "```\nFROM golang:latest AS builder\nWORKDIR /myapp\nCOPY welcome.go .\nRUN go build -o welcome .\nFROM scratch\nWORKDIR /myapp\nCOPY --from=builder /myapp/welcome .\nENTRYPOINT [\"./welcome\"]\n```", "```\ndocker build -t welcome-optimized:v1 .\n```", "```\ndocker images\n```", "```\n$ docker run --user=9999 ubuntu:focal\n```", "```\nFROM ubuntu:focal\nRUN apt-get update \nRUN useradd demo-user\nUSER demo-user\nCMD whoami\n```", "```\nSending build context to Docker daemon  18.6MB\nStep 1/5 : FROM ubuntu:focal\n```", "```\nPASSWORDS.txt\ntmp/\n*.md\n!README.md\n```", "```\nFROM ubuntu:focal\nRUN apt-get update\nRUN apt-get install -y nginx\nRUN apt-get install -y redis-server\n```", "```\nFROM ubuntu:focal\nRUN apt-get update \\\n  && apt-get install -y nginx redis-server\n```", "```\nFROM ubuntu:focal\nRUN apt-get update \\\n  && apt-get install --no-install-recommends -y nginx \n```", "```\nFROM ubuntu:focal\nRUN apt-get update \\\n    && apt-get install --no-install-recommends -y nginx \\\n    && rm -rf /var/lib/apt/lists/*\n```", "```\npackage main\nimport (\n    \"net/http\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n)\nfunc main() {\n    http.HandleFunc(\"/\", defaultHandler)\n    http.HandleFunc(\"/contact\", contactHandler)\n    http.HandleFunc(\"/login\", loginHandler)\n    port := os.Getenv(\"PORT\")\n    if port == \"\" {\n        port = \"8080\"\n    }\n    log.Println(\"Service started on port \" + port)\n    err := http.ListenAndServe(\":\"+port, nil)\n    if err != nil {\n        log.Fatal(\"ListenAndServe: \", err)\n        return\n    }\n}\nfunc defaultHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"<h1>Home Page</h1>\")\n}\nfunc contactHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"<h1>Contact Us</h1>\")\n}\nfunc loginHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"<h1>Login Page</h1>\")\n}\n```"]