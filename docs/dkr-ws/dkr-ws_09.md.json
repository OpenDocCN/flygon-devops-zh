["```\ndocker swarm init\n```", "```\ndocker swarm join --token <swarm_token> <ip_address>:<port>\n```", "```\ndocker swarm join-token --rotate\n```", "```\ndocker node ls\n```", "```\ndocker service create --name <service> <image> <command>\n```", "```\ndocker service update <service> <changes>\n```", "```\ndocker service remove <service>\n```", "```\ndocker swarm init\n```", "```\nSwarm initialized: current node (j2qxrpf0a1yhvcax6n2ajux69) is \nnow a manager.\nTo add a worker to this swarm, run the following command:\n    docker swarm join --token SWMTKN-1-2w0fk5g2e18118zygvmvdxartd43n0ky6cmywy0ucxj8j7net1-5v1xvrt7\n1ag6ss7trl480e1k7 192.168.65.3:2377\nTo add a manager to this swarm, run 'docker swarm join-token \nmanager' and follow the instructions.\n```", "```\ndocker node ls\n```", "```\nID         HOSTNAME          STATUS    AVAILABILITY\n  MANAGER STATUS\nj2qx.. *   docker-desktop    Ready     Active\n  Leader \n```", "```\ndocker info\n```", "```\n…\nSwarm: active\n  NodeID: j2qxrpf0a1yhvcax6n2ajux69\n  Is Manager: true\n  ClusterID: pyejfsj9avjn595voauu9pqjv\n  Managers: 1\n  Nodes: 1\n  Default Address Pool: 10.0.0.0/8  \n  SubnetSize: 24\n  Data Path Port: 4789\n  Orchestration:\n   Task History Retention Limit: 5\n  Raft:\n   Snapshot Interval: 10000\n   Number of Old Snapshots to Retain: 0\n   Heartbeat Tick: 1\n   Election Tick: 10\n  Dispatcher:\n   Heartbeat Period: 5 seconds\n  CA Configuration:\n   Expiry Duration: 3 months\n   Force Rotate: 0\n```", "```\ndocker service create --replicas 2 -p 80:80 --name web nginx\n```", "```\nuws28u6yny7ltvutq38166alf\noverall progress: 2 out of 2 tasks \n1/2: running   [==========================================>] \n2/2: running   [==========================================>] \nverify: Service converged\n```", "```\ndocker service ls\n```", "```\nID              NAME  MODE          REPLICAS   IMAGE\n  PORTS\nuws28u6yny7l    web   replicated    2/2        nginx:latest\n  *:80->80/tcp\n```", "```\ndocker service ps web\n```", "```\nID     NAME    IMAGE    NODE               DESIRED\n  CURRENT STATE\nviyz   web.1   nginx    docker-desktop     Running\n  Running about a minute ago\nmr4u   web.2   nginx    docker-desktop     Running\n  Running about a minute ago\n```", "```\ndocker service scale web=3\n```", "```\nweb scaled to 3\noverall progress: 3 out of 3 tasks \n1/3: running   [==========================================>]\n2/3: running   [==========================================>]\n3/3: running   [==========================================>]\nverify: Service converged\n```", "```\ndocker service ls\n```", "```\nID              NAME    MODE          REPLICAS   IMAGE\n    PORTS\nuws28u6yny7l    web     replicated    3/3        nginx:latest\n    *:80->80/tcp\n```", "```\ndocker node update --availability drain j2qxrpf0a1yhvcax6n2ajux69\n```", "```\ndocker service ps web\n```", "```\nNAME         IMAGE            CURRENT STATE\n  ERROR\nweb.1        nginx:latest     Pending 2 minutes ago\n  \"no suitable node (1 node…\"\n\\_ web.1     nginx:latest     Shutdown 2 minutes ago\nweb.2        nginx:latest     Pending 2 minutes ago\n  \"no suitable node (1 node…\"\n\\_ web.2     nginx:latest     Shutdown 2 minutes ago\nweb.3        nginx:latest     Pending 2 minutes ago\n  \"no suitable node (1 node…\"\n\\_ web.3     nginx:latest     Shutdown 2 minutes ago\n```", "```\ndocker node ls\n```", "```\nID         HOSTNAME          STATUS    AVAILABILITY\n  MANAGER STATUS\nj2qx.. *   docker-desktop    Ready     Drain\n  Leader \n```", "```\ndocker service rm web\n```", "```\nweb\n```", "```\ndocker node update --availability active j2qxrpf0a1yhvcax6n2ajux69\n```", "```\ndocker node ls\n```", "```\nID         HOSTNAME          STATUS    AVAILABILITY\n  MANAGER STATUS\nj2qx.. *   docker-desktop    Ready     Active\n  Leader \n```", "```\ndocker node inspect j2qxrpf0a1yhvcax6n2ajux69 --format \"{{ .ManagerStatus.Reachability }}\"\n```", "```\nreachable\n```", "```\ndocker node inspect j2qxrpf0a1yhvcax6n2ajux69 --format \"{{ .Status.State }}\"\n```", "```\nready\n```", "```\ndocker node demote <node_id>\n```", "```\ndocker node rm <node_id>\n```", "```\ndocker node rm --force <node_id>\n```", "```\ndocker node swarm join --token <token> <swarm_ip>:<port>\n```", "```\ndocker node inspect <node_id>\n```", "```\ndocker stack deploy --compose-file <compose_file> <swarm_name>\n```", "```\ndocker stack ps <swarm_name>\n```", "```\ndocker stack rm <swarm_name>\n```", "```\ndocker service update --image <image_name:tag> <service_name>\n```", "```\nmkdir swarm; cd swarm\n```", "```\nFROM python:3\nENV PYTHONUNBUFFERED 1\nRUN mkdir /application\nWORKDIR /application\nCOPY requirements.txt /application/\nRUN pip install -r requirements.txt\nCOPY . /application/\n```", "```\n1 Django>=2.0,<3.0\n2 psycopg2>=2.7,<3.0\n```", "```\n1 version: '3.3'\n2\n3 services:\n4   db:\n5     image: postgres\n6     ports:\n7       - 5432:5432\n8     environment:\n9       - POSTGRES_PASSWORD=docker\n```", "```\n10   web:\n11     build: .\n12     image: swarm_web:latest\n13     command: python manage.py runserver 0.0.0.0:8000\n14     volumes:\n15       - .:/application\n16     ports:\n17       - 8000:8000\n18     environment:\n19       - PGPASSWORD=docker\n20     depends_on:\n21       - db\n```", "```\ndocker-compose run web django-admin startproject chapter_nine .\n```", "```\n…\nStatus: Downloaded newer image for postgres:latest\nCreating swarm_db_1 ... done\nBuilding web\n…\nSuccessfully built 41ff06e17fe2\nSuccessfully tagged swarm_web:latest\n```", "```\nls -l\n```", "```\n-rw-r--r--  1 user  staff  175  3 Mar 13:45 Dockerfile\ndrwxr-xr-x  6 user  staff  192  3 Mar 13:48 chapter_nine\n-rw-r--r--  1 user  staff  304  3 Mar 13:46 docker-compose.yml\n-rwxr-xr-x  1 user  staff  634  3 Mar 13:48 manage.py\n-rw-r--r--  1 user  staff   36  3 Mar 13:46 requirements.txt\n```", "```\n76 DATABASES = {\n77     'default': {\n78         'ENGINE': 'django.db.backends.sqlite3',\n79         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n80     }\n81 }\n```", "```\n76 DATABASES = {\n77     'default': {\n78         'ENGINE': 'django.db.backends.postgresql',\n79         'NAME': 'postgres',\n80         'USER': 'postgres',\n81         'PASSWORD': 'docker',\n82         'HOST': 'db',\n83         'PORT': 5432,\n84     }\n85 }\n```", "```\n 27 \n 28 ALLOWED_HOSTS = [\"0.0.0.0\"]\n```", "```\ndocker stack deploy --compose-file docker-compose.yml test_swarm\n```", "```\nCreating network test_swarm_default\nCreating service test_swarm_db\nCreating service test_swarm_web\n```", "```\ndocker service ls\n```", "```\nID     NAME            MODE        REPLICAS  IMAGE\n  PORTS\ndsr.   test_swarm_db   replicated  1/1       postgres\nkq3\\.   test_swarm_web  replicated  1/1       swarm_web:latest\n  *:8000.\n```", "```\ndocker stack ls\n```", "```\nNAME                SERVICES            ORCHESTRATOR\ntest_swarm          2                   Swarm\n```", "```\ndocker stack ps test_swarm\n```", "```\nNAME                IMAGE               NODE\n  CURRENT STATE\ntest_swarm_web.1    swarm_web:latest    docker-desktop\n  Running\ntest_swarm_db.1     postgres:latest     docker-desktop\n  Running\n```", "```\ndocker stack rm test_swarm\n```", "```\nRemoving service test_swarm_db\nRemoving service test_swarm_web\nRemoving network test_swarm_default\n```", "```\n22     deploy:\n23       replicas: 2\n```", "```\nversion: '3.3'\nservices:\n  db:\n    image: postgres\n    ports:\n      - 5432:5432\n    environment:\n      - POSTGRES_PASSWORD=docker\n  web:\n    build: .\n    image: swarm_web:latest\n    command: python manage.py runserver 0.0.0.0:8000\n    volumes:\n      - .:/application\n    ports:\n      - 8000:8000\n    environment:\n      - PGPASSWORD=docker\n    deploy:\n      replicas: 2\n    depends_on:\n      - db\n```", "```\ndocker stack deploy --compose-file docker-compose.yml test_swarm\n```", "```\ndocker ps | awk '{print $1 \"\\t\" $2 }'\n```", "```\nCONTAINER         ID\n2f6eb92414e6      swarm_web:latest\ne9241c352e12      swarm_web:latest\nd5e6ece8a9bf      postgres:latest\n```", "```\ndocker build . -t swarm_web:patch1\n```", "```\ndocker service update --image swarm_web:patch1 test_swarm_web\n```", "```\nimage swarm_web:patch1 could not be accessed on a registry \nto record its digest. Each node will access \nswarm_web:patch1 independently, possibly leading to different \nnodes running different versions of the image.\ntest_swarm_web\noverall progress: 2 out of 2 tasks \n1/2: running   [=========================================>]\n2/2: running   [=========================================>]\nverify: Service converged\n```", "```\ndocker ps | awk '{print $1 \"\\t\" $2 }'\n```", "```\nCONTAINER         ID\nef4107b35e09      swarm_web:patch1\nd3b03d8219dd      swarm_web:patch1\nd5e6ece8a9bf      postgres:latest\n```", "```\ndocker service update --update-delay 30s --image swarm_web:latest test_swarm_web\n```", "```\ndocker ps | awk '{print $1 \"\\t\" $2 }'\n```", "```\nCONTAINER         ID\n414e62f6eb92      swarm_web:latest\n352e12e9241c      swarm_web:latest\nd5e6ece8a9bf      postgres:latest\n```", "```\ndocker config create <config_name> <configuration_file> \n```", "```\ndocker config ls\n```", "```\ndocker config inspect --pretty <config_name>\n```", "```\necho \"<secret_password>\" | docker secret create <secret_name> –\n```", "```\ndocker secret create <secret_name> <secret_file> \n```", "```\ndocker secret ls\n```", "```\nDjango>=2.0,<3.0\npsycopg2>=2.7,<3.0\ngunicorn==19.9.0\n```", "```\n12     image: swarm_web:latest\n13     command: gunicorn chapter_nine.wsgi:application          --bind 0.0.0.0:8000\n14     volumes:\n```", "```\ndocker-compose build\n```", "```\ndocker stack deploy --compose-file docker-compose.yml test_swarm\n```", "```\nIgnoring unsupported options: build\nCreating network test_swarm_default\nCreating service test_swarm_web\nCreating service test_swarm_db\n```", "```\n10   web:\n11     build: .\n12     image: swarm_web:latest\n13     command: gunicorn chapter_nine.wsgi:application          --bind 0.0.0.0:8000\n14     volumes:\n15       - .:/application\n16     ports:\n17       - 8000:8000\n18     environment:\n19       - PGPASSWORD=docker\n20     deploy:\n21       replicas: 2\n22     depends_on:\n23       - db\n```", "```\n24   nginx:\n25     build: ./nginx\n26     image: swarm_nginx:latest\n27     ports:\n28       - 1337:80\n29     depends_on:\n30       - web\n```", "```\nmkdir nginx\n```", "```\nFROM nginx\nRUN rm /etc/nginx/conf.d/default.conf\nCOPY nginx.conf /etc/nginx/conf.d\n```", "```\nupstream chapter_nine {\n    server web:8000;\n}\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://chapter_nine;\n        proxy_set_header X-Forwarded-For             $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n        proxy_redirect off;\n    }\n}\n```", "```\ndocker-compose build\n```", "```\ndocker stack deploy --compose-file docker-compose.yml test_swarm\n```", "```\nCreating network test_swarm_default\nCreating service test_swarm_db\nCreating service test_swarm_web\nCreating service test_swarm_nginx\n```", "```\ndocker stack ps test_swarm\n```", "```\nNAME                  IMAGE                 NODE\n  DESIRED STATE\ntest_swarm_nginx.1    swarm_nginx:latest    docker-desktop\n  Running\ntest_swarm_web.1      swarm_web:latest      docker-desktop\n  Running\ntest_swarm_db.1       postgres:latest       docker-desktop\n  Running\ntest_swarm_web.2      swarm_web:latest      docker-desktop\n  Running\n```", "```\ndocker config create nginx_config nginx/nginx.conf \n```", "```\nu125x6f6lhv1x6u0aemlt5w2i\n```", "```\ndocker config ls\n```", "```\nID           NAME           CREATED           UPDATED\nu125x6f6…    nginx_config   19 seconds ago    19 seconds ago\n```", "```\ndocker config inspect --pretty nginx_config\n```", "```\nID:             u125x6f6lhv1x6u0aemlt5w2i\nName:           nginx_config\nCreated at:          2020-03-04 19:55:52.168746807 +0000 utc\nUpdated at:          2020-03-04 19:55:52.168746807 +0000 utc\nData:\nupstream chapter_nine {\n    server web:8000;\n}\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://chapter_nine;\n        proxy_set_header X-Forwarded-For             $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n        proxy_redirect off;\n    }\n}\n```", "```\nFROM nginx:1.17.4-alpine\nRUN rm /etc/nginx/conf.d/default.conf\n```", "```\ndocker-compose build\n```", "```\n25   nginx:\n26     build: ./nginx\n27     image: swarm_nginx:latest\n28     ports:\n29       - 1337:80\n30     depends_on:\n31       - web\n32     configs:\n33       - source: nginx_conf\n34         target: /etc/nginx/conf.d/nginx.conf\n35 \n36 configs:\n37   nginx_conf:\n38     file: nginx/nginx.conf\n```", "```\ndocker stack deploy --compose-file docker-compose.yml test_swarm\n```", "```\nCreating network test_swarm_default\nCreating config test_swarm_nginx_conf\nCreating service test_swarm_db\nCreating service test_swarm_web\nCreating service test_swarm_nginx\n```", "```\necho \"docker\" | docker secret create pg_password –\n```", "```\n4i1cwxst1j9qoh2e6uq5fjb8c\n```", "```\ndocker secret ls\n```", "```\nID                          NAME           CREATED\n  UPDATED\n4i1cwxst1j9qoh2e6uq5fjb8c   pg_password    51 seconds ago\n  51 seconds ago\n```", "```\n4   db:\n5     image: postgres\n6     ports:\n7       - 5432:5432\n8     environment:\n9       - POSTGRES_PASSWORD=/run/secrets/pg_password\n10    secrets:\n11      - pg_password\n```", "```\n20    environment:\n21       - PGPASSWORD=/run/secrets/pg_password\n22    deploy:\n```", "```\n41 secrets:\n42  pg_password:\n43    external: true\n```", "```\nversion: '3.3'\nservices:\n  db:\n    image: postgres\n    ports:\n      - 5432:5432\n    environment:\n      - POSTGRES_PASSWORD=/run/secrets/pg_password\n    secrets:\n      - pg_password\n  web:\n    build: .\n    image: swarm_web:latest\n```", "```\n    volumes:\n      - .:/application\n    ports:\n      - 8000:8000\n```", "```\ndocker stack deploy --compose-file docker-compose.yml test_swarm\n```", "```\nCreating network test_swarm_default\nCreating config test_swarm_nginx_conf\nCreating service test_swarm_db\nCreating service test_swarm_web\nCreating service test_swarm_nginx\n```", "```\ndocker run -it --rm   --name swarmpit-installer   --volume /var/run/docker.sock:/var/run/docker.sock   swarmpit/install:1.8\n```", "```\ndocker stack deploy --compose-file docker-compose.yml test_swarm\n```", "```\ndocker run -it --rm   --name swarmpit-installer   --volume /var/run/docker.sock:/var/run/docker.sock   swarmpit/install:1.8\n```", "```\n_____      ____ _ _ __ _ __ ___  _ __ (_) |_ \n/ __\\ \\ /\\ / / _` | '__| '_ ` _ \\| '_ \\| | __|\n\\__ \\\\ V  V / (_| | |  | | | | | | |_) | | |_ \n|___/ \\_/\\_/ \\__,_|_|  |_| |_| |_| .__/|_|\\__|\n                                 |_|          \nWelcome to Swarmpit\nVersion: 1.8\nBranch: 1.8\n…\nApplication setup\nEnter stack name [swarmpit]: \nEnter application port [888]: \nEnter database volume driver [local]: \nEnter admin username [admin]: \nEnter admin password (min 8 characters long): ****\nDONE.\nApplication deployment\nCreating network swarmpit_net\nCreating service swarmpit_influxdb\nCreating service swarmpit_agent\nCreating service swarmpit_app\nCreating service swarmpit_db\nDONE.\n```", "```\ndocker stack ls\n```", "```\nNAME               SERVICES         ORCHESTRATOR\nswarmpit           4                Swarm\ntest_swarm         3                Swarm\n```", "```\ndocker service ls | grep swarmpit\n```", "```\nID              NAME                 MODE          REPLICAS\nvi2qbwq5y9c6    swarmpit_agent       global        1/1\n4tpomyfw93wy    swarmpit_app         replicated    1/1\nnuxi5egfa3my    swarmpit_db          replicated    1/1\ndo77ey8wz49a    swarmpit_influxdb    replicated    1/1\n```", "```\nID       NAME                MODE         REPLICAS\n  IMAGE\nk6kh…    activity_swarm_db   replicated   1/1\n  postgres:latest\ncopa…    activity_swarm_web  replicated   1/1\n  activity_web:latest  \n```"]