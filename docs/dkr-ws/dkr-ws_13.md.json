["```\nwget https://github.com/prometheus/prometheus/releases/download/v2.15.1/prometheus-2.15.1.<operating-system>-amd64.tar.gz\n```", "```\ntar zxvf prometheus-2.15.1.<operating-system>-amd64.tar.gz\n```", "```\ncd prometheus-2.15.1.<operating-system>-amd64\n```", "```\nls\n```", "```\nLICENSE    console_libraries    data    prometheus.yml    tsdb\nNOTICE    consoles    prometheus    promtool\n```", "```\n./prometheus --version\n```", "```\nprometheus, version 2.15.1 (branch: HEAD, revision: 8744510c6391d3ef46d8294a7e1f46e57407ab13)\n  build user:       root@4b1e33c71b9d\n  build date:       20191225-01:12:19\n  go version:       go1.13.5\n```", "```\ncat prometheus.yml \n```", "```\n# my global config\nglobal:\n  scrape_interval:     15s # Set the scrape interval to every \n15 seconds. Default is every 1 minute.\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. \nThe default is every 1 minute.\n  # scrape_timeout is set to the global default (10s).\n…\n```", "```\n./prometheus --config.file=prometheus.yml\n```", "```\n…\nmsg=\"Server is ready to receive web requests.\"\n```", "```\n# HELP go_gc_duration_seconds A summary of the GC invocation \ndurations.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 9.268e-06\ngo_gc_duration_seconds{quantile=\"0.25\"} 1.1883e-05\ngo_gc_duration_seconds{quantile=\"0.5\"} 1.5802e-05\ngo_gc_duration_seconds{quantile=\"0.75\"} 2.6047e-05\ngo_gc_duration_seconds{quantile=\"1\"} 0.000478339\ngo_gc_duration_seconds_sum 0.002706392\n…\n```", "```\n1 {\n2        \"experimental\": true,\n3        \"metrics-addr\": \"0.0.0.0:9191\"\n4 }\n```", "```\ndocker run \\\n  --volume=<host_directory>:<container_directory> \\\n  --publish=8080:8080 \\\n  --detach=true \\\n  --name=cadvisor \\\n  gcr.io/google-containers/cadvisor:latest\n```", "```\n    - job_name: '<scrap_job_name>'\n      static_configs:\n      - targets: ['<ip_address>:<port>']\n```", "```\n1 {\n2        \"experimental\": true,\n3        \"metrics-addr\": \"0.0.0.0:9191\"\n4 }\n```", "```\n# HELP builder_builds_failed_total Number of failed image builds\n# TYPE builder_builds_failed_total counter\nbuilder_builds_failed_total{reason=\"build_canceled\"} 0\nbuilder_builds_failed_total{reason=\"build_target_not_reachable\n_error\"} 0\nbuilder_builds_failed_total{reason=\"command_not_supported_\nerror\"} 0\nbuilder_builds_failed_total{reason=\"dockerfile_empty_error\"} 0\nbuilder_builds_failed_total{reason=\"dockerfile_syntax_error\"} 0\nbuilder_builds_failed_total{reason=\"error_processing_commands_\nerror\"} 0\nbuilder_builds_failed_total{reason=\"missing_onbuild_arguments_\nerror\"} 0\nbuilder_builds_failed_total{reason=\"unknown_instruction_error\"} 0\n…\n```", "```\nlevel=info ts=2020-04-28T04:49:39.435Z caller=main.go:718 \nmsg=\"Notifier manager stopped\"\nlevel=info ts=2020-04-28T04:49:39.436Z caller=main.go:730 \nmsg=\"See you next time!\"\n```", "```\n21 scrape_configs:\n22   # The job name is added as a label 'job=<job_name>' to any        timeseries scraped from this config.\n23   - job_name: 'prometheus'\n24\n25     # metrics_path defaults to '/metrics'\n26     # scheme defaults to 'http'.\n27 \n28     static_configs:\n29     - targets: ['localhost:9090']\n30 \n31   - job_name: 'docker_daemon'\n32     static_configs:\n33     - targets: ['0.0.0.0:9191']\n34\n```", "```\n./prometheus --config.file=prometheus.yml\n```", "```\ndocker run \\\n  --volume=/:/rootfs:ro \\\n  --volume=/var/run:/var/run:ro \\\n  --volume=/sys:/sys:ro \\\n  --volume=/var/lib/docker/:/var/lib/docker:ro \\\n  --volume=/dev/disk/:/dev/disk:ro \\\n  --publish=8080:8080 \\\n  --detach=true \\\n  --name=cadvisor \\\n  gcr.io/google-containers/cadvisor:latest\n```", "```\n35   - job_name: 'cadvisor'\n36     scrape_interval: 5s\n37     static_configs:\n38     - targets: ['0.0.0.0:8080']\n```", "```\n./prometheus --config.file=prometheus.yml\n```", "```\n(time() - process_start_time_seconds{instance=\"0.0.0.0:8080\",job=\"cadvisor\"})\n```", "```\n# HELP container_cpu_system_seconds_total Cumulative system cpu time \nconsumed in seconds.\n# TYPE container_cpu_system_seconds_total counter\ncontainer_cpu_system_seconds_total{id=\"/\",image=\"\",name=\"\"} \n195.86 1579481501131\n…\n```", "```\n# HELP container_cpu_load_average_10s Value of container cpu load \naverage over the last 10 seconds.\n# TYPE container_cpu_load_average_10s gauge\ncontainer_cpu_load_average_10s{id=\"/\",image=\"\",name=\"\"} 0 \n1579481501131\n…\n```", "```\n# HELP engine_daemon_container_actions_seconds The number of seconds \nit takes to process each container action\n# TYPE engine_daemon_container_actions_seconds histogram\nengine_daemon_container_actions_seconds_bucket{action=\"changes\",\nle=\"0.005\"} 1\n…\n```", "```\n# HELP http_request_duration_microseconds The HTTP request latencies in microseconds.\n# TYPE http_request_duration_microseconds summary\nhttp_request_duration_microseconds{handler=\"prometheus\",quantile=\n\"0.5\"} 3861.5\n…\n```", "```\ncontainer_cpu_system_seconds_total{ name=\"cadvisor\"}\n```", "```\ncontainer_cpu_system_seconds_total{ name=~\"ca.+\"} \n```", "```\ncontainer_cpu_system_seconds_total{ name!=\"\"}\n```", "```\nrate(container_cpu_system_seconds_total{name=\"cadvisor\"}[1m])\n```", "```\nsum(rate(container_cpu_system_seconds_total[1m])) by (name)\n```", "```\n(time() - process_start_time_seconds{instance=\"localhost:9090\",job=\"prometheus\"})\n```", "```\nmkdir web-nginx; cd web-nginx\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n</head>\n<body>\n    <h1>\n        Hello Prometheus\n    </h1>\n</body>\n</html>\n```", "```\ndocker run --name web-nginx --rm -v ${PWD}/index.html:/usr/share/nginx/html/index.html -p 80:80 -d nginx\n```", "```\n./prometheus --config.file=prometheus.yml\n```", "```\ncount(container_memory_usage_bytes)\n```", "```\nscalar(count(container_memory_usage_bytes{image!=\"\"}) > 0)\n```", "```\ncontainer_start_time_seconds{name=\"web-nginx\"}\n```", "```\n(time() - container_start_time_seconds{name=\"web-nginx\"})\n```", "```\nrate(prometheus_http_request_duration_seconds_count[1m])\n```", "```\nrate(prometheus_http_request_duration_seconds_sum[1m]) / rate(prometheus_http_request_duration_seconds_count[1m])\n```", "```\nsum by (name) (container_memory_usage_bytes{name!=\"\"})\n```", "```\ndocker kill web-nginx\n```", "```\ndocker pull mhowlett/ngx-stub-status-prometheus\n```", "```\ndaemon off;\nevents {\n}\nhttp {\n  server {\n    listen 80;\n    location / {\n      index  index.html;\n    }\n    location /metrics {\n      stub_status_prometheus;\n    }\n  }\n}\n```", "```\ndocker run --name web-nginx --rm -v ${PWD}/index.html:/usr/html/index.html -v ${PWD}/nginx.conf:/etc/nginx/nginx.conf -p 80:80 -d mhowlett/ngx-stub-status-prometheus\n```", "```\n# HELP nginx_active_connections_current Current number of \nactive connections\n# TYPE nginx_active_connections_current gauge\nnginx_active_connections_current 2\n# HELP nginx_connections_current Number of connections currently \nbeing processed by nginx\n# TYPE nginx_connections_current gauge\nnginx_connections_current{state=\"reading\"} 0\nnginx_connections_current{state=\"writing\"} 1\nnginx_connections_current{state=\"waiting\"} 1\n…\n```", "```\n40   - job_name: 'web-nginx'\n41     scrape_interval: 5s\n42     static_configs:\n43     - targets: ['0.0.0.0:80']\n```", "```\n./prometheus --config.file=prometheus.yml\n```", "```\n./prometheus --config.file=prometheus.yml\n```", "```\n1 127.0.0.1       localhost prometheus\n```", "```\nmkdir -p provisioning/dashboards provisioning/datasources provisioning/plugins provisioning/notifiers\n```", "```\napiVersion: 1\ndatasources:\n- name: Prometheus\n  type: prometheus\n  url: http://prometheus:9090\n  access: direct\n```", "```\napiVersion: 1\nproviders:\n- name: 'Prometheus'\n  orgId: 1\n  folder: ''\n  type: file\n  disableDeletion: false\n  editable: true\n  options:\n    path: /etc/grafana/provisioning/dashboards\n```", "```\ndocker run --rm -d --name grafana -p 3000:3000 -e \"GF_SECURITY_ADMIN_PASSWORD=secret\" -v ${PWD}/provisioning:/etc/grafana/provisioning grafana/grafana\n```", "```\ndocker kill grafana\n```", "```\ncp /tmp/ContainerMonitoring-1579130313205.json provisioning/dashboards/ContainerMonitoring.json\n```", "```\ndocker run --rm -d --name grafana -p 3000:3000 -e \"GF_SECURITY_ADMIN_PASSWORD=secret\" -v ${PWD}/provisioning:/etc/grafana/provisioning grafana/grafana\n```"]