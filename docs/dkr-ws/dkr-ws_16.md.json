["```\ndocker run -itd -e \"POSTGRES_USER=panoramic\" -e \"POSTGRES_PASSWORD=trekking\" postgres:12\n```", "```\n$ docker ps\n```", "```\nCONTAINER ID  IMAGE         COMMAND                 CREATED\n  STATUS              PORTS               NAMES\n29f115af8cdd  postgres:12   \"docker-entrypoint.s…\"  4 seconds ago\n  Up 2 seconds        5432/tcp            blissful_kapitsa\n```", "```\n$ docker exec -it <containerID> psql --username panoramic --password\n```", "```\npsql (12.2 (Debian 12.2-2.pgdg100+1))\nType \"help\" for help.\npanoramic=# \\l\n```", "```\nmkdir activity-02-01\n```", "```\ncd activity-02-01\n```", "```\ntouch welcome.php \n```", "```\nvim welcome.php \n```", "```\n<?php\n$hourOfDay = date('H');\nif($hourOfDay < 12) {\n    $message = «Good Morning»;\n} elseif($hourOfDay > 11 && $hourOfDay < 18) {\n    $message = «Good Afternoon»;\n} elseif($hourOfDay > 17){\n    $message = «Good Evening»;\n}\necho $message;\n?>\n```", "```\ntouch Dockerfile\n```", "```\nvim Dockerfile\n```", "```\n# Start with Ubuntu base image\nFROM ubuntu:18.04\n# Set labels\nLABEL maintainer=sathsara\nLABEL version=1.0 \n# Set environment variables\nENV DEBIAN_FRONTEND=noninteractive\n# Install Apache, PHP, and other packages\nRUN apt-get update && \\\n    apt-get -y install apache2 \\\n    php \\ \n    curl\n# Copy all php files to the Docker image\nCOPY *.php /var/www/html\n# Set working directory\nWORKDIR /var/www/html\n# Create health check\nHEALTHCHECK --interval=5s --timeout=3s --retries=3 CMD curl -f   http://localhost || exit 1\n# Expose Apache\nEXPOSE 80\n# Start Apache\nENTRYPOINT [\"apache2ctl\", \"-D\", \"FOREGROUND\"]\n```", "```\n$ docker image build -t activity-02-01 .\n```", "```\n$ docker container run -p 80:80 --name activity-02-01-container -d activity-02-01\n```", "```\n$ docker container stop activity-02-01-container\n```", "```\n$ docker container rm activity-02-01-container\n```", "```\n1 set -ex\n2\n3 REGISTRY=dev.docker.local:5000\n4 SERVICENAME=postgresql\n```", "```\n6 GIT_VERSION=`git log -1 --format=%h`\n7 echo \"version: $GIT_VERSION \"\n```", "```\n9 docker build -t $REGISTRY/$SERVICENAME:$GIT_VERSION .\n10\n11 docker push $REGISTRY/$SERVICENAME:$GIT_VERSION\n```", "```\n1 set -ex\n2\n3 REGISTRY=dev.docker.local:5000\n4 SERVICENAME= postgresql\n5\n6 GIT_VERSION=`git log -1 --format=%h`\n7 echo \"version: $GIT_VERSION \"\n8\n9 docker build -t $REGISTRY/$SERVICENAME:$GIT_VERSION .\n10\n11 docker push $REGISTRY/$SERVICENAME:$GIT_VERSION\n```", "```\n./build.sh\n```", "```\n./BuildScript.sh \n++ REGISTRY=dev.docker.local:5000\n++ SERVICENAME=basic-app\n+++ git log -1 --format=%h\n++ GIT_VERSION=49d3a10\n++ echo 'version: 49d3a10 '\nversion: 49d3a10 \n++ docker build -t dev.docker.local:5000/basic-app:49d3a10 .\nSending build context to Docker daemon  3.072kB\nStep 1/1 : FROM postgres\n ---> 873ed24f782e\nSuccessfully built 873ed24f782e\nSuccessfully tagged dev.docker.local:5000/basic-app:49d3a10\n++ docker push dev.docker.local:5000/basic-app:49d3a10\nThe push refers to repository [dev.docker.local:5000/basic-app]\n```", "```\nmkdir /home/vincesesto/test_registry/\n```", "```\ndocker run -d -p 5000:5000 --restart=always --name registry -v /home/vincesesto/test_registry/registry:/var/lib/registry:rw registry\n```", "```\ndocker push dev.docker.local:5000/basic-app:ver1\n```", "```\nls  ~/test_registry/registry/docker/registry/v2/repositories/\n```", "```\nbasic-app\n```", "```\nmkdir activity-04-01\n```", "```\ncd activity-04-01\n```", "```\n$ touch main.go\n```", "```\n$ vim main.go\n```", "```\npackage main\nimport (\n    \"net/http\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n)\nfunc main() {\n    http.HandleFunc(\"/\", defaultHandler)\n    http.HandleFunc(\"/contact\", contactHandler)\n    http.HandleFunc(\"/login\", loginHandler)\n    port := os.Getenv(\"PORT\")\n    if port == \"\" {\n        port = \"8080\"\n    }\n\n    log.Println(\"Service started on port \" + port)\n    err := http.ListenAndServe(\":\"+port, nil)\n    if err != nil {\n        log.Fatal(\"ListenAndServe: \", err)\n        return\n    }\n}\nfunc defaultHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"<h1>Home Page</h1>\")\n}\nfunc contactHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"<h1>Contact Us</h1>\")\n}\nfunc loginHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"<h1>Login Page</h1>\")\n}\n```", "```\ntouch Dockerfile\n```", "```\nvim Dockerfile\n```", "```\nFROM golang:1.14.2-alpine AS builder\nWORKDIR /myapp\nCOPY main.go .\nRUN go build -o main .\nFROM alpine:latest AS runtime\nWORKDIR /myapp\nCOPY --from=builder /myapp/main .\nENTRYPOINT [\"./main\"]\nEXPOSE 8080\n```", "```\ndocker build -t activity-04-01:v1 .\n```", "```\ndocker images\n```", "```\n$ docker container run -p 8080:8080 --name activity-04-01-container activity-04-01:v1\n```", "```\n2020/08/30 05:14:10 Service started on port 8080\n```", "```\nhttp://127.0.0.1:8080/\n```", "```\nhttp://127.0.0.1:8080/contact\n```", "```\nhttp://127.0.0.1:8080/login \n```", "```\nmkdir wordpress\ncd wordpress\n```", "```\nversion: \"3\"\nservices:\n  database:\n    image: mysql:5.7\n    volumes:\n      - data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: root\n      MYSQL_DATABASE: db\n      MYSQL_USER: user\n      MYSQL_PASSWORD: password\n  wordpress:\n    depends_on:\n      - database\n    image: wordpress:latest\n    ports:\n      - \"8080:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: database:3306\n      WORDPRESS_DB_USER: user\n      WORDPRESS_DB_PASSWORD: password\n      WORDPRESS_DB_NAME: db\nvolumes:\n     data: {} \n```", "```\nmkdir pta-compose\ncd pta-compose\n```", "```\nversion: \"3\"\nservices:\n  db:\n    image: postgres\n    volumes:\n      - db_data:/var/lib/postgresql/data/\n    environment:\n      - POSTGRES_PASSWORD=docker\n  web:\n    image: packtworkshops/the-docker-workshop:chapter5-pta-web\n    volumes:\n      - static_data:/service/static\n    depends_on:\n      - db\n  nginx:\n    image: packtworkshops/the-docker-workshop:chapter5-pta-nginx\n    volumes:\n      - static_data:/service/static\n    ports:\n      - 8000:80\n    depends_on:\n      - web\nvolumes:\n  db_data:\n  static_data:\n```", "```\n$ docker network create webservernet --subnet=192.168.1.0/24 --gateway=192.168.1.1\n```", "```\n$ docker run -itd -p 8080:80 --name webserver1 --network webservernet nginx:latest\n```", "```\n$ docker run -itd --name monitor --network host alpine:latest\n```", "```\n$ docker inspect webserver1\n```", "```\n$ docker exec -it monitor /bin/sh\n```", "```\n/ # apk add curl\n```", "```\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main\n/x86_64/APKINDEX.tar.gz\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community\n/x86_64/APKINDEX.tar.gz\n(1/4) Installing ca-certificates (20191127-r1)\n(2/4) Installing nghttp2-libs (1.40.0-r0)\n(3/4) Installing libcurl (7.67.0-r0)\n(4/4) Installing curl (7.67.0-r0)\nExecuting busybox-1.31.1-r9.trigger\nExecuting ca-certificates-20191127-r1.trigger\nOK: 7 MiB in 18 packages\n```", "```\n/ # curl -v http://localhost:8080\n```", "```\n/ # curl -v 192.168.1.2:80\n```", "```\n$ docker network create panoramic-net --subnet=10.2.0.0/16 --gateway=10.2.0.1 --driver overlay\n```", "```\n$ docker service create -t --name trekking-app --replicas=1 --network panoramic-net alpine:latest\n```", "```\n$ docker service create -t --name database-app --replicas=1 --network panoramic-net -e \"POSTGRES_USER=panoramic\" -e \"POSTGRES_PASSWORD=trekking\" postgres:12\n```", "```\n$ docker exec -it trekking-app.1.qhpwxol00geedkfa9p6qswmyv /bin/sh\n```", "```\n/ # ping database-app\n```", "```\nPING database-app (10.2.0.5): 56 data bytes\n64 bytes from 10.2.0.5: seq=0 ttl=64 time=0.261 ms\n64 bytes from 10.2.0.5: seq=1 ttl=64 time=0.352 ms\n64 bytes from 10.2.0.5: seq=2 ttl=64 time=0.198 ms\n```", "```\n$ docker container rm -fv $(docker container ls -aq)\n$docker image rm $(docker image ls -q)\n```", "```\n$docker volume ls\n$docker volume rm <volume names separated by spaces>\n```", "```\n$docker network ls\n$docker network rm <network names separated by spaces>\n```", "```\ndocker events --format '{{json .}}'.\n```", "```\n$docker run -d ubuntu:14.04\n```", "```\n$docker volume create vol1\n```", "```\n$docker network create net1\n```", "```\n$docker container rm -fv <container ID>\n```", "```\n$docker volume rm vol1\n$docker network rm net1\n```", "```\n{\"status\":\"create\",\"id\":\"43903b966123a7c491b50116b40827daa03\nda5d350f8fef2a690fc4024547ce2\",\"from\":\"ubuntu:14.04\",\"Type\":\n\"container\",\"Action\":\"create\",\"Actor\":{\"ID\":\"43903b966123a7c\n491b50116b40827daa03da5d350f8fef2a690fc4024547ce2\",\"Attributes\":\n{\"image\":\"ubuntu:14.04\",\"name\":\"upbeat_johnson\"}},\"scope\":\"local\",\n\"time\":1592516703,\"timeNano\":1592516703507582404}\n```", "```\n{\"Type\":\"network\",\"Action\":\"connect\",\"Actor\":{\"ID\":\"52855e1561\n8e37b7ecc0bb26bc42847af07cae65ddd3b68a029e40006364a9bd\",\n\"Attributes\":{\"container\":\"43903b966123a7c491b50116b40827daa03d\na5d350f8fef2a690fc4024547ce2\",\"name\":\"bridge\",\"type\":\"bridge\"}},\n\"scope\":\"local\",\"time\":1592516703,\"timeNano\":1592516703911851347}\n```", "```\n$docker container run --name db1 -v db:/var/lib/postgresql/data -e POSTGRES_PASSWORD=password -d postgres\n```", "```\n$ docker container exec -it db1 psql -U postgres\n```", "```\nCREATE TABLE events (ID serial NOT NULL PRIMARY KEY, info json NOT NULL);\n```", "```\nINSERT INTO events (info) VALUES ('{\"status\":\"create\",\"id\":\"43903b966123a7c491b50116b40827daa03da 5d350f8fef2a690fc4024547ce2\",\"from\":\"ubuntu:14.04\",\"Type\":\"container\",\"Action\":\"create\",\"Actor\":{\"ID\":\"43903b966123a7c49 1b50116b40827daa03da5d350f8fef2a690fc4024547ce2\",\"Attributes\":{\"image\":\"ubuntu:14.04\",\"name\":\"upbeat_johnson\"}},\"scope\":\"local\",\"time\":1592516703,\"timeNano\":1592516703507582404}');\n```", "```\nselect * from events;\n```", "```\nSELECT * FROM events WHERE info ->> 'status' = 'pull';\n```", "```\nSELECT * FROM events WHERE info ->> 'status' = 'destroy';\n```", "```\nSELECT info ->> 'id' as id FROM events WHERE info ->> 'status'=     'destroy';\n```", "```\n$cd /var/mylogs\n```", "```\nBash: cd: /var/mylogs: No such file or directory\n```", "```\n$docker container run -d -v /var/mylogs:/var/log/nginx nginx\n```", "```\n$cd /var/mylogs\n$ls\n```", "```\naccess.log         error.log\n```", "```\n$tail -f *.log\n```", "```\n==>  access.log  <==\n==>  error.log   <==\n```", "```\ndocker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube\n```", "```\n4346a99b506b1bec8000e429471dabac57e3f565b154ee921284ec685497bfae\n```", "```\n$ ifconfig\n```", "```\nsonar.projectKey=hit_count\nsonar.projectName=hit_count\nsonar.projectVersion=1.0\nsonar.sources=.\nsonar.language=py\nsonar.sourceEncoding=UTF-8\n# Test Results\nsonar.python.xunit.reportPath=nosetests.xml\n# Coverage\nsonar.python.coverage.reportPath=coverage.xml\n# Linter (https://docs.sonarqube.org/display/PLUG/Pylint+Report)\n#sonar.python.pylint=/usr/local/bin/pylint\n#sonar.python.pylint_config=.pylintrc\n#sonar.python.pylint.reportPath=pylint-report.txt\n```", "```\nsonar.projectKey=trekking\nsonar.projectName=trekking\nsonar.projectVersion=1.0\nsonar.sources=.\nsonar.language=py\nsonar.sourceEncoding=UTF-8\n# Test Results\nsonar.python.xunit.reportPath=nosetests.xml\n# Coverage\nsonar.python.coverage.reportPath=coverage.xml\n# Linter (https://docs.sonarqube.org/display/PLUG/Pylint+Report)\n#sonar.python.pylint=/usr/local/bin/pylint\n#sonar.python.pylint_config=.pylintrc\n#sonar.python.pylint.reportPath=pylint-report.txt\n```", "```\nmkdir Activity1; cd Activity1\n```", "```\ngit clone https://github.com/vincesesto/trekking_app.git\n```", "```\nls -l\n```", "```\n-rw-r--r--   1 vinces  staff   533 12 Mar 15:02 Dockerfile\n-rwxr-xr-x   1 vinces  staff  1077 12 Mar 15:02 entrypoint.sh\n-rwxr-xr-x   1 vinces  staff   642 12 Mar 15:02 manage.py\ndrwxr-xr-x   9 vinces  staff   288 12 Mar 15:02 \npanoramic_trekking_app\ndrwxr-xr-x  12 vinces  staff   384 12 Mar 15:02 photo_viewer\n-rw-r--r--   1 vinces  staff   105 12 Mar 15:02 requirements.txt\n```", "```\nSQL_ENGINE=django.db.backends.postgresql\nSQL_DATABASE=pta_database\nSQL_USER=pta_user\nSQL_PASSWORD=pta_password\nSQL_HOST=db\nSQL_PORT=5432\nPGPASSWORD=docker\n```", "```\nversion: '3.3'\nservices:\n  web:\n    build: .\n    image: activity_web:latest\n    command: python manage.py runserver 0.0.0.0:8000\n    volumes:\n      - static_volume:/service/static\n    ports:\n      - 8000:8000\n    environment:\n      - PGPASSWORD=docker\n    env_file:\n      - ./.env.dev\n    depends_on:\n      - db\n  db:\n    image: postgres\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    environment:\n      - POSTGRES_PASSWORD=docker\n    ports:\n      - 5432:5432\nvolumes:\n  postgres_data:\n  static_volume:\n```", "```\ndocker build -t activity_web:latest .\n```", "```\ndocker stack deploy --compose-file docker-compose.yml activity_swarm\n```", "```\nCreating network activity_swarm_default\nCreating service activity_swarm_web\nCreating service activity_swarm_db\n```", "```\ndocker service ls\n```", "```\nID       NAME                MODE         REPLICAS\n  IMAGE\nk6kh…    activity_swarm_db   replicated   1/1\n  postgres:latest\ncopa…    activity_swarm_web  replicated   1/1\n  activity_web:latest  \n```", "```\ndocker stack deploy --compose-file docker-compose.yml activity_swarm\n```", "```\nCreating network activity_swarm_default\nCreating service activity_swarm_web\nCreating service activity_swarm_db\n```", "```\n1 {% extends \"base.html\" %}\n2 {% load static %}\n3 {% block page_content %}\n4 <h1>Patch Panoramic Trekking App - Photo Viewer</h1>\n```", "```\ndocker build -t activity_web:patch_1 .\n```", "```\ndocker service update --image activity_web:patch_1 activity_swarm_web\n```", "```\n…\nactivity_swarm_web\noverall progress: 1 out of 1 tasks \n1/1: running   [=======================================>] \nverify: Service converged\n```", "```\ndocker service ls\n```", "```\nID         NAME                  MODE          REPLICAS\n  IMAGE\nk6kh…      activity_swarm_db     replicated    1/1\n  postgres:latest\ncu5p…      activity_swarm_web    replicated    1/1\n  activity_web:patch_1\n```", "```\nhelm install database stable/postgresql --set postgresqlPassword=kubernetes\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: panoramic-trekking-app\nspec:\n  serviceName: panoramic-trekking-app\n  replicas: 1\n  selector:\n    matchLabels:\n      app: panoramic-trekking-app\n  template:\n    metadata:\n      labels:\n        app: panoramic-trekking-app\n    spec:\n      containers:\n      - name: nginx\n        image: packtworkshops/the-docker-workshop:          chapter10-pta-nginx\n        ports:\n        - containerPort: 80\n          name: web\n        volumeMounts:\n        - name: static\n          mountPath: /service/static\n      - name: pta\n        image: packtworkshops/the-docker-workshop:          chapter10-pta-web\n        volumeMounts:\n        - name: static\n          mountPath: /service/static\n  volumeClaimTemplates:\n  - metadata:\n      name: static\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 1Gi\n```", "```\nkubectl apply -f statefulset.yaml\n```", "```\nStatefulSet.apps/panoramic-trekking-app created\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: panoramic-trekking-app\n  labels:\n    app: panoramic-trekking-app\nspec:\n  ports:\n  - port: 80\n    name: web\n  type: LoadBalancer\n  selector:\n    app: panoramic-trekking-app\n```", "```\nkubectl apply -f service.yaml\n```", "```\nService/panoramic-trekking-app created\n```", "```\nminikube service panoramic-trekking-app --url\nhttp://192.168.64.14:32009\n```", "```\ndocker pull postgres\n```", "```\nwget https://raw.githubusercontent.com/docker/docker/v1.12.3/profiles/seccomp/default.json - O activity1.json\n```", "```\n1500                 {\n1501                         \"name\": \"uname\",\n1502                         \"action\": \"SCMP_ACT_ALLOW\",\n1503                         \"args\": []\n1504                 },\n\n669                 {\n670                         \"name\": \"mkdir\",\n671                         \"action\": \"SCMP_ACT_ALLOW\",\n672                         \"args\": []\n673                 },\n\n579                 {\n580                         \"name\": \"kill\",\n581                         \"action\": \"SCMP_ACT_ALLOW\",\n582                         \"args\": []\n583                 },\n```", "```\ndocker run --rm -it --security-opt seccomp=activity1.json postgres sh\n```", "```\n~ $ mkdir test\n```", "```\nmkdir: can't create directory 'test': Operation not permitted\n```", "```\n~ $ top & ps\n```", "```\nPID   USER         TIME    COMMAND\n 1    20002        0:00    sh\n 8    20002        0:00    top\n10    20002        0:00    ps\n[1]+  Stopped  (tty output)       top\n```", "```\n~ $ kill -9 8\n```", "```\nsh: can't kill pid 8: Operation not permitted\n```", "```\n~ $ uname\n```", "```\nOperation not permitted\n```", "```\ndocker tag postgres <your repository namespace>/postgres-app:activity2 ; docker push <your repository name>/postgres-app:activity2\n```", "```\ndocker-compose up -d\n```", "```\nanchore-cli system status\n```", "```\nanchore-cli system feeds list\n```", "```\nanchore-cli image add <your repository namespace>/postgres-app:activity2\n```", "```\nanchore-cli image list\n```", "```\nanchore-cli image vuln <your repository namespace>/postgres-app:activity2 all | wc -l\n```", "```\n108\n```", "```\nanchore-cli evaluate check <your repository namespace>/postgres-app:activity2\n```", "```\nImage Digest: sha256:57d8817bac132c2fded9127673dd5bc7c3a97654\n636ce35d8f7a05cad37d37b7\nFull Tag: docker.io/vincesestodocker/postgres-app:activity2\nStatus: pass\nLast Eval: 2019-11-23T06:15:32Z\nPolicy ID: 2c53a13c-1765-11e8-82ef-23527761d060\n```", "```\n1 CREATE TABLE test_data\n2 (\n3     random_value NUMERIC NOT NULL,\n4     row1         NUMERIC NOT NULL,\n5     row2         NUMERIC NOT NULL\n6 );\n7 \n8 INSERT INTO test_data\n9     SELECT random_value.*,\n10     gen.* ,\n11     CEIL(RANDOM()*100)\n12     FROM GENERATE_SERIES(1, 300) random_value,\n13     GENERATE_SERIES(1, 900000) gen\n14     WHERE gen <= random_value * 300;\n```", "```\ndocker pull postgres\n```", "```\ndocker stats --format \"table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemPerc}}\\t{{.MemUsage}}\"\n```", "```\nNAME         CPU %       MEM %      MEM USAGE / LIMIT\n```", "```\ndocker run --rm --name postgres-test -v ${PWD}/resource_test.sql:/resource_test.sql -e POSTGRES_PASSWORD=docker -d -p 5432:5432 postgres\n```", "```\nNAME            CPU %    MEM %     MEM USAGE / LIMIT\npostgres-test   0.09%    0.47%     9.273MiB / 1.943GiB\n```", "```\ndocker exec -it postgres-test /bin/bash\n```", "```\npsql -h localhost -U postgres -d postgres -c 'create database resource_test;'\nPassword for user postgres: \nCREATE DATABASE\n```", "```\ntime psql -h localhost -U postgres -d resource_test -a -f resource_test.sql\n```", "```\nPassword for user postgres: \n…\nINSERT 0 13545000\nreal    0m50.446s\nuser    0m0.003s\nsys     0m0.008s\n```", "```\nNAME            CPU %      MEM %    MEM USAGE / LIMIT\npostgres-test   100.66%    2.73%    54.36MiB / 1.943GiB\n```", "```\ndocker kill postgres-test\n```", "```\ndocker run --rm --name postgres-test -e POSTGRES_PASSWORD=docker -d -p 5432:5432 --cpus 0.5 --memory 256MB postgres\n```", "```\ndocker exec -it postgres-test /bin/bash\n```", "```\npsql -h localhost -U postgres -d postgres -c 'create database resource_test;'\nPassword for user postgres: \nCREATE DATABASE\n```", "```\ntime psql -h localhost -U postgres -d resource_test -a -f resource_test.sql\nPassword for user postgres: \n…\nINSERT 0 13545000\nreal    1m54.484s\nuser    0m0.003s\nsys     0m0.005s\n```", "```\nNAME            CPU %     MEM %      MEM USAGE / LIMIT\npostgres-test   48.52%    13.38%     34.25MiB / 256MiB\n```", "```\ndocker pull hadolint/hadolint\n```", "```\ndocker run --rm -i hadolint/hadolint < Dockerfile\n```", "```\n/dev/stdin:1 DL3006 Always tag the version of an image explicitly\n/dev/stdin:2 DL3008 Pin versions in apt get install. Instead of \n'apt-get install <package>' use 'apt-get install \n<package>=<version>'\n/dev/stdin:2 DL3009 Delete the apt-get lists after installing \nsomething\n/dev/stdin:2 DL3015 Avoid additional packages by specifying \n'--no-install-recommends'\n/dev/stdin:2 DL3014 Use the '-y' switch to avoid manual input \n'apt-get -y install <package>'\n/dev/stdin:3 DL3025 Use arguments JSON notation for CMD \nand ENTRYPOINT arguments\n```", "```\n1 FROM ubuntu:18.08\n```", "```\n2 RUN apt-get update \\\n3 && apt-get install -y stress=1.0.4 --no-install-recommends \\\n4 && apt-get clean \\\n5 && rm -rf /var/lib/apt/lists/*\n```", "```\n6 CMD [\"sh\", \"-c\", \"stress ${var}\"]\n```", "```\nFROM ubuntu:18.04\nRUN apt-get update \\\n && apt-get install -y stress=1.0.4 --no-install-recommends \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\nCMD [\"sh\", \"-c\", \"stress ${var}\"]\n```", "```\ndocker run --rm -i hadolint/hadolint < Dockerfile\n```", "```\nsum by (name) (container_memory_usage_bytes{name!=\"\"})\n```", "```\ndocker kill grafana\n```", "```\ncp /tmp/ContainerMonitoring-1579130313205.json provisioning/dashboards/ContainerMonitoring.json\n```", "```\ndocker run --rm -d --name grafana -p 3000:3000 -e \"GF_SECURITY_ADMIN_PASSWORD=secret\" -v ${PWD}/provisioning:/etc/grafana/provisioning grafana/Grafana\n```", "```\ndocker run --rm -d --name postgres-test -e POSTGRES_PASSWORD=docker -p 5432:5432 postgres\n```", "```\ndocker inspect --format '{{ .NetworkSettings.IPAddress }}' <container_name>\n```", "```\n172.17.0.3\n```", "```\n1 databases:\n2   pg:\n3     dsn: postgresql+psycopg2://postgres:<password>@<ip|domain>/        postgres\n4\n```", "```\n5 metrics:\n6   pg_process:\n7     type: gauge\n8     description: Number of PostgreSQL processes with their         states\n9     labels: [state]\n10\n```", "```\n11 queries:\n12   process_stats:\n13     databases: [pg]\n14     metrics:\n15       - pg_process\n16     sql: >\n17       SELECT\n18         state,\n19         COUNT(*) AS pg_process\n20       FROM pg_stat_activity\n21       WHERE state IS NOT NULL\n22       GROUP BY state\n23       FROM pg_stat_database\n```", "```\ndocker run -p 9560:9560/tcp -v --name postgres-exporter ${PWD}/psql_exporter_config.yml:/psql_exporter_config.yml --rm -itd adonato/query-exporter:latest -- /psql_exporter_config.yml\n```", "```\n# HELP database_errors_total Number of database errors\n# TYPE database_errors_total counter\n# HELP queries_total Number of database queries\n# TYPE queries_total counter\nqueries_total{database=\"pg\",status=\"success\"} 10.0\nqueries_total{database=\"pg\",status=\"error\"} 1.0\n# TYPE queries_created gauge\nqueries_created{database=\"pg\",status=\"success\"} \n1.5795789188074727e+09\nqueries_created{database=\"pg\",status=\"error\"} \n1.57957891880902e+09\n# HELP pg_process Number of PostgreSQL processes with their states\n# TYPE pg_process gauge\npg_process{database=\"pg\",state=\"active\"} 1.0\n```", "```\n45   - job_name: 'postgres-web'\n46     scrape_interval: 5s\n47     static_configs:\n48     - targets: ['0.0.0.0:9560']\n```", "```\n./prometheus --config.file=prometheus.yml\n```", "```\n1 version: '3'\n2\n3 volumes:\n4   testsplunk:\n5   testsplunkindex:\n6\n```", "```\n7 services:\n8   splunk:\n9     hostname: splunk\n10    image: splunk/splunk\n11    environment:\n12      SPLUNK_START_ARGS: --accept-license\n13      SPLUNK_PASSWORD: changeme\n```", "```\n14    volumes:\n15      - ./testsplunk:/opt/splunk/etc\n16      - ./testsplunkindex:/opt/splunk/var\n17    ports:\n18      - \"8000:8000\"\n19      - \"9997:9997\"\n20      - \"8088:8088\"\n```", "```\ndocker-compose up -d\n```", "```\nCreating network \"chapter14_default\" with the default driver\nCreating chapter14_splunk_1 ... done\n```", "```\ndocker run --rm -d --name postgres-test \\\n-e POSTGRES_PASSWORD=docker -p 5432:5432 \\\n--log-driver=splunk \\\n--log-opt splunk-url=http://127.0.0.1:8088 \\\n--log-opt splunk-token=5c051cdb-b1c6-482f-973f-2a8de0d92ed8 \\\n--log-opt splunk-insecureskipverify=true \\\n--log-opt tag=\"{{.Name}}/{{.FullID}}\" \\\npostgres -c log_statement=all \n```", "```\ndocker network create  \\\n--driver=store/weaveworks/net-plugin:2.5.2 \\\n--attachable \\\nwp-network\n```", "```\nmk0pmhpb2gx3f6s00o57j2vd\n```", "```\ndocker volume create -d vieux/sshfs \\\n--name wp-content \\\n-o sshcmd=root@localhost:/tmp \\\n-o password=root \\\n-o port=2222\n```", "```\nwp-content\n```", "```\ndocker run --name mysql -d \\\n-e MYSQL_ROOT_PASSWORD=wordpress \\\n-e MYSQL_DATABASE=wordpress \\\n-e MYSQL_USER=wordpress \\\n-e MYSQL_PASSWORD=wordpress \\\n--network=wp-network \\\nmysql:5.7\n```", "```\ndocker run --name wordpress -d \\\n-v wp-content:/var/www/html/wp-content \\\n-e WORDPRESS_DB_HOST=mysql:3306 \\\n-e WORDPRESS_DB_USER=wordpress \\\n-e WORDPRESS_DB_PASSWORD=wordpress \\\n-e WORDPRESS_DB_NAME=wordpress \\\n--network=wp-network \\\n-p 8080:80 \\\nwordpress\n```", "```\ndocker ps\n```"]