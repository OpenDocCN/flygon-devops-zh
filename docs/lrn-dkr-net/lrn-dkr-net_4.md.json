["```\n$ docker -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock –d &\n\n```", "```\n$ sudo docker -H tcp://192.168.59.134:2375 run --rm swarm create\nUnable to find image 'swarm' locally\nPulling repository swarm\ne12f8c5e4c3b: Download complete\ncf43a42a05d1: Download complete\n42c4e5c90ee9: Download complete\n22cf18566d05: Download complete\n048068586dc5: Download complete\n2ea96b3590d8: Download complete\n12a239a7cb01: Download complete\n26b910067c5f: Download complete\n4fdfeb28bd618291eeb97a2096b3f841\n\n```", "```\n\"4fdfeb28bd618291eeb97a2096b3f841\"\n\n```", "```\n$ docker -H tcp://192.168.59.135:2375 run -d swarm join --addr=192.168.59.135:2375 token:// 4fdfeb28bd618291eeb97a2096b3f841\nUnable to find image 'swarm' locally\nPulling repository swarm\ne12f8c5e4c3b: Download complete\ncf43a42a05d1: Download complete\n42c4e5c90ee9: Download complete\n22cf18566d05: Download complete\n048068586dc5: Download complete\n2ea96b3590d8: Download complete\n12a239a7cb01: Download complete\n26b910067c5f: Download complete\ne4f268b2cc4d896431dacdafdc1bb56c98fed01f58f8154ba13908c7e6fe675b\n\n```", "```\n$ sudo docker -H tcp://192.168.59.134:2375 run -d -p 5001:2375 swarm manage token:// 4fdfeb28bd618291eeb97a2096b3f841\nf06ce375758f415614dc5c6f71d5d87cf8edecffc6846cd978fe07fafc3d05d3\n\n```", "```\n$ sudo docker -H tcp://192.168.59.134:2375 run --rm swarm list \\ token:// 4fdfeb28bd618291eeb97a2096b3f841\n192.168.59.135:2375\n192.168.59.136:2375\n\n```", "```\n$ sudo docker -H tcp://192.168.59.134:5001 info\nContainers: 0\nStrategy: spread\nFilters: affinity, health, constraint, port, dependency\nNodes: 2\nagent-1: 192.168.59.136:2375\n └ Containers: 0\n └ Reserved CPUs: 0 / 8\n └ Reserved Memory: 0 B / 1.023 GiB\n agent-0: 192.168.59.135:2375\n └ Containers: 0\n └ Reserved CPUs: 0 / 8\n └ Reserved Memory: 0 B / 1.023 GiB\n\n```", "```\n$ sudo docker -H tcp://192.168.59.134:5001 run -it --name swarm-ubuntu ubuntu /bin/sh\n\n```", "```\n$ sudo docker -H tcp://192.168.59.134:5001 ps\n\n```", "```\n$ docker-machine create -d virtualbox sample-keystore\nRunning pre-create checks...\nCreating machine...\nWaiting for machine to be running, this may take a few minutes...\nMachine is running, waiting for SSH to be available...\nDetecting operating system of created instance...\nProvisioning created instance...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nTo see how to connect Docker to this machine, run: docker-machine.exe env sample-keystore\n\n```", "```\n$ docker $(docker-machine config sample-keystore) run -d \\\n -p \"8500:8500\" \\\n -h \"consul\" \\\n progrium/consul -server –bootstrap\nUnable to find image 'progrium/consul:latest' locally\nlatest: Pulling from progrium/consul\n3b4d28ce80e4: Pull complete\ne5ab901dcf2d: Pull complete\n30ad296c0ea0: Pull complete\n3dba40dec256: Pull complete\nf2ef4387b95e: Pull complete\n53bc8dcc4791: Pull complete\n75ed0b50ba1d: Pull complete\n17c3a7ed5521: Pull complete\n8aca9e0ecf68: Pull complete\n4d1828359d36: Pull complete\n46ed7df7f742: Pull complete\nb5e8ce623ef8: Pull complete\n049dca6ef253: Pull complete\nbdb608bc4555: Pull complete\n8b3d489cfb73: Pull complete\nc74500bbce24: Pull complete\n9f3e605442f6: Pull complete\nd9125e9e799b: Pull complete\nDigest: sha256:8cc8023462905929df9a79ff67ee435a36848ce7a10f18d6d0faba9306b97274\nStatus: Downloaded newer image for progrium/consul:latest\n1a1be5d207454a54137586f1211c02227215644fa0e36151b000cfcde3b0df7c\n\n```", "```\n$ eval \"$(docker-machine env sample-keystore)\"\n\n```", "```\n$ docker ps\nCONTAINER ID       IMAGE           COMMAND           CREATED       STATUS        PORTS                                 NAMES\n1a1be5d20745   progrium/consul  /bin/start -server  5 minutes ago  Up 5 minutes   53/tcp, 53/udp, 8300-8302/tcp, 8400/tcp, 8301-8302/udp, 0.0.0.0:8500->8500/tcp   cocky_bhaskara\n\n```", "```\n$ docker-machine create -d virtualbox --swarm --swarm-image=\"swarm\" --swarm-master --swarm-discovery=\"consul://$(docker-machine ip sample-keystore):8500\" --engine-opt=\"cluster-store=consul://$(docker-machine ip sample-keystore):8500\" --engine-opt=\"cluster-advertise=eth1:2376\" swarm-master\nRunning pre-create checks...\nCreating machine...\nWaiting for machine to be running, this may take a few minutes...\nMachine is running, waiting for SSH to be available...\nDetecting operating system of created instance...\nProvisioning created instance...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nConfiguring swarm...\nTo see how to connect Docker to this machine, run: docker-machine env swarm-master\n\n```", "```\n$ docker-machine create -d virtualbox --swarm --swarm-image=\"swarm:1.0.0-rc2\" --swarm-discovery=\"consul://$(docker-machine ip sample-keystore):8500\" --engine-opt=\"cluster-store=consul://$(docker-machine ip sample-keystore):8500\" --engine-opt=\"cluster-advertise=eth1:2376\" swarm-node-1\nRunning pre-create checks...\nCreating machine...\nWaiting for machine to be running, this may take a few minutes...\nMachine is running, waiting for SSH to be available...\nDetecting operating system of created instance...\nProvisioning created instance...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nConfiguring swarm...\nTo see how to connect Docker to this machine, run: docker-machine env swarm-node-1\n\n```", "```\n$ docker-machine ls\nNAME            ACTIVE   DRIVER       STATE     URL               SWARM\nsample-keystore   -     virtualbox   Running   tcp://192.168.99.100:2376\nswarm-master      -     virtualbox   Running   tcp://192.168.99.101:2376  swarm-master (master)\nswarm-node-1      -     virtualbox   Running   tcp://192.168.99.102:2376   swarm-master\n\n```", "```\n$ eval $(docker-machine env --swarm swarm-master)\n\n```", "```\n$ docker network create –driver overlay sample-net\n\n```", "```\n$ docker network ls\nNETWORK ID         NAME           DRIVER\n9f904ee27bf5      sample-net      overlay\n7fca4eb8c647       bridge         bridge\nb4234109be9b       none            null\ncf03ee007fb4       host            host\n\n```", "```\n$ eval $(docker-machine env swarm-node-1)\n$ docker network ls\nNETWORK ID        NAME            DRIVER\n7fca4eb8c647      bridge          bridge\nb4234109be9b      none             null\ncf03ee007fb4      host            host\n9f904ee27bf5     sample-net       overlay\n\n```", "```\n$ eval $(docker-machine env swarm-master)\n\n```", "```\n$ docker run -itd --name=os --net=sample-net --env=\"constraint:node==swarm-master\" ubuntu\n\n```", "```\n$ sudo pip install awscli\n\n```", "```\n$ aws configure\nAWS Access Key ID [None]: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nAWS Secret Access Key [None]: YYYYYYYYYYYYYYYYYYYYYYYYYYYY\nDefault region name [None]: us-east-1\nDefault output format [None]: text\n\n```", "```\n$ aws iam create-instance-profile --instance-profile-name Kube\n\n```", "```\n$ aws iam create-role --role-name Test-Role --assume-role-policy-document /root/kubernetes/Test-Role-Trust-Policy.json\n\n```", "```\n$ aws iam add-role-to-instance-profile --role-name Test-Role --instance-profile-name Kube\n\n```", "```\n$ export AWS_DEFAULT_PROFILE=Kube\n\n```", "```\n$ export KUBERNETES_PROVIDER=aws; wget -q -O - https://get.k8s.io | bash\nDownloading kubernetes release v1.1.1 to /home/vkohli/kubernetes.tar.gz\n--2015-11-22 10:39:18--  https://storage.googleapis.com/kubernetes-release/release/v1.1.1/kubernetes.tar.gz\nResolving storage.googleapis.com (storage.googleapis.com)... 216.58.220.48, 2404:6800:4007:805::2010\nConnecting to storage.googleapis.com (storage.googleapis.com)|216.58.220.48|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 191385739 (183M) [application/x-tar]\nSaving to: 'kubernetes.tar.gz'\n100%[======================================>] 191,385,739 1002KB/s   in 3m 7s\n2015-11-22 10:42:25 (1002 KB/s) - 'kubernetes.tar.gz' saved [191385739/191385739]\nUnpacking kubernetes release v1.1.1\nCreating a kubernetes on aws...\n... Starting cluster using provider: aws\n... calling verify-prereqs\n... calling kube-up\nStarting cluster using os distro: vivid\nUploading to Amazon S3\nCreating kubernetes-staging-e458a611546dc9dc0f2a2ff2322e724a\nmake_bucket: s3://kubernetes-staging-e458a611546dc9dc0f2a2ff2322e724a/\n+++ Staging server tars to S3 Storage: kubernetes-staging-e458a611546dc9dc0f2a2ff2322e724a/devel\nupload: ../../../tmp/kubernetes.6B8Fmm/s3/kubernetes-salt.tar.gz to s3://kubernetes-staging-e458a611546dc9dc0f2a2ff2322e724a/devel/kubernetes-salt.tar.gz\nCompleted 1 of 19 part(s) with 1 file(s) remaining\n\n```", "```\nZONE=${KUBE_AWS_ZONE:-us-west-2a}\nMASTER_SIZE=${MASTER_SIZE:-t2.micro}\nMINION_SIZE=${MINION_SIZE:-t2.micro}\nNUM_MINIONS=${NUM_MINIONS:-4}\nAWS_S3_REGION=${AWS_S3_REGION:-us-east-1}\n\n```", "```\n$ mkdir nginx_kube_example\n$ cd nginx_kube_example\n\n```", "```\n$ vi nginx_pod.yaml\n\n```", "```\napiVersion: v1\nkind: ReplicationController\nmetadata:\n name: nginx\nspec:\n replicas: 2\n selector:\n app: nginx\n template:\n metadata:\n name: nginx\n labels:\n app: nginx\n spec:\n containers:\n - name: nginx\n image: nginx\n ports:\n - containerPort: 80\n\n```", "```\n$ kubectl create -f nginx_pod.yaml\n\n```", "```\n$ kubectl get pods\n\n```", "```\nNAME          READY     REASON    RESTARTS   AGE\nnginx-karne   1/1       Running   0          14s\nnginx-mo5ug   1/1       Running   0          14s\n\n```", "```\n$ kubectl get rc\n\n```", "```\nCONTROLLER   CONTAINER(S)   IMAGE(S)   SELECTOR    REPLICAS\nnginx        nginx          nginx      app=nginx   2\n\n```", "```\n$ docker ps\n\n```", "```\nCONTAINER ID        IMAGE                                   COMMAND                CREATED             STATUS              PORTS               NAMES\n1d3f9cedff1d        nginx:latest                            \"nginx -g 'daemon of   41 seconds ago      Up 40 seconds       k8s_nginx.6171169d_nginx-karne_default_5d5bc813-3166-11e5-8256-ecf4bb2bbd90_886ddf56\n0b2b03b05a8d        nginx:latest                            \"nginx -g 'daemon of   41 seconds ago      Up 40 seconds\n\n```", "```\n$ vi nginx_service.yaml\n\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n labels:\n name: nginxservice\n name: nginxservice\nspec:\n ports:\n # The port that this service should serve on.\n - port: 82\n # Label keys and values that must match in order to receive traffic for this service.\n selector:\n app: nginx\n type: LoadBalancer\n\n```", "```\n$kubectl create -f nginx_service.yaml\nservices/nginxservice\n\n```", "```\n$ kubectl get services\n\n```", "```\nNAME           LABELS                                    SELECTOR    IP(S)          PORT(S)\nkubernetes     component=apiserver,provider=kubernetes   <none>      192.168.3.1    443/TCP\nnginxservice   name=nginxservice                         app=nginx   192.168.3.43   82/TCP\n\n```", "```\n# sudo rpm -Uvh http://repos.mesosphere.com/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm\n# sudo yum -y install mesos marathon\n\n```", "```\n# sudo rpm -Uvh http://archive.cloudera.com/cdh4/one-click-install/redhat/6/x86_64/cloudera-cdh-4-0.x86_64.rpm\n# sudo yum -y install zookeeper zookeeper-server\n\n```", "```\n# sudo service zookeeper-server stop\n# sudo service zookeeper-server start\n\n```", "```\n# sudo service mesos-master start\n# sudo service mesos-slave start\n\n```", "```\n# export MASTER=$(mesos-resolve `cat /etc/mesos/zk` 2>/dev/null)\n# mesos help\n# mesos-execute --master=$MASTER --name=\"cluster-test\" --command=\"sleep 40\"\n\n```", "```\n# hit ctrl-z\n# mesos ps --master=$MASTER\n\n```", "```\n# sudo service marathon start\n\n```", "```\n# sudo yum install -y golang git device-mapper-event-libs docker\n# sudo chkconfig docker on\n# sudo service docker start\n# export GOPATH=~/go\n# go get github.com/golang/example/outyet\n# cd $GOPATH/src/github.com/golang/example/outyet\n# sudo docker build -t outyet.\n\n```", "```\n# sudo docker run --publish 6060:8080 --name test --rm outyet\n\n```", "```\n# vi /home/user/outyet.json\n{\n \"id\": \"outyet\",\n \"cpus\": 0.2,\n \"mem\": 20.0,\n \"instances\": 1,\n \"constraints\": [[\"hostname\", \"UNIQUE\", \"\"]],\n \"container\": {\n \"type\": \"DOCKER\",\n \"docker\": {\n \"image\": \"outyet\",\n \"network\": \"BRIDGE\",\n \"portMappings\": [ { \"containerPort\": 8080, \"hostPort\": 0, \"servicePort\": 0, \"protocol\": \"tcp\" }\n ]\n }\n }\n}\n\n# echo 'docker,mesos' | sudo tee /etc/mesos-slave/containerizers\n# sudo service mesos-slave restart\n\n```", "```\n# curl -X POST http://192.168.10.10:8080/v2/apps -d /home/user/outyet.json -H \"Content-type: application/json\"\n\n```", "```\n$ sudo pip install virtualenv\n$ mkdir dcos\n$ cd dcos\n$ curl -O https://downloads.mesosphere.io/dcos-cli/install.sh\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n Dload  Upload   Total   Spent    Left  Speed\n100  3654  100  3654    0     0   3631      0  0:00:01  0:00:01 --:--:--  3635\n$ ls\ninstall.sh\n$ bash install.sh . http://mesos-dco-elasticl-17lqe4oh09r07-1358461817.us-west-1.elb.amazonaws.com\nInstalling DCOS CLI from PyPI...\nNew python executable in /home/vkohli/dcos/bin/python\nInstalling setuptools, pip, wheel...done.\n[core.reporting]: set to 'True'\n[core.dcos_url]: set to 'http://mesos-dco-elasticl-17lqe4oh09r07-1358461817.us-west-1.elb.amazonaws.com'\n[core.ssl_verify]: set to 'false'\n[core.timeout]: set to '5'\n[package.cache]: set to '/home/vkohli/.dcos/cache'\n[package.sources]: set to '[u'https://github.com/mesosphere/universe/archive/version-1.x.zip']'\nGo to the following link in your browser:\nhttps://accounts.mesosphere.com/oauth/authorize?scope=&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code&client_id=6a552732-ab9b-410d-9b7d-d8c6523b09a1&access_type=offline\nEnter verification code: Skipping authentication.\nEnter email address: Skipping email input.\nUpdating source [https://github.com/mesosphere/universe/archive/version-1.x.zip]\nModify your bash profile to add DCOS to your PATH? [yes/no]  yes\nFinished installing and configuring DCOS CLI.\nRun this command to set up your environment and to get started:\nsource ~/.bashrc && dcos help\n\n```", "```\n$ source ~/.bashrc && dcos help\nCommand line utility for the Mesosphere Datacenter Operating System (DCOS). The Mesosphere DCOS is a distributed operating system built around Apache Mesos. This utility provides tools for easy management of a DCOS installation.\nAvailable DCOS commands:\n\n config       Get and set DCOS CLI configuration properties\n help         Display command line usage information\n marathon     Deploy and manage applications on the DCOS\n node         Manage DCOS nodes\n package      Install and manage DCOS packages\n service      Manage DCOS services\n task         Manage DCOS tasks\n\n```", "```\n$ dcos config show package.sources\n[\n \"https://github.com/mesosphere/universe/archive/version-1.x.zip\"\n]\n$ dcos package update\nUpdating source [https://github.com/mesosphere/universe/archive/version-1.x.zip]\n\n$ dcos package search\nNAME       VERSION            FRAMEWORK     SOURCE             DESCRIPTION\narangodb   0.2.1                True     https://github.com/mesosphere/universe/archive/version-1.x.zip   A distributed free and open-source database with a flexible data model for documents, graphs, and key-values. Build high performance applications using a convenient SQL-like query language or JavaScript extensions.\ncassandra  0.2.0-1               True     https://github.com/mesosphere/universe/archive/version-1.x.zip  Apache Cassandra running on Apache Mesos.\nchronos    2.4.0                 True     https://github.com/mesosphere/universe/archive/version-1.x.zip  A fault tolerant job scheduler for Mesos which handles dependencies and ISO8601 based schedules.\nhdfs       0.1.7                 True     https://github.com/mesosphere/universe/archive/version-1.x.zip  Hadoop Distributed File System (HDFS), Highly Available.\nkafka      0.9.2.0               True     https://github.com/mesosphere/universe/archive/version-1.x.zip  Apache Kafka running on top of Apache Mesos.\nmarathon   0.11.1                True     https://github.com/mesosphere/universe/archive/version-1.x.zip  A cluster-wide init and control system for services in cgroups or Docker containers.\nspark      1.5.0-multi-roles-v2  True     https://github.com/mesosphere/universe/archive/version-1.x.zip  Spark is a fast and general cluster computing system for Big Data.\n\n```", "```\n$ dcos package install spark\nNote that the Apache Spark DCOS Service is beta and there may be bugs, incomplete features, incorrect documentation or other discrepancies.\nWe recommend a minimum of two nodes with at least 2 CPU and 2GB of RAM available for the Spark Service and running a Spark job.\nNote: The Spark CLI may take up to 5min to download depending on your connection.\nContinue installing? [yes/no] yes\nInstalling Marathon app for package [spark] version [1.5.0-multi-roles-v2]\nInstalling CLI subcommand for package [spark] version [1.5.0-multi-roles-v2]\n\n```", "```\n$ nano definition.json\n{\n \"container\": {\n \"type\": \"DOCKER\",\n \"docker\": {\n \"image\": \"superguenter/demo-app\"\n }\n },\n \"cmd\":  \"python -m SimpleHTTPServer $PORT\",\n \"id\": \"demo\",\n \"cpus\": 0.01,\n \"mem\": 256,\n \"ports\": [3000]\n}\n\n```", "```\n$ dcos marathon app add definition.json\n$ dcos marathon app list\nID       MEM    CPUS  TASKS  HEALTH  DEPLOYMENT  CONTAINER  CMD\n/demo   256.0   0.01   1/1    ---       ---        DOCKER   python -m SimpleHTTPServer $PORT\n/spark  1024.0  1.0    1/1    1/1       ---        DOCKER   mv /mnt/mesos/sandbox/log4j.properties conf/log4j.properties && ./bin/spark-class org.apache.spark.deploy.mesos.MesosClusterDispatcher --port $PORT0 --webui-port $PORT1 --master mesos://zk://master.mesos:2181/mesos --zk master.mesos:2181 --host $HOST --name spark\n\n```", "```\n$ dcos marathon app update --force demo instances=3\nCreated deployment 28171707-83c2-43f7-afa1-5b66336e36d7\n$ dcos marathon deployment list\nAPP    ACTION  PROGRESS  ID\n/demo  scale     0/1     28171707-83c2-43f7-afa1-5b66336e36d7\n\n```"]