["```\ngit clone https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Azure---Second-Edition Hands-On-Kubernetes-on-Azure\ncd Hands-On-Kubernetes-on-Azure/Chapter03/\n```", "```\nkubectl apply -f redis-master-deployment.yaml\n```", "```\n1 apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2\n2 kind: Deployment\n3 metadata:\n4   name: redis-master\n5   labels:\n6     app: redis\n7 spec:\n8   selector:\n9     matchLabels:\n10      app: redis\n11      role: master\n12      tier: backend\n13  replicas: 1\n14  template:\n15    metadata:\n16      labels:\n17        app: redis\n18        role: master\n19        tier: backend\n20    spec:\n21      containers:\n22      - name: master\n23        image: k8s.gcr.io/redis:e2e # or just image: redis\n24        resources:\n25          requests:\n26            cpu: 100m\n27            memory: 100Mi\n28        ports:\n29        - containerPort: 6379\n```", "```\nkubectl get all\n```", "```\nkubectl describe deployment/redis-master\n```", "```\nkubectl delete deployment/redis-master\n```", "```\ndeployment.extensions \"redis-master\" deleted\n```", "```\nmaxmemory 2mb\nmaxmemory-policy allkeys-lru\n```", "```\nkubectl create configmap example-redis-config --from-file=redis-config\n```", "```\nconfigmap/example-redis-config created\n```", "```\nkubectl describe configmap/example-redis-config\n```", "```\nkubectl delete configmap/example-redis-config\n```", "```\napiVersion: v1\ndata:\n  redis-config: |- \n    maxmemory 2mb\n    maxmemory-policy allkeys-lru\nkind: ConfigMap\nmetadata:\n  name: example-redis-config\n  namespace: default\n```", "```\nkubectl create -f example-redis-config.yaml\n```", "```\nconfigmap/example-redis-config created\n```", "```\nkubectl describe configmap/example-redis-config\n```", "```\nName:           example-redis-config\nNamespace:      default\nLabels:         <none>\nAnnotations:    <none>\nData\n====\nredis-config:\n----\nmaxmemory 2mb\nmaxmemory-policy allkeys-lru\nEvents:\t<none>\n```", "```\n1 apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2\n2  kind: Deployment\n3  metadata:\n4    name: redis-master\n5    labels:\n6      app: redis\n7  spec:\n8    selector:\n9      matchLabels:\n10       app: redis\n11       role: master\n12       tier: backend\n13   replicas: 1\n14   template:\n15     metadata:\n16       labels:\n17         app: redis\n18         role: master\n19         tier: backend\n20     spec:\n21       containers:\n22       - name: master\n23         image: k8s.gcr.io/redis:e2e\n24         command:\n25         - redis-server\n26         - \"/redis-master/redis.conf\"\n27         env:\n28         - name: MASTER\n29           value: \"true\"\n30         volumeMounts:\n31         - mountPath: /redis-master\n32           name: config\n33         resources:\n34           requests:\n35             cpu: 100m\n36             memory: 100Mi\n37         ports:\n38         - containerPort: 6379\n39       volumes:\n40         - name: config\n41           configMap:\n42             name: example-redis-config\n43             items:\n44             - key: redis-config\n45               path: redis.conf\n```", "```\nkubectl create -f redis-master-deployment_Modified.yml\n```", "```\ndeployment.apps/redis-master created\n```", "```\nkubectl get pods\n```", "```\nkubectl exec -it redis-master-<pod-id> redis-cli\n127.0.0.1:6379&gt; CONFIG GET maxmemory\n  1) \"maxmemory\" 2) \"2097152\"\n127.0.0.1:6379&gt; CONFIG GET maxmemory-policy\n  \"maxmemory-policy\"\n  \"allkeys-lru\" 127.0.0.1:6379&gt;exit\n```", "```\nkubectl apply -f redis-master-service.yaml \n```", "```\n1   apiVersion: v1\n2   kind: Service\n3   metadata:\n4     name: redis-master\n5     labels:\n6       app: redis\n7       role: master\n8       tier: backend\n9   spec:\n10   ports:\n11   - port: 6379\n12     targetPort: 6379\n13    selector:\n14      app: redis\n15      role: master\n16      tier: backend\n```", "```\nkubectl get service\n```", "```\nkubectl get pods\n#note the name of your redis-master pod\nkubectl exec -it redis-master-<pod-id> bash\nping redis-master\n```", "```\nkubectl apply -f redis-slave-deployment.yaml\n```", "```\nkubectl get all\n```", "```\n1   apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2\n2   kind: Deployment\n3   metadata:\n4     name: redis-slave\n5     labels:\n6       app: redis\n7   spec:\n8     selector:\n9       matchLabels:\n10       app: redis\n11       role: slave\n12       tier: backend\n13   replicas: 2\n14   template:\n15     metadata:\n16       labels:\n17         app: redis\n18         role: slave\n19         tier: backend\n20     spec:\n21       containers:\n22       - name: slave\n23         image: gcr.io/google_samples/gb-redisslave:v1\n24         resources:\n25           requests:\n26             cpu: 100m\n27             memory: 100Mi\n28         env:\n29         - name: GET_HOSTS_FROM\n30           value: dns\n31           # Using 'GET_HOSTS_FROM=dns' requires your cluster to\n32           # provide a dns service. As of Kubernetes 1.3, DNS is a built-in\n33           # service launched automatically. However, if the cluster you are using\n34           # does not have a built-in DNS service, you can instead\n35           # access an environment variable to find the master\n36           # service's host. To do so, comment out the 'value: dns' line above, and\n37           # uncomment the line below:\n38           # value: env\n39         ports:\n40         - containerPort: 6379\n```", "```\nkubectl apply -f redis-slave-service.yaml\n```", "```\nkubectl get service\n```", "```\nkubectl apply -f frontend-deployment.yaml\n```", "```\nkubectl get pods\n```", "```\n1   apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2 kind: Deployment\n2   metadata:\n3     name: frontend\n4     labels:\n5       app: guestbook\n6   spec:\n7     selector:\n8       matchLabels:\n9         app: guestbook\n10        tier: frontend\n11    replicas: 3\n12    template:\n13      metadata:\n14        labels:\n15          app: guestbook\n16          tier: frontend\n17      spec:\n18        containers:\n19        - name: php-redis\n20          image: gcr.io/google-samples/gb-frontend:v4\n21          resources:\n22            requests:\n23              cpu: 100m\n24              memory: 100Mi\n25          env:\n26          - name: GET_HOSTS_FROM\n27            value: dns\n28            # Using GET_HOSTS_FROM=dns requires your cluster to\n29            # provide a dns service. As of Kubernetes 1.3, DNS is a built-in\n30            # service launched automatically. However, if the cluster you are using\n31            # does not have a built-in DNS service, you can instead\n32            # access an environment variable to find the master\n33            # service's host. To do so, comment out the 'value: dns' line above, and\n34            # uncomment the line below:\n35            # value: env\n36          ports:\n37          - containerPort: 80\n```", "```\n1   apiVersion: v1\n2   kind: Service\n3   metadata:\n4     name: frontend\n5     labels:\n6       app: guestbook\n7       tier: frontend\n8   spec:\n9     # comment or delete the following line if you want to use a LoadBalancer\n10    # type: NodePort # line commented out\n11    # if your cluster supports it, uncomment the following to automatically create\n12    # an external load-balanced IP for the frontend service.\n13    type: LoadBalancer # line uncommented\n14    ports:\n15    - port: 80\n16    selector:\n17      app: guestbook\n18      tier: frontend\n```", "```\nkubectl create -f frontend-service.yaml\n```", "```\nkubectl get service\n```", "```\nkubectl delete deployment frontend redis-master redis-slave\nkubectl delete service frontend redis-master redis-slave\n```", "```\nhelm repo add stable https://kubernetes-charts.storage.googleapis.com/\n```", "```\nhelm install handsonakswp stable/wordpress\n```", "```\nkubectl get pods\n```", "```\nkubectl get statefulsets\n```", "```\nkubectl get statefulset -o yaml > mariadbss.yaml\ncode mariadbss.yaml\n```", "```\n1   apiVersion: v1\n2   items:\n3   - apiVersion: apps/v1\n4     kind: StatefulSet\n...\n106           volumeMounts:\n107           - mountPath: /bitnami/mariadb\n108             name: data\n...           \n128     volumeClaimTemplates:\n129     - metadata:\n130         creationTimestamp: null\n131         labels:\n132           app: mariadb\n133           component: master\n134           heritage: Helm\n135           release: handsonakswp\n136         name: data\n137       spec:\n138         accessModes:\n139         - ReadWriteOnce\n140         resources:\n141           requests:\n142             storage: 8Gi\n143         volumeMode: Filesystem\n...\n```", "```\nkubectl get storageclass\n```", "```\nkubectl get pvc\n```", "```\nhelm ls\n```", "```\nhelm status handsonakswp\n```", "```\nkubectl get all\n```", "```\nhelm delete handsonakswp\n```", "```\nkubectl delete pvc --all\n```"]