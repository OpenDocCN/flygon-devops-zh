["```\naz aks nodepool scale --cluster-name handsonaks \\\n  -g rg-handsonaks --name agentpool--node-count 1\n```", "```\nEXISTINGAKSNAME=\"handsonaks\"\nNEWAKSNAME=\"handsonaks-aad\"\nRGNAME=\"rg-handsonaks\"\nLOCATION=\"westus2\"\nTENANTID=$(az account show --query tenantId -o tsv)\n```", "```\n# Get SP from existing cluster and create new password\nRBACSP=$(azaks show -n $EXISTINGAKSNAME -g $RGNAME \\\n  --query servicePrincipalProfile.clientId -o tsv)\nRBACSPPASSWD=$(openssl rand -base64 32)\naz ad sp credential reset --name $RBACSP \\\n  --password $RBACSPPASSWD --append\n```", "```\nserverApplicationId=$(az ad app create \\\n    --display-name \"${NEWAKSNAME}Server\" \\\n    --identifier-uris \"https://${NEWAKSNAME}Server\" \\\n    --query appId -o tsv)\n```", "```\naz ad app update --id $serverApplicationId --set groupMembershipClaims=All\naz ad sp create --id $serverApplicationId\nserverApplicationSecret=$(az ad sp credential reset \\\n    --name $serverApplicationId \\\n    --credential-description \"AKSPassword\" \\\n    --query password -o tsv)\n```", "```\naz ad app permission add \\\n--id $serverApplicationId \\\n    --api 00000003-0000-0000-c000-000000000000 \\\n    --api-permissions e1fe6dd8-ba31-4d61-89e7-88639da4683d=Scope \\\n    06da0dbc-49e2-44d2-8312-53f166ab848a=Scope \\\n    7ab1d382-f21e-4acd-a863-ba3e13f7da61=Role\naz ad app permission grant --id $serverApplicationId\\\n    --api 00000003-0000-0000-c000-000000000000\n```", "```\nclientApplicationId=$(az ad app create \\\n    --display-name \"${NEWAKSNAME}Client\" \\\n    --native-app \\\n    --reply-urls \"https://${NEWAKSNAME}Client\" \\\n    --query appId -o tsv)\naz ad sp create --id $clientApplicationId\noAuthPermissionId=$(az ad app show --id $serverApplicationId\\\n--query \"oauth2Permissions[0].id\" -o tsv)\naz ad app permission add --id $clientApplicationId \\\n--api$serverApplicationId --api-permissions \\\n$oAuthPermissionId=Scope\naz ad app permission grant --id $clientApplicationId\\\n--api $serverApplicationId\n```", "```\nazaks create \\\n    --resource-group $RGNAME \\\n    --name $NEWAKSNAME \\\n    --location $LOCATION\n    --node-count 2 \\\n    --node-vm-size Standard_D1_v2 \\\n    --generate-ssh-keys \\\n    --aad-server-app-id $serverApplicationId \\\n    --aad-server-app-secret $serverApplicationSecret \\\n    --aad-client-app-id $clientApplicationId \\\n    --aad-tenant-id $TENANTID \\\n    --service-principal $RBACSP \\\n    --client-secret $RBACSPPASSWD\n```", "```\naz ad group show -g 'kubernetes-admins' --query objectId -o tsv\n```", "```\naz aks get-credentials -n handsonaksad -g rg-handsonaks --admin\n```", "```\nkubectl create ns no-access\nkubectl create ns delete-access\n```", "```\nkubectl create -f azure-vote.yaml -n no-access\nkubectl create -f azure-vote.yaml -n delete-access\n```", "```\n1   apiVersion: rbac.authorization.k8s.io/v1\n2   kind: ClusterRole\n3   metadata:\n4     name: readOnly\n5   rules:\n6   - apiGroups: [\"\"]\n7     resources: [\"pods\"]\n8     verbs: [\"get\", \"watch\", \"list\"]\n```", "```\nkubectl create -f clusterRole.yaml\n```", "```\n1   apiVersion: rbac.authorization.k8s.io/v1\n2   kind: ClusterRoleBinding\n3   metadata:\n4     name: readOnlyBinding\n5   roleRef:\n6     kind: ClusterRole\n7     name: readOnly\n8     apiGroup: rbac.authorization.k8s.io\n9   subjects:\n10  - kind: Group\n11   apiGroup: rbac.authorization.k8s.io\n12   name: \"<group-id>\"\n```", "```\nkubectl create -f clusterRoleBinding.yaml\n```", "```\n1   apiVersion: rbac.authorization.k8s.io/v1\n2   kind: Role\n3   metadata:\n4     name: deleteRole\n5     namespace: delete-access\n6   rules:\n7   - apiGroups: [\"\"]\n8     resources: [\"pods\"]\n9     verbs: [\"delete\"]\n```", "```\nkubectl create -f role.yaml\n```", "```\n1   apiVersion: rbac.authorization.k8s.io/v1\n2   kind: RoleBinding\n3   metadata:\n4     name: deleteBinding\n5     namespace: delete-access\n6   roleRef:\n7     kind: Role\n8     name: deleteRole\n9     apiGroup: rbac.authorization.k8s.io\n10  subjects:\n11  - kind: User\n12    apiGroup: rbac.authorization.k8s.io\n13    name: \"<user e-mail address>\"\n```", "```\nkubectl create -f roleBinding.yaml\n```", "```\naz aks get-credentials -n handsonaksaad -g rg-handsonaks\n```", "```\nkubectl get nodes\n```", "```\nkubectl get pods -n no-access\nkubectl get pods -n delete-access\n```", "```\nkubectl delete pod --all -n no-access\nkubectl delete pod --all -n delete-access\n```", "```\naz aks delete -n handsonaksaad -g rg-handsonaks\naz aks get-credentials -n handsonaks -g rg-handsonaks\naz aks nodepool scale --cluster-name handsonaks \\\n  -g rg-handsonaks --name agentpool --node-count 2\n```", "```\necho https://my-secret-url-location.topsecret.com \\\n> secreturl.txt\n```", "```\necho 'superSecretToken' > secrettoken.txt\n```", "```\nkubectl create secret generic myapi-url-token \\\n--from-file=./secreturl.txt --from-file=./secrettoken.txt\n```", "```\nsecret/myapi-url-token created\n```", "```\nkubectl get secrets\n```", "```\nkubectl describe secrets/myapi-url-token\n```", "```\nkubectl get -o yaml secrets/myapi-url-token\n```", "```\necho 'c3VwZXJTZWNyZXRUb2tlbgo=' | base64 -d\n```", "```\necho 'aHR0cHM6Ly9teS1zZWNyZXQtdXJsLWxvY2F0aW9uLnRvcHNlY3JldC5jb20K'| base64 -d\n```", "```\necho 'superSecretToken' | base64\n```", "```\nc3VwZXJTZWNyZXRUb2tlbgo=\n```", "```\necho 'https://my-secret-url-location.topsecret.com' | base64\n```", "```\naHR0cHM6Ly9teS1zZWNyZXQtdXJsLWxvY2F0aW9uLnRvcHNlY3JldC5jb20K\n```", "```\n1   apiVersion: v1\n2   kind: Secret\n3   metadata:\n4     name: myapiurltoken-yaml\n5   type: Opaque\n6   data:\n7     url: aHR0cHM6Ly9teS1zZWNyZXQtdXJsLWxvY2F0aW9uLnRvcHNlY3JldC5jb20K\n8     token: c3VwZXJTZWNyZXRUb2tlbgo=\n```", "```\nkubectl create -f myfirstsecret.yaml\n```", "```\nkubectl get secrets\n```", "```\nkubectl create secret generic myapiurltoken-literal \\\n--from-literal=token='superSecretToken' \\\n--from-literal=url=https://my-secret-url-location.topsecret.com\n```", "```\nkubectl get secrets\n```", "```\nkubectl create secret docker-registry <secret-name> \\\n--docker-server=<your- registry-server> \\\n--docker-username=<your-name> \\\n--docker-password=<your-pword> --docker-email=<your-email>\n```", "```\nkubectl create secret tls <secret-name> --key <ssl.key> --cert <ssl.crt>\n```", "```\n1   apiVersion: v1\n2   kind: Pod\n3   metadata:\n4     name: secret-using-env\n5   spec:\n6     containers:\n7     - name: nginx\n8       image: nginx\n9       env:\n10        - name: SECRET_URL\n11          valueFrom:\n12            secretKeyRef:\n13              name: myapi-url-token\n14              key: secreturl.txt\n15        - name: SECRET_TOKEN\n16          valueFrom:\n17            secretKeyRef:\n18              name: myapi-url-token\n19              key: secrettoken.txt\n20    restartPolicy: Never\n```", "```\nkubectl create -f pod-with-env-secrets.yaml\n```", "```\nkubectl exec -it secret-using-env sh\necho $SECRET_URL\necho $SECRET_TOKEN\n```", "```\n1   apiVersion: v1\n2   kind: Pod\n3   metadata:\n4     name: secret-using-volume\n5   spec:\n6     containers:\n7     - name: nginx\n8       image: nginx\n9       volumeMounts:\n10      - name: secretvolume\n11        mountPath: \"/etc/secrets\"\n12        readOnly: true\n13    volumes:\n14    - name: secretvolume\n15      secret:\n16        secretName: myapi-url-token\n```", "```\nkubectl create -f pod-with-vol-secret.yaml\n```", "```\nkubectl exec -it secret-using-volume bash\ncd /etc/secrets/ \ncat secreturl.txt\ncat /etc/secrets/secrettoken.txt \n```", "```\nkubectl describe pod secret-using-env | grep Node\n```", "```\nkubectl describe pod secret-using-env | grep 'docker://'\n```", "```\nINSTANCE=<provide instance number>\nDOCKERID=<provide Docker ID>\nVMSS=$(az vmss list --query '[].name' -o tsv)\nRGNAME=$(az vmss list --query '[].resourceGroup' -o tsv)\naz vmss run-command invoke -g $RGNAME -n $VMSS --command-id \\\nRunShellScript --instance-id $INSTANCE --scripts \\\n\"docker inspect -f '{{ .Config.Env }}' $DOCKERID\" \\\n-o yaml| grep SECRET\n```", "```\nkubectl delete pod --all\nkubectl delete secret myapi-url-token \\\nmyapiurltoken-literal myapiurltoken-yaml\n```", "```\nkubectl create -f kv-flexvol-installer.yaml\n```", "```\nAPPID=$(az ad app create \\\n    --display-name \"flex\" \\\n    --identifier-uris \"https://flex\" \\\n    --query appId -o tsv)\naz ad sp create --id $APPID\nAPPPASSWD=$(az ad sp credential reset \\\n    --name $APPID \\\n    --credential-description \"KeyVault\" \\\n    --query password -o tsv)\n```", "```\nkubectl create secret generic kvcreds \\\n--from-literal=clientid=$APPID \\\n--from-literal=clientsecret=$APPPASSWD --type=azure/kv\n```", "```\nKVNAME=handsonaks-kv\naz keyvault set-policy -n $KVNAME --key-permissions \\\n  get --spn $APPID\naz keyvault set-policy -n $KVNAME --secret-permissions \\\n  get --spn $APPID\naz keyvault set-policy -n $KVNAME --certificate-permissions \\\n  get --spn $APPID\n```", "```\n1   apiVersion: v1\n2   kind: Pod\n3   metadata:\n4     name: nginx-secret-flex\n5   spec:\n6     containers:\n7     - name: nginx\n8       image: nginx\n9       volumeMounts:\n10      - name: test\n11        mountPath: /etc/secret/\n12        readOnly: true\n13    volumes:\n14    - name: test\n15      flexVolume:\n16        driver: \"azure/kv\"\n17        secretRef:\n18          name: kvcreds\n19        options:\n20          keyvaultname: <keyvault name>\n21          keyvaultobjectnames: k8s-secret-demo\n22          keyvaultobjecttypes: secret\n23          tenantid: \"<tenant ID>\"\n```", "```\nkubectl create -f pod_secret_flex.yaml\n```", "```\nkubectl exec -it nginx-secret-flex bash\ncd /etc/secret\ncat k8s-secret-demo\n```", "```\nkubectl delete -f pod_secret_flex.yaml\nkubectl delete -f kv-flexvol-installer.yaml\nkubectl delete secret kvcreds\n```", "```\ncd ~\ncurl -L https://istio.io/downloadIstio | sh -\n```", "```\nls | grep istio \n```", "```\nexport PATH=\"$PATH:~/istio-<release-number>/bin\"\n```", "```\nistioctl verify-install\n```", "```\nistioctl manifest apply --set profile=demo\n```", "```\nkubectl get svc -n istio-system\n```", "```\nkubectl label namespace default istio-injection=enabled\n```", "```\nkubectl create -f bookinfo.yaml\n```", "```\nkubectl get pods\n```", "```\nkubectl describe pods/productpage-v1-<pod-ID>\n```", "```\nkubectl create ns foo\nkubectl apply -f <(istioctl kube-inject \\\n-f httpbin.yaml) -n foo \nkubectl apply -f <(istioctl kube-inject \\\n-f sleep.yaml) -n foo\nkubectl create ns bar\nkubectl apply -f <(istioctl kube-inject \\\n-f httpbin.yaml) -n bar\nkubectl apply -f <(istioctl kube-inject \\\n-f sleep.yaml) -n bar\nkubectl create ns legacy\nkubectl apply -f httpbin.yaml -n legacy \nkubectl apply -f sleep.yaml -n legacy\n```", "```\nbash test_mtls.sh\n```", "```\nkubectl get policies.authentication.istio.io \\\n--all-namespaces\nkubectl get meshpolicies.authentication.istio.io\n```", "```\nkubectl get destinationrules.networking.istio.io \\\n--all-namespaces -o yaml | grep \"host:\"\n```", "```\n1   apiVersion: authentication.istio.io/v1alpha1\n2   kind: MeshPolicy\n3   metadata:\n4     name: default\n5   spec:\n6     peers:\n7     - mtls: {}\n```", "```\nkubectl apply -f mtls_policy.yaml\n```", "```\nbash test_mtls.sh\n```", "```\n1   apiVersion: networking.istio.io/v1alpha3\n2   kind: DestinationRule\n3   metadata:\n4     name: default\n5     namespace: istio-system\n6   spec:\n7     host: \"*.local\"\n8     trafficPolicy:\n9       tls:\n10        mode: ISTIO_MUTUAL\n```", "```\nkubectl create -f destinationRule.yaml\n```", "```\nbash test_mtls.sh\n```", "```\nistioctl manifest generate --set profile=demo | kubectl delete -f -\nfor NS in \"foo\" \"bar\" \"legacy\"\ndo\nkubectl delete -f sleep.yaml -n $NS\nkubectl delete -f httpbin.yaml -n $NS\ndone\nkubectl delete -f bookinfo.yaml\n```"]