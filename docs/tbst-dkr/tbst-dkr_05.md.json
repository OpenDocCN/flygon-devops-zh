["```\n$ docker search centos\n\n```", "```\n$ sudo docker login \n\nUsername: username \nPassword: \nEmail: email@blank.com \nWARNING:login credentials saved in /home/username/.dockercfg. \nAccount created. Please use the confirmation link we sent to your e-mail to activate it.\n\n```", "```\n$ docker logout\n\n```", "```\nFROM debian:wheezy \nRUN apt-get update && apt-get install -y cowsay fortune \n\n```", "```\n$ docker build -t test/cowsay-dockerfile . \nSending build context to Docker daemon 2.048 kB \nSending build context to Docker daemon \nStep 0 : FROM debian:wheezy \nwheezy: Pulling from debian \n048f0abd8cfb: Pull complete \nfbe34672ed6a: Pull complete \nDigest: sha256:50d16f4e4ca7ed24aca211446a2ed1b788ab5e3e3302e7fcc11590039c3ab445 \nStatus: Downloaded newer image for debian:wheezy \n ---> fbe34672ed6a \nStep 1 : RUN apt-get update && apt-get install -y cowsay fortune \n ---> Running in ece42dc9cffe\n\n```", "```\n$ docker images\nREPOSITORY                  TAG                 IMAGE ID\nCREATED             VIRTUAL SIZE\ntest/cowsay-dockerfile      latest              c1014a025b02        33\nseconds ago      126.9 MB\ndebian                      wheezy              fbe34672ed6a        2\nweeks ago         84.92 MB\nvkohli/vca-iot-deployment   latest              35c98aa8a51f        8\nmonths ago        501.3 MB\nvkohli/vca-cli              latest              d718bbdc304b        9\nmonths ago        536.6 MB\n\n```", "```\n$ docker tag c1014a025b02 username/cowsay-dockerfile\n\n```", "```\n$ sudo docker push username/cowsay-dockerfile \nThe push refers to a repository [username/cowsay-dockerfile] (len: 1) \nd94fdd926b02: Image already exists \naccbaf2f09a4: Image successfully pushed \naa354fc0b2b2: Image successfully pushed \n3a94f42115fb: Image successfully pushed \n7771ee293830: Image successfully pushed \nfa81ed084842: Image successfully pushed \ne04c66a223c4: Image successfully pushed \n7e2c5c55ef2c: Image successfully pushed\n\n```", "```\n$ docker run -p 5000:5000 registry\n\n```", "```\n$ docker tag username/cowsay-dockerfile localhost:5000/cowsay-dockerfile\n\n```", "```\n$ docker push localhost:5000/cowsay-dockerfile\n\n```", "```\nSending image list \nPushing repository localhost:5000/cowsay-dockerfile (1 tags) \ne118faab2e16: Image successfully pushed \n7e2c5c55ef2c: Image successfully pushed \ne04c66a223c4: Image successfully pushed \nfa81ed084842: Image successfully pushed \n7771ee293830: Image successfully pushed \n3a94f42115fb: Image successfully pushed \naa354fc0b2b2: Image successfully pushed \naccbaf2f09a4: Image successfully pushed \nd94fdd926b02: Image successfully pushed \nPushing tag for rev [d94fdd926b02] on {http://localhost:5000/v1/repositories/ cowsay-dockerfile/tags/latest}\n\n```", "```\n$ docker pull Ubuntu \nlatest: Pulling from ubuntu \ndd25ab30afb3: Pull complete \na83540abf000: Pull complete \n630aff59a5d5: Pull complete \ncdc870605343: Pull complete\n\n```", "```\n$ docker run -t -i ubuntu /bin/bash \nroot@3fa633c2e9e6:/# ls \nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root \nrun  sbin  srv  sys  tmp  usr  var \nroot@3fa633c2e9e6:/# touch sample \nroot@3fa633c2e9e6:/# ls \nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root \nrun  sample  sbin  srv  sys  tmp  usr  var\n\n```", "```\n$  docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED\n         STATUS              PORTS               NAMES\n3fa633c2e9e6        ubuntu              \"/bin/bash\"         45 seconds\nago      Up 44 seconds                           prickly_sammet\n$ docker export prickly_sammet | gzip > ubuntu.tar.gz\n\n```", "```\n$ gunzip -c ubuntu.tar.gz | docker import - ubuntu-sample \n4411d1d3001702b2304d5ebf87f122ef80b463fd6287f3de4e631c50efa01369\n\n```", "```\n$ docker images\nREPOSITORY                   TAG                 IMAGE ID  CREATED\nIRTUAL SIZE\nubuntu-sample                    latest               4411d1d30017      20 seconds\ngo    108.8 MB\n$ docker run -i -t ubuntu-sample /bin/bash\nroot@7fa063bcc0f4:/# ls\nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root run  sample\nbin  srv  sys  tmp  usr  var\n\n```", "```\n$ docker save ubuntu | gzip > ubuntu-bundle.tar.gz\n\n```", "```\n$ gunzip -c ubuntu-bundle.tar.gz | docker load\n\n```", "```\n$ docker run -i -t ubuntu /bin/bash \nroot@9cdb362f7561:/# ls \nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root \nrun  sbin  srv  sys  tmp  usr  var \nroot@9cdb362f7561:/#\n\n```", "```\n$ sudo apt install notary \nReading package lists... Done \nBuilding dependency tree        \nReading state information... Done \n\nThe following NEW packages will be installed: \n  Notary \nupgraded, 1 newly installed, 0 to remove and 83 not upgraded. \nNeed to get 4,894 kB of archives. \nAfter this operation, 22.9 MB of additional disk space will be used. \n...\n\n```", "```\n$ git clone https://github.com/docker/notary.git \nCloning into 'notary'... \nremote: Counting objects: 15827, done. \nremote: Compressing objects: 100% (15/15), done. \n\n$ docker-compose build \nmysql uses an image, skipping \nBuilding signer \nStep 1 : FROM golang:1.6.1-alpine \n\n  $ docker-compose up -d \n$ mkdir -p ~/.notary && cp cmd/notary/config.json cmd/notary/root-ca.crt ~/.notary\n\n```", "```\n$ docker images\nREPOSITORY                  TAG                 IMAGE ID\nCREATED             VIRTUAL SIZE\ntest/cowsay-dockerfile      latest              c1014a025b02        33\nseconds ago      126.9 MB\ndebian                      wheezy              fbe34672ed6a        2\nweeks ago         84.92 MB\nvkohli/vca-iot-deployment   latest              35c98aa8a51f        8\nmonths ago        501.3 MB\nvkohli/vca-cli              latest              d718bbdc304b        9\nmonths ago        536.6 MB\n$ docker tag test/cowsay-dockerfile username/cowsay-dockerfile\n$ docker push username/cowsay-dockerfile:latest\nThe push refers to a repository [docker.io/username/cowsay-dockerfile]\nbbb8723d16e2: Pushing 24.08 MB/42.01 MB\n\n```", "```\n$ notary -s https://notary.docker.io -d ~/.docker/trust list docker.io/vkohli/cowsay-dockerfile:latest \n* fatal: no trust data available\n\n```", "```\n$ docker push vkohli/cowsay-dockerfile:latest \nThe push refers to a repository [docker.io/vkohli/cowsay-dockerfile] \nbbb8723d16e2: Layer already exists  \n5f70bf18a086: Layer already exists  \na25721716984: Layer already exists  \nlatest: digest: sha256:0fe0af6e0d34217b40aee42bc21766f9841f4dc7a341d2edd5ba0c5d8e45d81c size: 2609 \nSigning and pushing trust metadata \nYou are about to create a new root signing key passphrase. This passphrase \nwill be used to protect the most sensitive key in your signing system. Please \nchoose a long, complex passphrase and be careful to keep the password and the \nkey file itself secure and backed up. It is highly recommended that you use a \npassword manager to generate the passphrase and keep it safe. There will be no \nway to recover this key. You can find the key in your config directory. \nEnter passphrase for new root key with ID f94af29:\n\n```", "```\n$ notary -s https://notary.docker.io -d ~/.docker/trust list docker.io/vkohli/cowsay-dockerfile:latest\nNAME                                 DIGEST                                SIZE\nBYTES)    ROLE\n----------------------------------------------------------------------------------\n-------------------\nlatest     0fe0af6e0d34217b40aee42bc21766f9841f4dc7a341d2edd5ba0c5d8e45d81c\n1374           targets\n\n```", "```\n$ docker-machine create -d virtualbox --virtualbox-memory \n        \"2000\" --virtualbox-disk-size \"5000\" node1 \n        Running pre-create checks... \n        Creating machine... \n        (node1) Copying /Users/vkohli/.docker/machine/cache/\n        boot2docker.iso to /Users/vkohli/.docker/machine/\n        machines/node1/boot2docker.iso... \n        (node1) Creating VirtualBox VM... \n        (node1) Creating SSH key... \n        (node1) Starting the VM... \n        (node1) Check network to re-create if needed... \n        (node1) Waiting for an IP... \n        Waiting for machine to be running, this may take a few minutes... \n        Detecting operating system of created instance... \n        Waiting for SSH to be available... \n        Detecting the provisioner... \n        Provisioning with boot2docker... \n        Copying certs to the local machine directory... \n        Copying certs to the remote machine... \n        Setting Docker configuration on the remote daemon... \n        Checking connection to Docker... \n        Docker is up and running! \n        To see how to connect your Docker Client to the \n        Docker Engine running on this virtual machine, run: \n        docker-machine env node1\n\n```", "```\n        $ docker-machine create -d virtualbox --virtualbox-memory \n        \"2000\" node2 \n        Running pre-create checks... \n\n        Creating machine... \n        (node2) Copying /Users/vkohli/.docker/machine/cache/boot2docker.iso \n        to /Users/vkohli/.docker/machine/machines/node2/\n        boot2docker.iso... \n        (node2) Creating VirtualBox VM... \n        (node2) Creating SSH key... \n        (node2) Starting the VM... \n        (node2) Check network to re-create if needed... \n        (node2) Waiting for an IP... \n        Waiting for machine to be running, this may take a few minutes... \n        Detecting operating system of created instance... \n        Waiting for SSH to be available... \n        Detecting the provisioner... \n        Provisioning with boot2docker... \n        Copying certs to the local machine directory... \n        Copying certs to the remote machine... \n        Setting Docker configuration on the remote daemon... \n        Checking connection to Docker... \n        Docker is up and running! \n        To see how to connect your Docker Client to the \n        Docker Engine running on this virtual machine, \n        run: docker-machine env node2\n\n```", "```\n        $ docker-machine env node1\n        export DOCKER_TLS_VERIFY=\"1\"\n        export DOCKER_HOST=\"tcp://192.168.99.100:2376\"\n        export DOCKER_CERT_PATH=\"/Users/vkohli/.docker/machine/machines/node1\"\n        export DOCKER_MACHINE_NAME=\"node1\"\n        # Run this command to configure your shell:\n        # eval $(docker-machine env node1)\n        $ eval $(docker-machine env node1)\n        $ docker-machine ls\nNAME    ACTIVE   DRIVER       STATE    URL            SWARM\n        DOCKER  ERRORS\nnode1   *        virtualbox   Running  tcp://192.168.99.100:2376\n        1.11.1  \n        node2   -        virtualbox   Running  tcp://192.168.99.101:2376                   v1.11.1  \n\n```", "```\n$ docker run --rm -it -v /var/run/docker.sock:/var/run\n        /docker.sock --name ucp docker/ucp install -i --swarm-port \n        3376 --host-address $(docker-machine ip node1) \n\n        Unable to find image 'docker/ucp:latest' locally \n        latest: Pulling from docker/ucp \n        ... \n        Please choose your initial UCP admin password:  \n        Confirm your initial password:  \n        INFO[0023] Pulling required images... (this may take a while)  \n        WARN[0646] None of the hostnames we'll be using in the UCP \n        certificates [node1 127.0.0.1 172.17.0.1 192.168.99.100] \n        contain a domain component.  Your generated certs may fail \n        TLS validation unless you only use one of these shortnames \n        or IPs to connect.  You can use the --san flag to add more aliases  \n\n        You may enter additional aliases (SANs) now or press enter to \n        proceed with the above list. \n        Additional aliases: INFO[0646] Installing UCP with host address \n        192.168.99.100 - If this is incorrect, please specify an \n        alternative address with the '--host-address' flag  \n        INFO[0000] Checking that required ports are available and accessible  \n\n        INFO[0002] Generating UCP Cluster Root CA                \n        INFO[0039] Generating UCP Client Root CA                 \n        INFO[0043] Deploying UCP Containers                      \n        INFO[0052] New configuration established.  Signalling the daemon\n        to load it...  \n        INFO[0053] Successfully delivered signal to daemon       \n        INFO[0053] UCP instance ID:            \n        KLIE:IHVL:PIDW:ZMVJ:Z4AC:JWEX:RZL5:U56Y:GRMM:FAOI:PPV7:5TZZ  \n        INFO[0053] UCP Server SSL: SHA-256       \n        Fingerprint=17:39:13:4A:B0:D9:E8:CC:31:AD:65:5D:\n        52:1F:ED:72:F0:81:51:CF:07:74:85:F3:4A:66:F1:C0:A1:CC:7E:C6  \n        INFO[0053] Login as \"admin\"/(your admin password) to UCP at         \n        https://192.168.99.100:443\n\n```", "```\n        $ docker-machine env node2 \n        export DOCKER_TLS_VERIFY=\"1\" \n        export DOCKER_HOST=\"tcp://192.168.99.102:2376\" \n        export DOCKER_CERT_PATH=\"/Users/vkohli/.docker/machine/machines/node2\" \n        export DOCKER_MACHINE_NAME=\"node2\" \n        # Run this command to configure your shell:  \n        # eval $(docker-machine env node2) \n        $ eval $(docker-machine env node2)\n\n```", "```\n$ docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock\n         --name ucp docker/ucp join -i --host-address \n        $(docker-machine ip node2) \n\n        Unable to find image 'docker/ucp:latest' locally \n        latest: Pulling from docker/ucp \n        ... \n\n        Please enter the URL to your UCP server: https://192.168.99.101:443 \n        UCP server https://192.168.99.101:443 \n        CA Subject: UCP Client Root CA \n        Serial Number: 4c826182c994a42f \n        SHA-256 Fingerprint=F3:15:5C:DF:D9:78:61:5B:DF:5F:39:1C:D6:\n        CF:93:E4:3E:78:58:AC:43:B9:CE:53:43:76:50:\n        00:F8:D7:22:37 \n        Do you want to trust this server and proceed with the join? \n        (y/n): y \n        Please enter your UCP Admin username: admin \n        Please enter your UCP Admin password:  \n        INFO[0028] Pulling required images... (this may take a while)  \n        WARN[0176] None of the hostnames we'll be using in the UCP \n        certificates [node2 127.0.0.1 172.17.0.1 192.168.99.102] \n        contain a domain component.  Your generated certs may fail \n        TLS validation unless you only use one of these shortnames \n        or IPs to connect.  You can use the --san flag to add more aliases  \n\n        You may enter additional aliases (SANs) now or press enter \n        to proceed with the above list. \n        Additional aliases:  \n        INFO[0000] This engine will join UCP and advertise itself\n        with host address 192.168.99.102 - If this is incorrect, \n        please specify an alternative address with the '--host-address' flag  \n        INFO[0000] Verifying your system is compatible with UCP  \n        INFO[0007] Starting local swarm containers               \n        INFO[0007] New configuration established.  Signalling the \n        daemon to load it...  \n        INFO[0008] Successfully delivered signal to daemon\n\n```", "```\n        $ curl -k https://192.168.99.101:443/ca > ucp-ca.pem \n\n        $ docker run -it --rm docker/dtr install --ucp-url https://\n        192.168.99.101:443/ --ucp-node node2 --dtr-load-balancer \n        192.168.99.102 --ucp-username admin --ucp-password 123456 \n        --ucp-ca \"$(cat ucp-ca.pem)\" \n\n        INFO[0000] Beginning Docker Trusted Registry installation  \n        INFO[0000] Connecting to network: node2/dtr-br           \n        INFO[0000] Waiting for phase2 container to be known to the \n        Docker daemon  \n        INFO[0000] Connecting to network: dtr-ol                 \n        ... \n\n        INFO[0011] Installation is complete                      \n        INFO[0011] Replica ID is set to: 7a9b6eb67065            \n        INFO[0011] You can use flag '--existing-replica-id 7a9b6eb67065' \n        when joining other replicas to your Docker Trusted Registry Cluster\n\n```"]