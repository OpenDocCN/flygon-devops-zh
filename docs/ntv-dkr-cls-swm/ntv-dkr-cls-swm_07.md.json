["```\nssh-keygen -t rsa -f keys/flocker\n\n```", "```\nfor i in `seq 101 110`; do\ndocker-machine create -d amazonec2 \\\n--amazonec2-ami ami-c9580bde \\\n--amazonec2-ssh-keypath keys/flocker \\\n--amazonec2-instance-type \"t2.medium\" \\\naws-$i;\ndone\n\n```", "```\ndocker run -v myvolume:/data --volume-driver flocker image command\n\n```", "```\ndocker volume ls\ndocker volume create -d flocker\n\n```", "```\ngit clone git@github.com:fsoppelsa/ansible-flocker.git\n\n```", "```\nsudo apt-get -y install --force-yes clusterhq-flocker-cli\n\n```", "```\npip install https://clusterhq-\n    archive.s3.amazonaws.com/python/Flocker-1.15.0-py2-none-any.whl\n\n```", "```\ncd utils\n./generate_certs.sh\n\n```", "```\nmkdir files/\n\n```", "```\ncp certs/* files/\n\n```", "```\ncontrol-service:\nhostname: \"<Control node IP>\"\nport: 4524\ndataset:\nbackend: \"aws\"\nregion: \"us-east-1\"\nzone: \"us-east-1a\"\naccess_key_id: \"<AWS-KEY>\"\nsecret_access_key: \"<AWS-ACCESS-KEY>\"\nversion: 1\n\n```", "```\n$ export ANSIBLE_HOST_KEY_CHECKING=False\n$ ansible-playbook \\\n-i inventory \\\n--private-key keys/flocker \\\nplaybooks/flocker_control_install.yml\n\n```", "```\n$ ansible-playbook \\\n-i inventory \\\n--private-key keys/flocker \\\nplaybooks/flocker_nodes_install.yml\n\n```", "```\n$ docker-machine ssh aws-104\n$ sudo su -\n# ls /var/run/docker/plugins/flocker/\nflocker.sock  flocker.sock.lock\n# curl -sSL https://get.flocker.io |sh\n\n```", "```\nexport FLOCKER_USER=client\nexport FLOCKER_CONTROL_SERVICE=54.84.176.7\nexport FLOCKER_CERTS_PATH=/etc/flocker\n\n```", "```\nflockerctl status\nflockerctl list\n\n```", "```\n$ docker-machine ssh aws-108\n$ sudo su -\n# docker run -v test:/data --volume-driver flocker \\\nbusybox sh -c \"echo example > /data/test.txt\"\n# docker run -v test:/data --volume-driver flocker \\\nbusybox sh -c \"cat /data/test.txt\"\nexample\n\n```", "```\ndocker volume ls\nflockerctl list\n\n```", "```\n# docker rm -v ba7884944577\n# docker rm -v 7293a156e199\n# flockerctl destroy -d 8577ed21-25a0-4c68-bafa-640f664e774e\n\n```", "```\ndocker network create --driver overlay --subnet 10.0.0.0/24 spark\n\n```", "```\ndocker volume create -d flocker -o size=75G -o profile=bronze --\n    name=spark\n\n```", "```\ndocker node update --label-add type=sparkmaster aws-105\n\n```", "```\n$ docker service create \\\n--container-label spark-master \\\n--network spark \\\n--constraint 'node.labels.type == sparkmaster' \\\n--publish 8080:8080 \\\n--publish 7077:7077 \\\n--publish 6066:6066 \\\n--name spark-master \\\n--replicas 1 \\\n--env SPARK_MASTER_IP=0.0.0.0 \\\n--mount type=volume,target=/data,source=spark,volume-driver=flocker \n    \\\nfsoppelsa/spark-master\n\n```", "```\n$ docker service create \\\n--constraint 'node.labels.type != sparkmaster' \\\n--network spark \\\n--name spark-worker \\\n--replicas 3 \\\n--env SPARK\\_MASTER\\_IP=10.0.0.3 \\\n--env SPARK\\_WORKER\\_CORES=1 \\\n--env SPARK\\_WORKER\\_MEMORY=1g \\\nfsoppelsa/spark-worker\n\n```", "```\ndocker run -ti fsoppelsa/spark-worker /spark/bin/run-example \n    SparkPi\n\n```", "```\n...\nPi is roughly 3.14916\n...\n\n```", "```\n$ docker run -ti fsoppelsa/spark-worker \\\n/spark/bin/spark-shell --master spark://<aws-105-IP>:7077\n\n```", "```\n$ docker service rm spark-worker\n$ docker service create \\\n--constraint 'node.labels.type == sparkmaster' \\\n--network spark \\\n--name spark-worker \\\n--replicas 1 \\\n--env SPARK\\_MASTER\\_IP=10.0.0.3 \\\n--mount type=volume,target=/data,source=spark,volume-driver=flocker\\\nfsoppelsa/spark-worker\n\n```", "```\n$ eval $(docker-machine env aws-105)\n\n```", "```\n$ docker exec -ti 13ad1e671c8d bash\n# echo \"the content of lorem ipsum\" > /data/file.txt\n\n```", "```\n$ docker exec -ti 13ad1e671c8d /spark/bin/spark-shell\n...\nscala> val inFile = sc.textFile(\"file:/data/file.txt\")\nscala> val counts = inFile.flatMap(line => line.split(\" \n        \")).map(word => (word, 1)).reduceByKey(_ + _)\nscala> counts.saveAsTextFile(\"file:/data/output\")\nscala> ^D\n\n```", "```\n$ docker run -v spark:/data -ti busybox sh\n# ls /data\n# ls /data/output/\n# cat /data/output/part-00000\n\n```", "```\naws-101$ docker service create \\\n--constraint 'node.labels.type != sparkmaster' \\\n--network spark \\\n--name spark-worker \\\n--replicas 3 \\\n--env SPARK_MASTER_IP=10.0.0.3 \\\n--env SPARK\\_WORKER\\_CORES=1 \\\n--env SPARK\\_WORKER\\_MEMORY=1g \\\nfsoppelsa/spark-worker\n\n```", "```\naws-101$ docker service scale spark-worker=30\n\n```", "```\naws-101$ docker network create --driver overlay monitoring\n\n```", "```\naws-101$ docker service create \\\n--mode global \\\n--name cadvisor \\\n--network monitoring \\\n--mount type=bind,src=/var/lib/docker/,dst=/var/lib/docker \\\n--mount type=bind,src=/,dst=/rootfs \\\n--mount type=bind,src=/var/run,dst=/var/run \\\n--publish 8080 \\\ngoogle/cadvisor\n\n```", "```\naws-101$ docker service create \\\n--name prometheus \\\n--network monitoring \\\n--replicas 1 \\\n--publish 9090:9090 \\\nprom/prometheus-swarm\n\n```", "```\naws-101$ docker service create \\\n--mode global \\\n--name node-exporter \\\n--network monitoring \\\n--publish 9100 \\\nprom/node-exporter\n\n```", "```\naws-101$ docker service create \\\n--name grafana \\\n--network monitoring \\\n--publish 3000:3000 \\\n--replicas 1 \\\n-e \"GF_SECURITY_ADMIN_PASSWORD=password\" \\\n-e \"PROMETHEUS_ENDPOINT=http://prometheus:9090\" \\\ngrafana/grafana\n\n```", "```\n\"admin\":\"password\"\n\n```"]