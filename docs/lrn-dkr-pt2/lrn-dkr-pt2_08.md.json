["```\n--link <container>:<alias>\n\n```", "```\n*<ALIAS>_PORT_<port>_<protocol>\n\n```", "```\n$ sudo docker run --rm --name example -it busybox:latest\n\n```", "```\n/ # cat /etc/hosts\n172.17.0.3      a02895551686\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n\n```", "```\n/ # env\nHOSTNAME=a02895551686\nSHLVL=1\nHOME=/root\nTERM=xterm\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nPWD=/\n\n```", "```\n$ sudo docker run --rm --link example:ex -it busybox:latest\n\n```", "```\n/ # cat /etc/hosts\n172.17.0.4      a17e5578b98e\n127.0.0.1       localhost\n::1     localhost ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n172.17.0.3      ex\n\n```", "```\n/ # env\nHOSTNAME=a17e5578b98e\nSHLVL=1\nHOME=/root\nEX_NAME=/berserk_mcclintock/ex\nTERM=xterm\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nPWD=/\n\n```", "```\n/ # ping -c 2 ex\nPING ex (172.17.0.3): 56 data bytes\n64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.108 ms\n64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.079 ms\n\n--- ex ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.079/0.093/0.108 ms\n\n```", "```\nFROM busybox:latest\nENV BOOK=\"Learning Docker\" \\\n    CHAPTER=\"Orchestrating Containers\"\n```", "```\n$ sudo docker build -t envex .\n\n```", "```\n$ sudo docker run -it --rm \\\n --name example envex\n\n```", "```\n/ # env\nHOSTNAME=b53bc036725c\nSHLVL=1\nHOME=/root\nTERM=xterm\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nBOOK=Learning Docker\nCHAPTER=Orchestrating Containers\nPWD=/\n\n```", "```\n$ sudo docker run --rm --link example:ex \\\n busybox:latest env\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=a5e0c07fd643\nTERM=xterm\nEX_NAME=/stoic_hawking/ex\nEX_ENV_BOOK=Learning Docker\nEX_ENV_CHAPTER=Orchestrating Containers\nHOME=/root\n\n```", "```\nFROM busybox:latest\nEXPOSE 8080 80\n```", "```\n$ sudo docker build -t portex .\n\n```", "```\n$ sudo docker run -it --rm \\\n --name example portex\n\n```", "```\n$ sudo docker run --rm --link example:ex \\\n busybox:latest env\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=c378bb55e69c\nTERM=xterm\nEX_PORT=tcp://172.17.0.4:80\nEX_PORT_80_TCP=tcp://172.17.0.4:80\nEX_PORT_80_TCP_ADDR=172.17.0.4\nEX_PORT_80_TCP_PORT=80\nEX_PORT_80_TCP_PROTO=tcp\nEX_PORT_8080_TCP=tcp://172.17.0.4:8080\nEX_PORT_8080_TCP_ADDR=172.17.0.4\nEX_PORT_8080_TCP_PORT=8080\nEX_PORT_8080_TCP_PROTO=tcp\nEX_NAME=/prickly_rosalind/ex\nHOME=/root\n\n```", "```\n$ sudo sh -c 'wget -qO-       https://github.com/docker/compose/releases/download/1.2.0/docker-compose-'uname -s'-'uname -m' >  /usr/local/bin/docker-compose; chmod +x /usr/local/bin/docker-compose'\n\n```", "```\n$ sudo sh -c 'curl  -sSL  https://github.com/docker/compose/releases/download/1.2.0/docker-compose-'uname -s'-'uname -m' >  /usr/local/bin/docker-compose; chmod +x /usr/local/bin/docker-compose'\n\n```", "```\n$ sudo pip install -U docker-compose\n\n```", "```\n$ docker-compose --version\ndocker-compose 1.2.0\n\n```", "```\n<service>:\n   <key>: <value>\n   <key>:\n       - <value>\n       - <value>\n```", "```\ndocker-compose [<options>] <command> [<args>...]\n\n```", "```\n// A Simple Request/Response web application\n\n// Load all required libraries\nvar http = require('http');\nvar url = require('url');\nvar redis = require('redis');\n\n// Connect to redis server running\n// createClient API is called with\n//  -- 6379, a well-known port to which the\n//           redis server listens to\n//  -- redis, is the link name of the container\n//            that runs redis server\nvar client = redis.createClient(6379, 'redis');\n\n// Set the key value pair in the redis server\n\n// Here all the keys proceeds with \"/\", because\n// URL parser always have \"/\" as its first character\nclient.set(\"/\", \"Welcome to Docker-Compose helper\\nEnter the docker-compose command in the URL for help\\n\", redis.print);\nclient.set(\"/build\", \"Build or rebuild services\", redis.print);\nclient.set(\"/kill\", \"Kill contianers\", redis.print);\n\nvar server = http.createServer(function (request, response) {\n  var href = url.parse(request.url, true).href;\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n\n  // Pull the response (value) string using the URL\n  client.get(href, function (err, reply) {\n    if ( reply == null ) response.write(\"Command: \" + href.slice(1) + \" not supported\\n\");\n    else response.write(reply + \"\\n\");\n    response.end();\n  });\n});\n\nconsole.log(\"Listening on port 80\");\nserver.listen(80);\n```", "```\n###############################################\n# Dockerfile to build a sample web application\n###############################################\n\n# Base image is node.js\nFROM node:latest\n\n# Author: Dr. Peter\nMAINTAINER Dr. Peter <peterindia@gmail.com>\n\n# Install redis driver for node.js\nRUN npm install redis\n\n# Copy the source code to the Docker image\nADD example.js /myapp/example.js\n```", "```\nweb:\n  build: .\n  command: node /myapp/example.js\n  links:\n   - redis\n  ports:\n   - 8080:80\nredis:\n  image: redis:latest\n```", "```\n$ cd ~/example\n\n```", "```\n$ sudo docker-compose build\n\n```", "```\n$ sudo docker-compose up\nCreating example_redis_1...\nPulling image redis:latest...\nlatest: Pulling from redis\n21e4345e9035: Pull complete\n. . . TRUNCATED OUTPUT . . .\nredis:latest: The image you are pulling has been verified.\nImportant: image verification is a tech preview feature and should not be relied on to provide security.\nDigest: sha256:dad98e997480d657b2c00085883640c747b04ca882d6da50760e038fce63e1b5\nStatus: Downloaded newer image for redis:latest\nCreating example_web_1...\nAttaching to example_redis_1, example_web_1\n. . . TRUNCATED OUTPUT . . .\nredis_1 | 1:M 25 Apr 18:12:59.674 * The server is now ready to accept connections on port 6379\nweb_1  | Listening on port 80\nweb_1  | Reply: OK\nweb_1  | Reply: OK\nweb_1  | Reply: OK\n\n```", "```\n$ sudo docker-compose ps\n Name                   Command             State          Ports\n----------------------------------------------------------------------------\nexample_redis_1   /entrypoint.sh redis-server   Up      6379/tcp\nexample_web_1     node /myapp/example.js        Up      0.0.0.0:8080->80/tcp\n\n```", "```\n$ curl http://0.0.0.0:8080\nWelcome to Docker-Compose helper\nEnter the docker-compose command in the URL for help\n$ curl http://0.0.0.0:8080/build\nBuild or rebuild services\n$ curl http://0.0.0.0:8080/something\nCommand: something not supported\n\n```"]