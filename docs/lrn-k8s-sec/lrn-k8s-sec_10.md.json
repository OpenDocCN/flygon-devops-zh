["```\nFROM ubuntu\n# install dependencies\nRUN apt-get install -y software-properties-common python\nRUN add-apt-repository ppa:chris-lea/node.js\nRUN echo \"deb http://us.archive.ubuntu.com/ubuntu/ precise universe\" >> /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install -y nodejs\n# make directory\nRUN mkdir /var/www\n# copy app.js\nADD app.js /var/www/app.js\n# set the default command to run\nCMD [\"/usr/bin/node\", \"/var/www/app.js\"]\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: ubuntu-1\n  labels:\n    app: util\nspec:\n  containers:\n  - name: ubuntu\n    image: ubuntu\n    imagePullPolicy: Always\n  hostPID: true\n  hostNetwork: true\n  hostIPC: true\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod\n  labels:\n    app: web\nspec:\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  containers:\n  - name: nginx\n    image: kaizheh/nginx \n    securityContext:\n      privileged: false\n      capabilities:\n        add:\n        - NETWORK_ADMIN\n      readOnlyRootFilesystem: true \n      runAsUser: 100\n      runAsGroup: 1000\n```", "```\n#include <tunables/global>\nprofile k8s-apparmor-example-deny-write flags=(attach_disconnected) {\n  #include <abstractions/base>\n  file,\n  # Deny all file writes.\n  deny /** w,\n}\n```", "```\ncat /etc/apparmor.d/profile.name | sudo apparmor_parser -a\n```", "```\nsudo aa-enforce /etc/apparmor.d/profile.name\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hello-apparmor\n  annotations:\n    # Tell Kubernetes to apply the AppArmor profile \n    # \"k8s-apparmor-example-deny-write\".\n    container.apparmor.security.beta.kubernetes.io/hello: \n      localhost/k8s-apparmor-example-deny-write\nspec:\n  containers:\n  - name: hello\n    image: busybox\n    command: [ \"sh\", \"-c\", \"echo 'Hello AppArmor!' && sleep 1h\" ]\n```", "```\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n    name: example\nspec:\n  allowedCapabilities:\n  - NET_ADMIN\n  - IPC_LOCK\n  allowedHostPaths:\n  - pathPrefix: /dev\n  - pathPrefix: /run\n  - pathPrefix: /\n  fsGroup:\n    rule: RunAsAny\n  hostNetwork: true\n  privileged: true\n  runAsUser:\n    rule: RunAsAny\n  seLinux:\n    rule: RunAsAny\n  supplementalGroups:\n    rule: RunAsAny\n  volumes:\n  - hostPath\n  - secret\n```", "```\n$ kubectl apply -f example-psp.yaml\n```", "```\n$ kubectl get psp\n```", "```\nNAME      PRIV     CAPS                           SELINUX    RUNASUSER   FSGROUP    SUPGROUP   READONLYROOTFS   VOLUMES\nexample   true     NET_ADMIN, IPC_LOCK            RunAsAny   RunAsAny    RunAsAny   RunAsAny   false            hostPath,secret\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: use-example-psp\nrules:\n- apiGroups: ['policy']\n  resources: ['podsecuritypolicies']\n  verbs:     ['use']\n  resourceNames:\n  - example\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: use-example-psp-binding\nroleRef:\n  kind: ClusterRole\n  name: use-example-psp\n  apiGroup: rbac.authorization.k8s.io\nsubjects:\n# Authorize specific service accounts:\n- kind: ServiceAccount\n  name: test-sa\n  namespace: psp-test\n```", "```\n$ kubectl krew install advise-psp\n```", "```\n$ kubectl advise-psp\nA way to generate K8s PodSecurityPolicy objects from a live K8s environment or individual K8s objects containing pod specifications\nUsage:\n  kube-psp-advisor [command]\nAvailable Commands:\n  convert     Generate a PodSecurityPolicy from a single K8s Yaml file\n  help        Help about any command\n  inspect     Inspect a live K8s Environment to generate a PodSecurityPolicy\nFlags:\n  -h, --help           help for kube-psp-advisor\n      --level string   Log level (default \"info\")\n```", "```\n$ kubectl advise-psp inspect --grant --namespace psp-test\n```", "```\n# Pod security policies will be created for service account 'sa-1' in namespace 'psp-test' with following workloads:\n#\tKind: ReplicaSet, Name: busy-rs, Image: busybox\n#\tKind: Pod, Name: busy-pod, Image: busybox\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  creationTimestamp: null\n  name: psp-for-psp-test-sa-1\nspec:\n  allowedCapabilities:\n  - SYS_ADMIN\n  allowedHostPaths:\n  - pathPrefix: /usr/bin\n    readOnly: true\n  fsGroup:\n    rule: RunAsAny\n  hostIPC: true\n  hostNetwork: true\n  hostPID: true\n  runAsUser:\n    rule: RunAsAny\n  seLinux:\n    rule: RunAsAny\n  supplementalGroups:\n    rule: RunAsAny\n  volumes:\n  - configMap\n  - secret\n  - hostPath\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  creationTimestamp: null\n  name: use-psp-by-psp-test:sa-1\n  namespace: psp-test\nrules:\n- apiGroups:\n  - policy\n  resourceNames:\n  - psp-for-psp-test-sa-1\n  resources:\n  - podsecuritypolicies\n  verbs:\n  - use\n---\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  creationTimestamp: null\n  name: use-psp-by-psp-test:sa-1-binding\n  namespace: psp-test\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: use-psp-by-psp-test:sa-1\nsubjects:\n- kind: ServiceAccount\n  name: sa-1\n  namespace: psp-test\n---\n```", "```\n---\n# Pod security policies will NOT be created for service account 'default' in namespace 'psp-test' with following workdloads:\n#\tKind: ReplicationController, Name: busy-rc, Image: busybox\n---\n```"]