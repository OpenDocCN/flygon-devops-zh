["```\n$prlimit --nproc=2 --pid=18065\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: demo\nspec:\n  containers:\n  - name: demo\n```", "```\n$kubectl get pod demo —output=yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    kubectl.kubernetes.io/last-applied-configuration: |\n      {\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"name\":\"demo\",\"namespace\":\"default\"},\"spec\":{\"containers\":[{\"image\":\"nginx\",\"name\":\"demo\"}]}}\n    kubernetes.io/limit-ranger: 'LimitRanger plugin set: cpu request for container\n      demo'\n  creationTimestamp: \"2020-05-07T21:54:47Z\"\n  name: demo\n  namespace: default\n  resourceVersion: \"3455\"\n  selfLink: /api/v1/namespaces/default/pods/demo\n  uid: 5e783495-90ad-11ea-ae75-42010a800074\nspec:\n  containers:\n  - image: nginx\n    imagePullPolicy: Always\n    name: demo\n    resources:\n      requests:\n        cpu: 100m\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: demo\nspec:\n  containers:\n  - name: demo\n    image: nginx\n    resources:\n      limits:\n          hugepages-2Mi: 100Mi\n      requests:\n        cpu: 500m         memory: 300Mi         hugepages-2Mi: 100Mi \n```", "```\n$kubectl get pod demo —output=yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: \"2020-05-07T22:02:16Z\"\n  name: demo-1\n  namespace: default\n  resourceVersion: \"5030\"\n  selfLink: /api/v1/namespaces/default/pods/demo-1\n  uid: 6a276dd2-90ae-11ea-ae75-42010a800074\nspec:\n  containers:\n  - image: nginx\n    imagePullPolicy: Always\n    name: demo\n    resources:\n      limits:\n        hugepages-2Mi: 100Mi\n      requests:\n        cpu: 500m\n        hugepages-2Mi: 100Mi\n        memory: 300Mi\n```", "```\n$ cat stress.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: demo\nspec:\n  containers:\n  - name: demo\n    image: polinux/stress\n    command: [\"stress\"]\n    args: [\"--vm\", \"1\", \"--vm-bytes\", \"150M\", \"--vm-hang\", \"1\"]\n```", "```\n$ kubectl create -f stress.yaml pod/demo created\n$ kubectl get pods NAME         READY   STATUS             RESTARTS   AGE demo         1/1     Running            0          3h\n```", "```\ncontainers:\n  - name: demo\n    image: polinux/stress\n    resources:\n      limits:\n        memory: \"150Mi\"\n    command: [\"stress\"]\nargs: [\"--vm\", \"1\", \"--vm-bytes\", \"150M\", \"--vm-hang\", \"1\"]\n```", "```\n$ kubectl get pods\nNAME     READY   STATUS             RESTARTS   AGE\ndemo     1/1     Running            0          44s\ndemo-1   0/1     CrashLoopBackOff   1          5s\n```", "```\n$ kubectl describe pods demo\nName:         demo\nNamespace:    default\n...\nContainers:\n  demo:\n    Container ID:  docker://a43de56a456342f7d53fa9752aa4fa7366 cd4b8c395b658d1fc607f2703750c2\n    Image:         polinux/stress\n    Image ID:      docker-pullable://polinux/stress@sha256:b61 44f84f9c15dac80deb48d3a646b55c7043ab1d83ea0a697c09097aaad21aa\n...\n    Command:\n      stress\n    Args:\n      --vm\n      1\n      --vm-bytes\n      150M\n      --vm-hang\n      1\n    State:          Waiting\n      Reason:       CrashLoopBackOff\n    Last State:     Terminated\n      Reason:       OOMKilled\n      Exit Code:    1\n      Started:      Mon, 04 May 2020 10:48:14 -0700\n      Finished:     Mon, 04 May 2020 10:48:14 -0700\n```", "```\n$ kubectl describe namespace default\nName:         default\nLabels:       <none>\nAnnotations:  <none>\nStatus:       Active\nResource Quotas\n Name:                       gke-resource-quotas\n Resource                    Used  Hard\n --------                    ---   ---\n count/ingresses.extensions  0     100\n count/jobs.batch            0     5k\n pods                        2     1500\n services                    1     500\nResource Limits\n Type       Resource  Min  Max  Default Request  Default Limit  Max Limit/Request Ratio\n ----       --------  ---  ---  ---------------  -------------  -----------------------\n Container  cpu       -    -    100m             -              -\n```", "```\n$ kubectl create namespace demo\nnamespace/demo created\n```", "```\n$ cat quota.yaml\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-resources\nspec:\n  hard:\n    requests.cpu: \"1\"\n```", "```\n$ kubectl apply -f quota.yaml --namespace demo\nresourcequota/compute-resources created\n```", "```\n$ kubectl describe namespace demo\nName:         demo\nLabels:       <none>\nAnnotations:  <none>\nStatus:       Active\nResource Quotas\n Name:         compute-resources\n Resource      Used  Hard\n --------      ---   ---\n requests.cpu  0     1\n Name:                       gke-resource-quotas\n Resource                    Used  Hard\n --------                    ---   ---\n count/ingresses.extensions  0     100\n count/jobs.batch            0     5k\n pods                        0     1500\n services                    0     500\n```", "```\n$ kubectl apply -f nginx-cpu-1.yaml --namespace demo\nError from server (Forbidden): error when creating \"nginx-cpu-1.yaml\": pods \"demo-1\" is forbidden: exceeded quota: compute-resources, requested: requests.cpu=1, used: requests.cpu=1, limited: requests.cpu=1\n```", "```\n$ ps aux | grep kube-api\nroot      3708  6.7  8.7 497216 345256 ?       Ssl  01:44   0:10 kube-apiserver --advertise-address=192.168.99.116 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/var/lib/minikube/certs/ca.crt --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota\n```", "```\n$kubectl create namespace demo\n```", "```\n$ cat limit_range.yaml\napiVersion: \"v1\"\nkind: \"LimitRange\"\nmetadata:\n  name: limit1\n  namespace: demo\nspec:\n  limits:\n  - type: \"Container\"\n    max:\n      memory: 512Mi\n      cpu: 500m\n    min:\n      memory: 50Mi\n      cpu: 50m\n```", "```\n$ kubectl get limitrange -n demo\nNAME     CREATED AT\nlimit1   2020-04-30T02:06:18Z\n```", "```\n$cat nginx-bad.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-bad\nspec:\n  containers:\n  - name: nginx-bad\n    image: nginx-bad\n    resources:\n      limits:\n        memory: \"800Mi\"\n        cpu: \"500m\"\n```", "```\n$ kubectl apply -f nginx-bad.yaml -n demo\nError from server (Forbidden): error when creating \"nginx-bad.yaml\": pods \"nginx-bad\" is forbidden: maximum memory usage per Container is 512Mi, but limit is 800M\n```", "```\n$kubectl create serviceaccount dashboard-admin-sa\n```", "```\n$kubectl create clusterrolebinding dashboard-admin-sa --clusterrole=cluster-admin --serviceaccount=default:dashboard-admin-sa\n```", "```\n$ kubectl describe serviceaccount dashboard-admin-sa\nName:                dashboard-admin-sa\nNamespace:           default\nLabels:              <none>\nAnnotations:         <none>\nImage pull secrets:  <none>\nMountable secrets:   dashboard-admin-sa-token-5zwpw\nTokens:              dashboard-admin-sa-token-5zwpw\nEvents:              <none>\n```", "```\n$ kubectl describe secrets dashboard-admin-sa-token-5zwpw\nName:         dashboard-admin-sa-token-5zwpw\nNamespace:    default\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: dashboard-admin-sa\n              kubernetes.io/service-account.uid: 83218a92-915c-11ea-b763-42010a800022\nType:  kubernetes.io/service-account-token\nData\n====\nca.crt:     1119 bytes\nnamespace:  7 bytes\ntoken:      <token>\n```", "```\n$ docker ps | grep dashboard\na963e6e6a54b        3b08661dc379           \"/metrics-sidecar\"       4 minutes ago       Up 4 minutes                            k8s_dashboard-metrics-scraper_dashboard-metrics-scraper-84bfdf55ff-wfxdm_kubernetes-dashboard_5a7ef2a8-b3b4-4e4c-ae85-11cc8b61c1c1_0\nc28f0e2799c1        cdc71b5a8a0e           \"/dashboard --insecu…\"   4 minutes ago       Up 4 minutes                            k8s_kubernetes-dashboard_kubernetes-dashboard-bc446cc64-czmn8_kubernetes-dashboard_40630c71-3c6a-447b-ae68-e23603686ede_0\n10f0b024a13f        k8s.gcr.io/pause:3.2   \"/pause\"                 4 minutes ago       Up 4 minutes                            k8s_POD_dashboard-metrics-scraper-84bfdf55ff-wfxdm_kubernetes-dashboard_5a7ef2a8-b3b4-4e4c-ae85-11cc8b61c1c1_0\nf9c1e82174d8        k8s.gcr.io/pause:3.2   \"/pause\"                 4 minutes ago       Up 4 minutes                            k8s_POD_kubernetes-dashboard-bc446cc64-czmn8_kubernetes-dashboard_40630c71-3c6a-447b-ae68-e23603686ede_0\n```", "```\n$ ps aux | grep dashboard\ndbus     10727  0.9  1.1 136752 46240 ?        Ssl  05:46   0:02 /dashboard --insecure-bind-address=0.0.0.0 --bind-address=0.0.0.0 --namespace=kubernetes-dashboard --enable-skip-login --disable-settings-authorizer\ndocker   11889  0.0  0.0  11408   556 pts/0    S+   05:51   0:00 grep dashboard\n```", "```\n$ minikube addons enable metrics-server\n```", "```\n$ kubectl get apiservices | grep metrics\nv1beta1.metrics.k8s.io                 kube-system/metrics-server   True        7m17s\n```", "```\n$ kubectl top node\nNAME       CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%\nminikube   156m         7%     1140Mi          30%\n$ kubectl top pod\nNAME         CPU(cores)   MEMORY(bytes)\nnginx-good   0m           2Mi\n```", "```\n$kubectl create namespace monitoring\n```", "```\n$ cat prometheus-role.yaml\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: prometheus\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - nodes\n  - nodes/proxy\n  - services\n  - endpoints\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups:\n  - extensions\n  resources:\n  - ingresses\n  verbs: [\"get\", \"list\", \"watch\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n$ kubectl create -f prometheus-role.yaml\nclusterrole.rbac.authorization.k8s.io/prometheus created\n```", "```\n$ cat prometheus-rolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: monitoring\n```", "```\n$ cat config_prometheus.yaml apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-server-conf\n  labels:\n    name: prometheus-server-conf\n  namespace: monitoring\ndata:\n  prometheus.yml: |-\n    global:\n      scrape_interval: 5s\n      evaluation_interval: 5s\n  scrape_configs:    - job_name: 'kubernetes-apiservers'\n      kubernetes_sd_configs:\n      - role: endpoints\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n        action: keep\n        regex: default;kubernetes;https\n```", "```\nspec:\n      containers:\n        - name: prometheus\n          image: prom/prometheus:v2.12.0\n          args:\n            - \"--config.file=/etc/prometheus/prometheus.yml\"\n            - \"--storage.tsdb.path=/prometheus/\"\n          ports:\n            - containerPort: 9090\n          volumeMounts:\n            - name: prometheus-config-volume\n              mountPath: /etc/prometheus/\n            - name: prometheus-storage-volume\n              mountPath: /prometheus/\n      volumes:\n        - name: prometheus-config-volume\n          configMap:\n            defaultMode: 420\n            name: prometheus-server-conf\n        - name: prometheus-storage-volume\n          emptyDir: {}\n```", "```\n$ kubectl port-forward <prometheus-pod> 8080:9090 -n monitoring\n```", "```\nsum(rate(container_cpu_usage_seconds_total{container_name!=\"POD\",pod_name!=\"\"}[5m]))\n```", "```\nsum(rate(container_cpu_usage_seconds_total{container_name!=\"POD\",namespace!=\"\"}[5m])) by (namespace)\n```", "```\nsum(kube_pod_container_resource_requests_cpu_cores) by (pod)\n```", "```\nprometheus.rules: |-\n    groups:\n    - name: Demo Alert\n      rules:\n      - alert: High Pod Memory\n        expr: sum(container_memory_usage_bytes{pod!=\"\"})  by (pod) > 1000000000\n        for: 1m\n        labels:\n          severity: high\n        annotations:\n          summary: High Memory Usage\n```", "```\n$ cat grafana-data.yaml                                   apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-datasources\n  namespace: monitoring\ndata:\n  prometheus.yaml: |-\n    {\n        \"apiVersion\": 1,\n        \"datasources\": [\n            {\n               \"access\":\"proxy\",\n                \"editable\": true,\n                \"name\": \"prometheus\",\n                \"orgId\": 1,\n                \"type\": \"prometheus\",\n                \"url\": \"http://192.168.99.128:30000\",\n                \"version\": 1\n            }\n        ]\n    }\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: monitoring\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      name: grafana\n      labels:\n        app: grafana\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        ports:\n        - name: grafana\n          containerPort: 3000\n        volumeMounts:\n          - mountPath: /var/lib/grafana\n            name: grafana-storage\n          - mountPath: /etc/grafana/provisioning/datasources\n            name: grafana-datasources\n            readOnly: false\n      volumes:\n        - name: grafana-storage\n          emptyDir: {}\n        - name: grafana-datasources\n          configMap:\n              name: grafana-datasources\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana\n  namespace: monitoring\n  annotations:\n      prometheus.io/scrape: 'true'\n      prometheus.io/port:   '3000'\nspec:\n  selector:\n    app: grafana\n  type: NodePort\n  ports:\n    - port: 3000\n      targetPort: 3000\n      nodePort: 32000\n```"]